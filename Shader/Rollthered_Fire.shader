//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Rollthered/Fire" {
Properties {
_FresnelPower ("Fresnel Power", Range(0, 5)) = 2
_FresnelScale ("Fresnel Scale", Range(0, 0.3)) = 1.5
_EdgeLength ("Edge length", Range(2, 50)) = 13.5
_FresnelBias ("Fresnel Bias", Range(0, 0.2)) = 0.2364706
_Flamecolor2 ("Flame color 2", Color) = (1,0,0,0)
_FlameColor ("Flame Color", Color) = (1,0.8068966,0,0)
_Y_Mask ("Y_Mask", Range(0, 5)) = 0
_FlameHeight ("Flame Height", Range(0, 1)) = 0
_Flamenoise ("Flame noise", 2D) = "white" { }
_FlameWave ("Flame Wave", 2D) = "white" { }
_v ("v", Range(-1, 1)) = 0
_u ("u", Range(-1, 1)) = 0
_Alpha ("Alpha", Range(0, 1)) = 0
__dirty ("", Float) = 1
}
SubShader {
 Tags { "IGNOREPROJECTOR" = "true" "IsEmissive" = "true" "QUEUE" = "Transparent+100" "RenderType" = "Transparent" }
 Pass {
  Name "FORWARD"
  Tags { "IGNOREPROJECTOR" = "true" "IsEmissive" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent+100" "RenderType" = "Transparent" }
  Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
  ColorMask RGB 0
  ZWrite Off
  Cull Front
  GpuProgramID 13429
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 410
#extension GL_ARB_explicit_attrib_location : require

in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
in  vec4 in_TEXCOORD3;
in  vec4 in_COLOR0;
layout(location = 0) out vec4 vs_INTERNALTESSPOS0;
layout(location = 1) out vec4 vs_TANGENT0;
layout(location = 2) out vec3 vs_NORMAL0;
layout(location = 3) out vec4 vs_TEXCOORD0;
layout(location = 4) out vec4 vs_TEXCOORD1;
layout(location = 5) out vec4 vs_TEXCOORD2;
layout(location = 6) out vec4 vs_TEXCOORD3;
layout(location = 7) out vec4 vs_COLOR0;
void main()
{
    vs_INTERNALTESSPOS0 = in_POSITION0;
    vs_TANGENT0 = in_TANGENT0;
    vs_NORMAL0.xyz = in_NORMAL0.xyz;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD3;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Y_Mask;
uniform 	vec4 _Flamecolor2;
uniform 	vec4 _FlameColor;
uniform 	float _FresnelBias;
uniform 	float _FresnelScale;
uniform 	float _FresnelPower;
uniform 	float _Alpha;
UNITY_LOCATION(0) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform  samplerCube unity_SpecCube1;
layout(location = 0) in  vec3 ds_TEXCOORD0;
layout(location = 1) in  vec3 ds_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
bvec3 u_xlatb7;
vec3 u_xlat8;
bvec3 u_xlatb9;
vec3 u_xlat10;
float u_xlat30;
float u_xlat31;
float u_xlat32;
bool u_xlatb32;
float u_xlat33;
bool u_xlatb33;
void main()
{
    u_xlat0.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat31 = dot(ds_TEXCOORD0.xyz, ds_TEXCOORD0.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * ds_TEXCOORD0.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat32 = (-u_xlat31) + 1.0;
    u_xlat32 = log2(u_xlat32);
    u_xlat32 = u_xlat32 * _FresnelPower;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = _FresnelScale * u_xlat32 + _FresnelBias;
    u_xlat3.xyz = (-_Flamecolor2.xyz) + _FlameColor.xyz;
    u_xlat3.xyz = vec3(u_xlat32) * u_xlat3.xyz + _Flamecolor2.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(5.0, 5.0, 5.0));
    u_xlat33 = (-ds_TEXCOORD0.y) + _Y_Mask;
    u_xlat33 = abs(u_xlat33) + (-_Y_Mask);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat32 = u_xlat32 * u_xlat33;
    SV_Target0.w = u_xlat32 * _Alpha;
    u_xlat32 = dot((-u_xlat1.xyz), ds_TEXCOORD0.xyz);
    u_xlat32 = u_xlat32 + u_xlat32;
    u_xlat1.xyz = ds_TEXCOORD0.xyz * (-vec3(u_xlat32)) + (-u_xlat1.xyz);
    u_xlatb32 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb32){
        u_xlat32 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat32 = inversesqrt(u_xlat32);
        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat32);
        u_xlat5.xyz = (-ds_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
        u_xlat6.xyz = (-ds_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat5;
            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
            u_xlat5 = hlslcc_movcTemp;
        }
        u_xlat32 = min(u_xlat5.y, u_xlat5.x);
        u_xlat32 = min(u_xlat5.z, u_xlat32);
        u_xlat5.xyz = ds_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat32) + u_xlat5.xyz;
    } else {
        u_xlat4.xyz = u_xlat1.xyz;
    }
    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, 6.0);
    u_xlat32 = u_xlat4.w + -1.0;
    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat32 + 1.0;
    u_xlat32 = log2(u_xlat32);
    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat32);
    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb33){
        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb33){
            u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat33 = inversesqrt(u_xlat33);
            u_xlat6.xyz = u_xlat1.xyz * vec3(u_xlat33);
            u_xlat7.xyz = (-ds_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
            u_xlat8.xyz = (-ds_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat7;
                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
                u_xlat7 = hlslcc_movcTemp;
            }
            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
            u_xlat33 = min(u_xlat7.z, u_xlat33);
            u_xlat7.xyz = ds_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
        }
        u_xlat6 = textureLod(unity_SpecCube1, u_xlat1.xyz, 6.0);
        u_xlat1.x = u_xlat6.w + -1.0;
        u_xlat1.x = unity_SpecCube1_HDR.w * u_xlat1.x + 1.0;
        u_xlat1.x = log2(u_xlat1.x);
        u_xlat1.x = u_xlat1.x * unity_SpecCube1_HDR.y;
        u_xlat1.x = exp2(u_xlat1.x);
        u_xlat1.x = u_xlat1.x * unity_SpecCube1_HDR.x;
        u_xlat1.xyz = u_xlat6.xyz * u_xlat1.xxx;
        u_xlat4.xyz = vec3(u_xlat32) * u_xlat4.xyz + (-u_xlat1.xyz);
        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat1.xyz;
    }
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10.x = abs(u_xlat31) + u_xlat30;
    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
    u_xlat10.x = 0.5 / u_xlat10.x;
    u_xlat10.x = u_xlat10.x * 0.999999881;
    u_xlat10.x = u_xlat30 * u_xlat10.x;
    u_xlat10.xyz = u_xlat10.xxx * _LightColor0.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat1.x = u_xlat0.x * u_xlat0.x;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.959999979 + 0.0399999991;
    u_xlat1.xyz = u_xlat5.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat31 = -abs(u_xlat31) + 1.0;
    u_xlat2.x = u_xlat31 * u_xlat31;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat31 = u_xlat31 * u_xlat2.x;
    u_xlat31 = u_xlat31 * 2.23517418e-08 + 0.0399999991;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xxx + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    return;
}

#endif
#ifdef HULL
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(vertices=3) out;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	float _EdgeLength;
layout(location = 0) in vec4 vs_INTERNALTESSPOS0[];
layout(location = 0) out vec4 hs_INTERNALTESSPOS0[];
layout(location = 1) in vec4 vs_TANGENT0[];
layout(location = 1) out vec4 hs_TANGENT0[];
layout(location = 2) in vec3 vs_NORMAL0[];
layout(location = 2) out vec3 hs_NORMAL0[];
layout(location = 3) in vec4 vs_TEXCOORD0[];
layout(location = 3) out vec4 hs_TEXCOORD0[];
layout(location = 4) in vec4 vs_TEXCOORD1[];
layout(location = 4) out vec4 hs_TEXCOORD1[];
layout(location = 5) in vec4 vs_TEXCOORD2[];
layout(location = 5) out vec4 hs_TEXCOORD2[];
layout(location = 6) in vec4 vs_TEXCOORD3[];
layout(location = 6) out vec4 hs_TEXCOORD3[];
layout(location = 7) in vec4 vs_COLOR0[];
layout(location = 7) out vec4 hs_COLOR0[];
void passthrough_ctrl_points()
{
    hs_INTERNALTESSPOS0[gl_InvocationID] = vs_INTERNALTESSPOS0[gl_InvocationID];
    hs_TANGENT0[gl_InvocationID] = vs_TANGENT0[gl_InvocationID];
    hs_NORMAL0[gl_InvocationID] = vs_NORMAL0[gl_InvocationID];
    hs_TEXCOORD0[gl_InvocationID] = vs_TEXCOORD0[gl_InvocationID];
    hs_TEXCOORD1[gl_InvocationID] = vs_TEXCOORD1[gl_InvocationID];
    hs_TEXCOORD2[gl_InvocationID] = vs_TEXCOORD2[gl_InvocationID];
    hs_TEXCOORD3[gl_InvocationID] = vs_TEXCOORD3[gl_InvocationID];
    hs_COLOR0[gl_InvocationID] = vs_COLOR0[gl_InvocationID];
}
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
float u_xlat13;
void fork_phase2(int phaseInstanceID)
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[1].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[1].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[2].www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _EdgeLength;
    u_xlat2.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _ScreenParams.y;
    u_xlat12 = u_xlat13 / u_xlat12;
    gl_TessLevelOuter[0] = max(u_xlat12, 1.0);
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[0].www + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _ScreenParams.y;
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _EdgeLength;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    gl_TessLevelOuter[1] = max(u_xlat12, 1.0);
    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _ScreenParams.y;
    u_xlat4.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _EdgeLength;
    u_xlat0.x = u_xlat0.x / u_xlat4.x;
    gl_TessLevelOuter[2] = max(u_xlat0.x, 1.0);
}
void join_phase3(int phaseInstanceID)
{
    u_xlat0.x = gl_TessLevelOuter[2] + gl_TessLevelOuter[2];
    u_xlat0.x = u_xlat0.x + gl_TessLevelOuter[2];
    gl_TessLevelInner[0] = u_xlat0.x * 0.333333343;
}
void main()
{
    passthrough_ctrl_points();
    barrier();
    if (gl_InvocationID == 0)
    {
        fork_phase2(0);
        join_phase3(0);
    }
}

#endif
#ifdef DOMAIN
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(ccw) in;
layout(fractional_odd_spacing) in;
layout(triangles) in;
uniform 	vec4 _Time;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _u;
uniform 	float _v;
uniform 	vec4 _Flamenoise_ST;
uniform 	float _Y_Mask;
uniform 	float _FlameHeight;
UNITY_LOCATION(2) uniform  sampler2D _FlameWave;
UNITY_LOCATION(3) uniform  sampler2D _Flamenoise;
layout(location = 0) in  vec4 hs_INTERNALTESSPOS0 [];
layout(location = 2) in  vec3 hs_NORMAL0 [];
layout(location = 3) in  vec4 hs_TEXCOORD0 [];
layout(location = 0) out vec3 ds_TEXCOORD0;
layout(location = 1) out vec3 ds_TEXCOORD1;
layout(location = 2) out vec3 ds_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = gl_TessCoord.yy * hs_TEXCOORD0[1].xy;
    u_xlat0.xy = hs_TEXCOORD0[0].xy * gl_TessCoord.xx + u_xlat0.xy;
    u_xlat0.xy = hs_TEXCOORD0[2].xy * gl_TessCoord.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _Flamenoise_ST.xy + _Flamenoise_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_u, _v) + u_xlat0.xy;
    u_xlat8 = textureLod(_FlameWave, u_xlat0.xy, 0.0).x;
    u_xlat0.x = textureLod(_Flamenoise, u_xlat0.xy, 0.0).x;
    u_xlat0.x = u_xlat0.x * u_xlat8;
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat1.xyz = gl_TessCoord.yyy * hs_NORMAL0[1].xyz;
    u_xlat1.xyz = hs_NORMAL0[0].xyz * gl_TessCoord.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hs_NORMAL0[2].xyz * gl_TessCoord.zzz + u_xlat1.xyz;
    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.x = (-u_xlat2.y) * u_xlat12 + _Y_Mask;
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = abs(u_xlat1.x) + (-_Y_Mask);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
    u_xlat2 = gl_TessCoord.yyyy * hs_INTERNALTESSPOS0[1];
    u_xlat2 = hs_INTERNALTESSPOS0[0] * gl_TessCoord.xxxx + u_xlat2;
    u_xlat2 = hs_INTERNALTESSPOS0[2] * gl_TessCoord.zzzz + u_xlat2;
    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_FlameHeight, _FlameHeight, _FlameHeight)) + u_xlat2.xyz;
    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
    u_xlat3 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    ds_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat2.www + u_xlat0.xyz;
    u_xlat0 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat0;
    ds_TEXCOORD0.xyz = u_xlat5.xyz;
    u_xlat0.x = u_xlat5.y * u_xlat5.y;
    u_xlat0.x = u_xlat5.x * u_xlat5.x + (-u_xlat0.x);
    u_xlat1 = u_xlat5.yzzx * u_xlat5.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    ds_TEXCOORD2.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 38
; Schema: 0
                               OpCapability Shader 
                        %1 = OpExtInstImport "GLSL.std.450" 
                               OpMemoryModel Logical GLSL450 
                               OpEntryPoint Vertex %4 "main" %9 %11 %13 %14 %18 %20 %22 %23 %25 %26 %28 %29 %31 %32 %34 %35 
                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                               OpDecorate %9 Location 9 
                               OpDecorate %11 Location 11 
                               OpDecorate %13 Location 13 
                               OpDecorate %14 Location 14 
                               OpDecorate %18 Location 18 
                               OpDecorate %20 Location 20 
                               OpDecorate vs_TEXCOORD0 Location 22 
                               OpDecorate %23 Location 23 
                               OpDecorate vs_TEXCOORD1 Location 25 
                               OpDecorate %26 Location 26 
                               OpDecorate vs_TEXCOORD2 Location 28 
                               OpDecorate %29 Location 29 
                               OpDecorate vs_TEXCOORD3 Location 31 
                               OpDecorate %32 Location 32 
                               OpDecorate %34 Location 34 
                               OpDecorate %35 Location 35 
                        %2 = OpTypeVoid 
                        %3 = OpTypeFunction %2 
                        %6 = OpTypeFloat 32 
                        %7 = OpTypeVector %6 4 
                        %8 = OpTypePointer Output %7 
          Output f32_4* %9 = OpVariable Output 
                       %10 = OpTypePointer Input %7 
          Input f32_4* %11 = OpVariable Input 
         Output f32_4* %13 = OpVariable Output 
          Input f32_4* %14 = OpVariable Input 
                       %16 = OpTypeVector %6 3 
                       %17 = OpTypePointer Output %16 
         Output f32_3* %18 = OpVariable Output 
                       %19 = OpTypePointer Input %16 
          Input f32_3* %20 = OpVariable Input 
Output f32_4* vs_TEXCOORD0 = OpVariable Output 
          Input f32_4* %23 = OpVariable Input 
Output f32_4* vs_TEXCOORD1 = OpVariable Output 
          Input f32_4* %26 = OpVariable Input 
Output f32_4* vs_TEXCOORD2 = OpVariable Output 
          Input f32_4* %29 = OpVariable Input 
Output f32_4* vs_TEXCOORD3 = OpVariable Output 
          Input f32_4* %32 = OpVariable Input 
         Output f32_4* %34 = OpVariable Output 
          Input f32_4* %35 = OpVariable Input 
                   void %4 = OpFunction None %3 
                        %5 = OpLabel 
                 f32_4 %12 = OpLoad %11 
                               OpStore %9 %12 
                 f32_4 %15 = OpLoad %14 
                               OpStore %13 %15 
                 f32_3 %21 = OpLoad %20 
                               OpStore %18 %21 
                 f32_4 %24 = OpLoad %23 
                               OpStore vs_TEXCOORD0 %24 
                 f32_4 %27 = OpLoad %26 
                               OpStore vs_TEXCOORD1 %27 
                 f32_4 %30 = OpLoad %29 
                               OpStore vs_TEXCOORD2 %30 
                 f32_4 %33 = OpLoad %32 
                               OpStore vs_TEXCOORD3 %33 
                 f32_4 %36 = OpLoad %35 
                               OpStore %34 %36 
                               OpReturn
                               OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 645
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %37 %129 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpMemberDecorate %15 16 Offset 15 
                                                      OpMemberDecorate %15 17 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %37 Location 37 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %287 DescriptorSet 287 
                                                      OpDecorate %287 Binding 287 
                                                      OpDecorate %291 DescriptorSet 291 
                                                      OpDecorate %291 Binding 291 
                                                      OpDecorate %442 DescriptorSet 442 
                                                      OpDecorate %442 Binding 442 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeStruct %7 %14 %14 %14 %14 %14 %14 %14 %14 %14 %14 %6 %14 %14 %6 %6 %6 %6 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32_4; f32_4; f32; f32; f32; f32;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %7 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %25 = OpVariable Private 
                               Private f32_3* %31 = OpVariable Private 
                                 Private f32* %36 = OpVariable Private 
                                 Input f32_3* %37 = OpVariable Input 
                               Private f32_3* %43 = OpVariable Private 
                                 Private f32* %51 = OpVariable Private 
                                          f32 %54 = OpConstant 3.674022E-40 
                                          i32 %59 = OpConstant 16 
                                              %60 = OpTypePointer Uniform %6 
                                          i32 %66 = OpConstant 15 
                                          i32 %71 = OpConstant 14 
                               Private f32_3* %75 = OpVariable Private 
                                          i32 %76 = OpConstant 12 
                                              %77 = OpTypePointer Uniform %14 
                                          i32 %82 = OpConstant 13 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                         f32 %100 = OpConstant 3.674022E-40 
                                       f32_3 %101 = OpConstantComposite %100 %100 %100 
                                Private f32* %103 = OpVariable Private 
                                             %104 = OpTypeInt 32 0 
                                         u32 %105 = OpConstant 1 
                                             %106 = OpTypePointer Input %6 
                                         i32 %110 = OpConstant 11 
                                             %128 = OpTypePointer Output %14 
                               Output f32_4* %129 = OpVariable Output 
                                         i32 %131 = OpConstant 17 
                                         u32 %135 = OpConstant 3 
                                             %136 = OpTypePointer Output %6 
                                             %153 = OpTypeBool 
                                             %154 = OpTypePointer Private %153 
                               Private bool* %155 = OpVariable Private 
                                         i32 %156 = OpConstant 4 
                                             %168 = OpTypePointer Private %14 
                              Private f32_4* %169 = OpVariable Private 
                              Private f32_3* %176 = OpVariable Private 
                                         i32 %179 = OpConstant 2 
                              Private f32_4* %188 = OpVariable Private 
                                         i32 %191 = OpConstant 3 
                                             %205 = OpTypeVector %153 3 
                                             %206 = OpTypePointer Private %205 
                             Private bool_3* %207 = OpVariable Private 
                                       f32_4 %208 = OpConstantComposite %96 %96 %96 %96 
                                             %211 = OpTypeVector %153 4 
                                             %214 = OpTypePointer Function %7 
                                         u32 %217 = OpConstant 0 
                                             %220 = OpTypePointer Function %6 
                                         u32 %243 = OpConstant 2 
                                             %285 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %286 = OpTypePointer UniformConstant %285 
      UniformConstant read_only TextureCube* %287 = OpVariable UniformConstant 
                                             %289 = OpTypeSampler 
                                             %290 = OpTypePointer UniformConstant %289 
                    UniformConstant sampler* %291 = OpVariable UniformConstant 
                                             %293 = OpTypeSampledImage %285 
                                         f32 %297 = OpConstant 3.674022E-40 
                                         f32 %301 = OpConstant 3.674022E-40 
                                         i32 %303 = OpConstant 5 
                               Private bool* %326 = OpVariable Private 
                                         f32 %329 = OpConstant 3.674022E-40 
                                         i32 %334 = OpConstant 8 
                              Private f32_3* %352 = OpVariable Private 
                                         i32 %355 = OpConstant 6 
                              Private f32_3* %364 = OpVariable Private 
                                         i32 %367 = OpConstant 7 
                             Private bool_3* %376 = OpVariable Private 
      UniformConstant read_only TextureCube* %442 = OpVariable UniformConstant 
                                         i32 %452 = OpConstant 9 
                                         i32 %507 = OpConstant 1 
                                         f32 %516 = OpConstant 3.674022E-40 
                              Private f32_3* %541 = OpVariable Private 
                                         f32 %549 = OpConstant 3.674022E-40 
                                         f32 %552 = OpConstant 3.674022E-40 
                                         f32 %564 = OpConstant 3.674022E-40 
                                         i32 %569 = OpConstant 10 
                                         f32 %599 = OpConstant 3.674022E-40 
                                         f32 %601 = OpConstant 3.674022E-40 
                                       f32_3 %605 = OpConstantComposite %552 %552 %552 
                                         f32 %626 = OpConstant 3.674022E-40 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %215 = OpVariable Function 
                               Function f32* %221 = OpVariable Function 
                               Function f32* %233 = OpVariable Function 
                               Function f32* %246 = OpVariable Function 
                             Function f32_3* %381 = OpVariable Function 
                               Function f32* %385 = OpVariable Function 
                               Function f32* %397 = OpVariable Function 
                               Function f32* %409 = OpVariable Function 
                                        f32_3 %12 = OpLoad %11 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %13 %22 
                                                      OpStore %9 %23 
                                        f32_3 %26 = OpLoad %9 
                                        f32_3 %27 = OpLoad %9 
                                          f32 %28 = OpDot %26 %27 
                                                      OpStore %25 %28 
                                          f32 %29 = OpLoad %25 
                                          f32 %30 = OpExtInst %1 32 %29 
                                                      OpStore %25 %30 
                                          f32 %32 = OpLoad %25 
                                        f32_3 %33 = OpCompositeConstruct %32 %32 %32 
                                        f32_3 %34 = OpLoad %9 
                                        f32_3 %35 = OpFMul %33 %34 
                                                      OpStore %31 %35 
                                        f32_3 %38 = OpLoad %37 
                                        f32_3 %39 = OpLoad %37 
                                          f32 %40 = OpDot %38 %39 
                                                      OpStore %36 %40 
                                          f32 %41 = OpLoad %36 
                                          f32 %42 = OpExtInst %1 32 %41 
                                                      OpStore %36 %42 
                                          f32 %44 = OpLoad %36 
                                        f32_3 %45 = OpCompositeConstruct %44 %44 %44 
                                        f32_3 %46 = OpLoad %37 
                                        f32_3 %47 = OpFMul %45 %46 
                                                      OpStore %43 %47 
                                        f32_3 %48 = OpLoad %43 
                                        f32_3 %49 = OpLoad %31 
                                          f32 %50 = OpDot %48 %49 
                                                      OpStore %36 %50 
                                          f32 %52 = OpLoad %36 
                                          f32 %53 = OpFNegate %52 
                                          f32 %55 = OpFAdd %53 %54 
                                                      OpStore %51 %55 
                                          f32 %56 = OpLoad %51 
                                          f32 %57 = OpExtInst %1 30 %56 
                                                      OpStore %51 %57 
                                          f32 %58 = OpLoad %51 
                                 Uniform f32* %61 = OpAccessChain %17 %59 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFMul %58 %62 
                                                      OpStore %51 %63 
                                          f32 %64 = OpLoad %51 
                                          f32 %65 = OpExtInst %1 29 %64 
                                                      OpStore %51 %65 
                                 Uniform f32* %67 = OpAccessChain %17 %66 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpLoad %51 
                                          f32 %70 = OpFMul %68 %69 
                                 Uniform f32* %72 = OpAccessChain %17 %71 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFAdd %70 %73 
                                                      OpStore %51 %74 
                               Uniform f32_4* %78 = OpAccessChain %17 %76 
                                        f32_4 %79 = OpLoad %78 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 1 2 
                                        f32_3 %81 = OpFNegate %80 
                               Uniform f32_4* %83 = OpAccessChain %17 %82 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFAdd %81 %85 
                                                      OpStore %75 %86 
                                          f32 %87 = OpLoad %51 
                                        f32_3 %88 = OpCompositeConstruct %87 %87 %87 
                                        f32_3 %89 = OpLoad %75 
                                        f32_3 %90 = OpFMul %88 %89 
                               Uniform f32_4* %91 = OpAccessChain %17 %76 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFAdd %90 %93 
                                                      OpStore %75 %94 
                                        f32_3 %95 = OpLoad %75 
                                        f32_3 %98 = OpExtInst %1 40 %95 %97 
                                                      OpStore %75 %98 
                                        f32_3 %99 = OpLoad %75 
                                       f32_3 %102 = OpExtInst %1 37 %99 %101 
                                                      OpStore %75 %102 
                                  Input f32* %107 = OpAccessChain %37 %105 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFNegate %108 
                                Uniform f32* %111 = OpAccessChain %17 %110 
                                         f32 %112 = OpLoad %111 
                                         f32 %113 = OpFAdd %109 %112 
                                                      OpStore %103 %113 
                                         f32 %114 = OpLoad %103 
                                         f32 %115 = OpExtInst %1 4 %114 
                                Uniform f32* %116 = OpAccessChain %17 %110 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                         f32 %119 = OpFAdd %115 %118 
                                                      OpStore %103 %119 
                                         f32 %120 = OpLoad %103 
                                         f32 %121 = OpExtInst %1 43 %120 %96 %54 
                                                      OpStore %103 %121 
                                         f32 %122 = OpLoad %103 
                                         f32 %123 = OpFNegate %122 
                                         f32 %124 = OpFAdd %123 %54 
                                                      OpStore %103 %124 
                                         f32 %125 = OpLoad %51 
                                         f32 %126 = OpLoad %103 
                                         f32 %127 = OpFMul %125 %126 
                                                      OpStore %51 %127 
                                         f32 %130 = OpLoad %51 
                                Uniform f32* %132 = OpAccessChain %17 %131 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFMul %130 %133 
                                 Output f32* %137 = OpAccessChain %129 %135 
                                                      OpStore %137 %134 
                                       f32_3 %138 = OpLoad %31 
                                       f32_3 %139 = OpFNegate %138 
                                       f32_3 %140 = OpLoad %37 
                                         f32 %141 = OpDot %139 %140 
                                                      OpStore %51 %141 
                                         f32 %142 = OpLoad %51 
                                         f32 %143 = OpLoad %51 
                                         f32 %144 = OpFAdd %142 %143 
                                                      OpStore %51 %144 
                                       f32_3 %145 = OpLoad %37 
                                         f32 %146 = OpLoad %51 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_3 %148 = OpFNegate %147 
                                       f32_3 %149 = OpFMul %145 %148 
                                       f32_3 %150 = OpLoad %31 
                                       f32_3 %151 = OpFNegate %150 
                                       f32_3 %152 = OpFAdd %149 %151 
                                                      OpStore %31 %152 
                                Uniform f32* %157 = OpAccessChain %17 %156 %135 
                                         f32 %158 = OpLoad %157 
                                        bool %159 = OpFOrdLessThan %96 %158 
                                                      OpStore %155 %159 
                                        bool %160 = OpLoad %155 
                                                      OpSelectionMerge %162 None 
                                                      OpBranchConditional %160 %161 %281 
                                             %161 = OpLabel 
                                       f32_3 %163 = OpLoad %31 
                                       f32_3 %164 = OpLoad %31 
                                         f32 %165 = OpDot %163 %164 
                                                      OpStore %51 %165 
                                         f32 %166 = OpLoad %51 
                                         f32 %167 = OpExtInst %1 32 %166 
                                                      OpStore %51 %167 
                                       f32_3 %170 = OpLoad %31 
                                         f32 %171 = OpLoad %51 
                                       f32_3 %172 = OpCompositeConstruct %171 %171 %171 
                                       f32_3 %173 = OpFMul %170 %172 
                                       f32_4 %174 = OpLoad %169 
                                       f32_4 %175 = OpVectorShuffle %174 %173 4 5 6 3 
                                                      OpStore %169 %175 
                                       f32_3 %177 = OpLoad %11 
                                       f32_3 %178 = OpFNegate %177 
                              Uniform f32_4* %180 = OpAccessChain %17 %179 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFAdd %178 %182 
                                                      OpStore %176 %183 
                                       f32_3 %184 = OpLoad %176 
                                       f32_4 %185 = OpLoad %169 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFDiv %184 %186 
                                                      OpStore %176 %187 
                                       f32_3 %189 = OpLoad %11 
                                       f32_3 %190 = OpFNegate %189 
                              Uniform f32_4* %192 = OpAccessChain %17 %191 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %195 = OpFAdd %190 %194 
                                       f32_4 %196 = OpLoad %188 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
                                                      OpStore %188 %197 
                                       f32_4 %198 = OpLoad %188 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_4 %200 = OpLoad %169 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFDiv %199 %201 
                                       f32_4 %203 = OpLoad %188 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 6 3 
                                                      OpStore %188 %204 
                                       f32_4 %209 = OpLoad %169 
                                       f32_4 %210 = OpVectorShuffle %209 %209 0 1 2 0 
                                      bool_4 %212 = OpFOrdLessThan %208 %210 
                                      bool_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                                      OpStore %207 %213 
                                       f32_3 %216 = OpLoad %176 
                                                      OpStore %215 %216 
                               Private bool* %218 = OpAccessChain %207 %217 
                                        bool %219 = OpLoad %218 
                                                      OpSelectionMerge %223 None 
                                                      OpBranchConditional %219 %222 %226 
                                             %222 = OpLabel 
                                Private f32* %224 = OpAccessChain %176 %217 
                                         f32 %225 = OpLoad %224 
                                                      OpStore %221 %225 
                                                      OpBranch %223 
                                             %226 = OpLabel 
                                Private f32* %227 = OpAccessChain %188 %217 
                                         f32 %228 = OpLoad %227 
                                                      OpStore %221 %228 
                                                      OpBranch %223 
                                             %223 = OpLabel 
                                         f32 %229 = OpLoad %221 
                               Function f32* %230 = OpAccessChain %215 %217 
                                                      OpStore %230 %229 
                               Private bool* %231 = OpAccessChain %207 %105 
                                        bool %232 = OpLoad %231 
                                                      OpSelectionMerge %235 None 
                                                      OpBranchConditional %232 %234 %238 
                                             %234 = OpLabel 
                                Private f32* %236 = OpAccessChain %176 %105 
                                         f32 %237 = OpLoad %236 
                                                      OpStore %233 %237 
                                                      OpBranch %235 
                                             %238 = OpLabel 
                                Private f32* %239 = OpAccessChain %188 %105 
                                         f32 %240 = OpLoad %239 
                                                      OpStore %233 %240 
                                                      OpBranch %235 
                                             %235 = OpLabel 
                                         f32 %241 = OpLoad %233 
                               Function f32* %242 = OpAccessChain %215 %105 
                                                      OpStore %242 %241 
                               Private bool* %244 = OpAccessChain %207 %243 
                                        bool %245 = OpLoad %244 
                                                      OpSelectionMerge %248 None 
                                                      OpBranchConditional %245 %247 %251 
                                             %247 = OpLabel 
                                Private f32* %249 = OpAccessChain %176 %243 
                                         f32 %250 = OpLoad %249 
                                                      OpStore %246 %250 
                                                      OpBranch %248 
                                             %251 = OpLabel 
                                Private f32* %252 = OpAccessChain %188 %243 
                                         f32 %253 = OpLoad %252 
                                                      OpStore %246 %253 
                                                      OpBranch %248 
                                             %248 = OpLabel 
                                         f32 %254 = OpLoad %246 
                               Function f32* %255 = OpAccessChain %215 %243 
                                                      OpStore %255 %254 
                                       f32_3 %256 = OpLoad %215 
                                                      OpStore %176 %256 
                                Private f32* %257 = OpAccessChain %176 %105 
                                         f32 %258 = OpLoad %257 
                                Private f32* %259 = OpAccessChain %176 %217 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpExtInst %1 37 %258 %260 
                                                      OpStore %51 %261 
                                Private f32* %262 = OpAccessChain %176 %243 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpLoad %51 
                                         f32 %265 = OpExtInst %1 37 %263 %264 
                                                      OpStore %51 %265 
                                       f32_3 %266 = OpLoad %11 
                              Uniform f32_4* %267 = OpAccessChain %17 %156 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFNegate %269 
                                       f32_3 %271 = OpFAdd %266 %270 
                                                      OpStore %176 %271 
                                       f32_4 %272 = OpLoad %169 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                         f32 %274 = OpLoad %51 
                                       f32_3 %275 = OpCompositeConstruct %274 %274 %274 
                                       f32_3 %276 = OpFMul %273 %275 
                                       f32_3 %277 = OpLoad %176 
                                       f32_3 %278 = OpFAdd %276 %277 
                                       f32_4 %279 = OpLoad %169 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %169 %280 
                                                      OpBranch %162 
                                             %281 = OpLabel 
                                       f32_3 %282 = OpLoad %31 
                                       f32_4 %283 = OpLoad %169 
                                       f32_4 %284 = OpVectorShuffle %283 %282 4 5 6 3 
                                                      OpStore %169 %284 
                                                      OpBranch %162 
                                             %162 = OpLabel 
                       read_only TextureCube %288 = OpLoad %287 
                                     sampler %292 = OpLoad %291 
                read_only TextureCubeSampled %294 = OpSampledImage %288 %292 
                                       f32_4 %295 = OpLoad %169 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_4 %298 = OpImageSampleExplicitLod %294 %296 Lod %14 
                                                      OpStore %169 %298 
                                Private f32* %299 = OpAccessChain %169 %135 
                                         f32 %300 = OpLoad %299 
                                         f32 %302 = OpFAdd %300 %301 
                                                      OpStore %51 %302 
                                Uniform f32* %304 = OpAccessChain %17 %303 %135 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpLoad %51 
                                         f32 %307 = OpFMul %305 %306 
                                         f32 %308 = OpFAdd %307 %54 
                                                      OpStore %51 %308 
                                         f32 %309 = OpLoad %51 
                                         f32 %310 = OpExtInst %1 30 %309 
                                                      OpStore %51 %310 
                                         f32 %311 = OpLoad %51 
                                Uniform f32* %312 = OpAccessChain %17 %303 %105 
                                         f32 %313 = OpLoad %312 
                                         f32 %314 = OpFMul %311 %313 
                                                      OpStore %51 %314 
                                         f32 %315 = OpLoad %51 
                                         f32 %316 = OpExtInst %1 29 %315 
                                                      OpStore %51 %316 
                                         f32 %317 = OpLoad %51 
                                Uniform f32* %318 = OpAccessChain %17 %303 %217 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFMul %317 %319 
                                                      OpStore %51 %320 
                                       f32_4 %321 = OpLoad %169 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                         f32 %323 = OpLoad %51 
                                       f32_3 %324 = OpCompositeConstruct %323 %323 %323 
                                       f32_3 %325 = OpFMul %322 %324 
                                                      OpStore %176 %325 
                                Uniform f32* %327 = OpAccessChain %17 %191 %135 
                                         f32 %328 = OpLoad %327 
                                        bool %330 = OpFOrdLessThan %328 %329 
                                                      OpStore %326 %330 
                                        bool %331 = OpLoad %326 
                                                      OpSelectionMerge %333 None 
                                                      OpBranchConditional %331 %332 %333 
                                             %332 = OpLabel 
                                Uniform f32* %335 = OpAccessChain %17 %334 %135 
                                         f32 %336 = OpLoad %335 
                                        bool %337 = OpFOrdLessThan %96 %336 
                                                      OpStore %326 %337 
                                        bool %338 = OpLoad %326 
                                                      OpSelectionMerge %340 None 
                                                      OpBranchConditional %338 %339 %340 
                                             %339 = OpLabel 
                                       f32_3 %341 = OpLoad %31 
                                       f32_3 %342 = OpLoad %31 
                                         f32 %343 = OpDot %341 %342 
                                                      OpStore %103 %343 
                                         f32 %344 = OpLoad %103 
                                         f32 %345 = OpExtInst %1 32 %344 
                                                      OpStore %103 %345 
                                       f32_3 %346 = OpLoad %31 
                                         f32 %347 = OpLoad %103 
                                       f32_3 %348 = OpCompositeConstruct %347 %347 %347 
                                       f32_3 %349 = OpFMul %346 %348 
                                       f32_4 %350 = OpLoad %188 
                                       f32_4 %351 = OpVectorShuffle %350 %349 4 5 6 3 
                                                      OpStore %188 %351 
                                       f32_3 %353 = OpLoad %11 
                                       f32_3 %354 = OpFNegate %353 
                              Uniform f32_4* %356 = OpAccessChain %17 %355 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_3 %359 = OpFAdd %354 %358 
                                                      OpStore %352 %359 
                                       f32_3 %360 = OpLoad %352 
                                       f32_4 %361 = OpLoad %188 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                       f32_3 %363 = OpFDiv %360 %362 
                                                      OpStore %352 %363 
                                       f32_3 %365 = OpLoad %11 
                                       f32_3 %366 = OpFNegate %365 
                              Uniform f32_4* %368 = OpAccessChain %17 %367 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_3 %371 = OpFAdd %366 %370 
                                                      OpStore %364 %371 
                                       f32_3 %372 = OpLoad %364 
                                       f32_4 %373 = OpLoad %188 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFDiv %372 %374 
                                                      OpStore %364 %375 
                                       f32_4 %377 = OpLoad %188 
                                       f32_4 %378 = OpVectorShuffle %377 %377 0 1 2 0 
                                      bool_4 %379 = OpFOrdLessThan %208 %378 
                                      bool_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                                      OpStore %376 %380 
                                       f32_3 %382 = OpLoad %352 
                                                      OpStore %381 %382 
                               Private bool* %383 = OpAccessChain %376 %217 
                                        bool %384 = OpLoad %383 
                                                      OpSelectionMerge %387 None 
                                                      OpBranchConditional %384 %386 %390 
                                             %386 = OpLabel 
                                Private f32* %388 = OpAccessChain %352 %217 
                                         f32 %389 = OpLoad %388 
                                                      OpStore %385 %389 
                                                      OpBranch %387 
                                             %390 = OpLabel 
                                Private f32* %391 = OpAccessChain %364 %217 
                                         f32 %392 = OpLoad %391 
                                                      OpStore %385 %392 
                                                      OpBranch %387 
                                             %387 = OpLabel 
                                         f32 %393 = OpLoad %385 
                               Function f32* %394 = OpAccessChain %381 %217 
                                                      OpStore %394 %393 
                               Private bool* %395 = OpAccessChain %376 %105 
                                        bool %396 = OpLoad %395 
                                                      OpSelectionMerge %399 None 
                                                      OpBranchConditional %396 %398 %402 
                                             %398 = OpLabel 
                                Private f32* %400 = OpAccessChain %352 %105 
                                         f32 %401 = OpLoad %400 
                                                      OpStore %397 %401 
                                                      OpBranch %399 
                                             %402 = OpLabel 
                                Private f32* %403 = OpAccessChain %364 %105 
                                         f32 %404 = OpLoad %403 
                                                      OpStore %397 %404 
                                                      OpBranch %399 
                                             %399 = OpLabel 
                                         f32 %405 = OpLoad %397 
                               Function f32* %406 = OpAccessChain %381 %105 
                                                      OpStore %406 %405 
                               Private bool* %407 = OpAccessChain %376 %243 
                                        bool %408 = OpLoad %407 
                                                      OpSelectionMerge %411 None 
                                                      OpBranchConditional %408 %410 %414 
                                             %410 = OpLabel 
                                Private f32* %412 = OpAccessChain %352 %243 
                                         f32 %413 = OpLoad %412 
                                                      OpStore %409 %413 
                                                      OpBranch %411 
                                             %414 = OpLabel 
                                Private f32* %415 = OpAccessChain %364 %243 
                                         f32 %416 = OpLoad %415 
                                                      OpStore %409 %416 
                                                      OpBranch %411 
                                             %411 = OpLabel 
                                         f32 %417 = OpLoad %409 
                               Function f32* %418 = OpAccessChain %381 %243 
                                                      OpStore %418 %417 
                                       f32_3 %419 = OpLoad %381 
                                                      OpStore %352 %419 
                                Private f32* %420 = OpAccessChain %352 %105 
                                         f32 %421 = OpLoad %420 
                                Private f32* %422 = OpAccessChain %352 %217 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpExtInst %1 37 %421 %423 
                                                      OpStore %103 %424 
                                Private f32* %425 = OpAccessChain %352 %243 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpLoad %103 
                                         f32 %428 = OpExtInst %1 37 %426 %427 
                                                      OpStore %103 %428 
                                       f32_3 %429 = OpLoad %11 
                              Uniform f32_4* %430 = OpAccessChain %17 %334 
                                       f32_4 %431 = OpLoad %430 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                       f32_3 %433 = OpFNegate %432 
                                       f32_3 %434 = OpFAdd %429 %433 
                                                      OpStore %352 %434 
                                       f32_4 %435 = OpLoad %188 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
                                         f32 %437 = OpLoad %103 
                                       f32_3 %438 = OpCompositeConstruct %437 %437 %437 
                                       f32_3 %439 = OpFMul %436 %438 
                                       f32_3 %440 = OpLoad %352 
                                       f32_3 %441 = OpFAdd %439 %440 
                                                      OpStore %31 %441 
                                                      OpBranch %340 
                                             %340 = OpLabel 
                       read_only TextureCube %443 = OpLoad %442 
                                     sampler %444 = OpLoad %291 
                read_only TextureCubeSampled %445 = OpSampledImage %443 %444 
                                       f32_3 %446 = OpLoad %31 
                                       f32_4 %447 = OpImageSampleExplicitLod %445 %446 Lod %14 
                                                      OpStore %188 %447 
                                Private f32* %448 = OpAccessChain %188 %135 
                                         f32 %449 = OpLoad %448 
                                         f32 %450 = OpFAdd %449 %301 
                                Private f32* %451 = OpAccessChain %31 %217 
                                                      OpStore %451 %450 
                                Uniform f32* %453 = OpAccessChain %17 %452 %135 
                                         f32 %454 = OpLoad %453 
                                Private f32* %455 = OpAccessChain %31 %217 
                                         f32 %456 = OpLoad %455 
                                         f32 %457 = OpFMul %454 %456 
                                         f32 %458 = OpFAdd %457 %54 
                                Private f32* %459 = OpAccessChain %31 %217 
                                                      OpStore %459 %458 
                                Private f32* %460 = OpAccessChain %31 %217 
                                         f32 %461 = OpLoad %460 
                                         f32 %462 = OpExtInst %1 30 %461 
                                Private f32* %463 = OpAccessChain %31 %217 
                                                      OpStore %463 %462 
                                Private f32* %464 = OpAccessChain %31 %217 
                                         f32 %465 = OpLoad %464 
                                Uniform f32* %466 = OpAccessChain %17 %452 %105 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFMul %465 %467 
                                Private f32* %469 = OpAccessChain %31 %217 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %31 %217 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpExtInst %1 29 %471 
                                Private f32* %473 = OpAccessChain %31 %217 
                                                      OpStore %473 %472 
                                Private f32* %474 = OpAccessChain %31 %217 
                                         f32 %475 = OpLoad %474 
                                Uniform f32* %476 = OpAccessChain %17 %452 %217 
                                         f32 %477 = OpLoad %476 
                                         f32 %478 = OpFMul %475 %477 
                                Private f32* %479 = OpAccessChain %31 %217 
                                                      OpStore %479 %478 
                                       f32_4 %480 = OpLoad %188 
                                       f32_3 %481 = OpVectorShuffle %480 %480 0 1 2 
                                       f32_3 %482 = OpLoad %31 
                                       f32_3 %483 = OpVectorShuffle %482 %482 0 0 0 
                                       f32_3 %484 = OpFMul %481 %483 
                                                      OpStore %31 %484 
                                         f32 %485 = OpLoad %51 
                                       f32_3 %486 = OpCompositeConstruct %485 %485 %485 
                                       f32_4 %487 = OpLoad %169 
                                       f32_3 %488 = OpVectorShuffle %487 %487 0 1 2 
                                       f32_3 %489 = OpFMul %486 %488 
                                       f32_3 %490 = OpLoad %31 
                                       f32_3 %491 = OpFNegate %490 
                                       f32_3 %492 = OpFAdd %489 %491 
                                       f32_4 %493 = OpLoad %169 
                                       f32_4 %494 = OpVectorShuffle %493 %492 4 5 6 3 
                                                      OpStore %169 %494 
                              Uniform f32_4* %495 = OpAccessChain %17 %191 
                                       f32_4 %496 = OpLoad %495 
                                       f32_3 %497 = OpVectorShuffle %496 %496 3 3 3 
                                       f32_4 %498 = OpLoad %169 
                                       f32_3 %499 = OpVectorShuffle %498 %498 0 1 2 
                                       f32_3 %500 = OpFMul %497 %499 
                                       f32_3 %501 = OpLoad %31 
                                       f32_3 %502 = OpFAdd %500 %501 
                                                      OpStore %176 %502 
                                                      OpBranch %333 
                                             %333 = OpLabel 
                                       f32_3 %503 = OpLoad %9 
                                         f32 %504 = OpLoad %25 
                                       f32_3 %505 = OpCompositeConstruct %504 %504 %504 
                                       f32_3 %506 = OpFMul %503 %505 
                              Uniform f32_4* %508 = OpAccessChain %17 %507 
                                       f32_4 %509 = OpLoad %508 
                                       f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
                                       f32_3 %511 = OpFAdd %506 %510 
                                                      OpStore %9 %511 
                                       f32_3 %512 = OpLoad %9 
                                       f32_3 %513 = OpLoad %9 
                                         f32 %514 = OpDot %512 %513 
                                                      OpStore %25 %514 
                                         f32 %515 = OpLoad %25 
                                         f32 %517 = OpExtInst %1 40 %515 %516 
                                                      OpStore %25 %517 
                                         f32 %518 = OpLoad %25 
                                         f32 %519 = OpExtInst %1 32 %518 
                                                      OpStore %25 %519 
                                         f32 %520 = OpLoad %25 
                                       f32_3 %521 = OpCompositeConstruct %520 %520 %520 
                                       f32_3 %522 = OpLoad %9 
                                       f32_3 %523 = OpFMul %521 %522 
                                                      OpStore %9 %523 
                                       f32_3 %524 = OpLoad %43 
                              Uniform f32_4* %525 = OpAccessChain %17 %507 
                                       f32_4 %526 = OpLoad %525 
                                       f32_3 %527 = OpVectorShuffle %526 %526 0 1 2 
                                         f32 %528 = OpDot %524 %527 
                                                      OpStore %25 %528 
                                         f32 %529 = OpLoad %25 
                                         f32 %530 = OpExtInst %1 43 %529 %96 %54 
                                                      OpStore %25 %530 
                              Uniform f32_4* %531 = OpAccessChain %17 %507 
                                       f32_4 %532 = OpLoad %531 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
                                       f32_3 %534 = OpLoad %9 
                                         f32 %535 = OpDot %533 %534 
                                Private f32* %536 = OpAccessChain %9 %217 
                                                      OpStore %536 %535 
                                Private f32* %537 = OpAccessChain %9 %217 
                                         f32 %538 = OpLoad %537 
                                         f32 %539 = OpExtInst %1 43 %538 %96 %54 
                                Private f32* %540 = OpAccessChain %9 %217 
                                                      OpStore %540 %539 
                                         f32 %542 = OpLoad %36 
                                         f32 %543 = OpExtInst %1 4 %542 
                                         f32 %544 = OpLoad %25 
                                         f32 %545 = OpFAdd %543 %544 
                                Private f32* %546 = OpAccessChain %541 %217 
                                                      OpStore %546 %545 
                                Private f32* %547 = OpAccessChain %541 %217 
                                         f32 %548 = OpLoad %547 
                                         f32 %550 = OpFAdd %548 %549 
                                Private f32* %551 = OpAccessChain %541 %217 
                                                      OpStore %551 %550 
                                Private f32* %553 = OpAccessChain %541 %217 
                                         f32 %554 = OpLoad %553 
                                         f32 %555 = OpFDiv %552 %554 
                                Private f32* %556 = OpAccessChain %541 %217 
                                                      OpStore %556 %555 
                                         f32 %557 = OpLoad %25 
                                Private f32* %558 = OpAccessChain %541 %217 
                                         f32 %559 = OpLoad %558 
                                         f32 %560 = OpFMul %557 %559 
                                Private f32* %561 = OpAccessChain %541 %217 
                                                      OpStore %561 %560 
                                Private f32* %562 = OpAccessChain %541 %217 
                                         f32 %563 = OpLoad %562 
                                         f32 %565 = OpFMul %563 %564 
                                Private f32* %566 = OpAccessChain %541 %217 
                                                      OpStore %566 %565 
                                       f32_3 %567 = OpLoad %541 
                                       f32_3 %568 = OpVectorShuffle %567 %567 0 0 0 
                              Uniform f32_4* %570 = OpAccessChain %17 %569 
                                       f32_4 %571 = OpLoad %570 
                                       f32_3 %572 = OpVectorShuffle %571 %571 0 1 2 
                                       f32_3 %573 = OpFMul %568 %572 
                                                      OpStore %541 %573 
                                Private f32* %574 = OpAccessChain %9 %217 
                                         f32 %575 = OpLoad %574 
                                         f32 %576 = OpFNegate %575 
                                         f32 %577 = OpFAdd %576 %54 
                                Private f32* %578 = OpAccessChain %9 %217 
                                                      OpStore %578 %577 
                                Private f32* %579 = OpAccessChain %9 %217 
                                         f32 %580 = OpLoad %579 
                                Private f32* %581 = OpAccessChain %9 %217 
                                         f32 %582 = OpLoad %581 
                                         f32 %583 = OpFMul %580 %582 
                                Private f32* %584 = OpAccessChain %31 %217 
                                                      OpStore %584 %583 
                                Private f32* %585 = OpAccessChain %31 %217 
                                         f32 %586 = OpLoad %585 
                                Private f32* %587 = OpAccessChain %31 %217 
                                         f32 %588 = OpLoad %587 
                                         f32 %589 = OpFMul %586 %588 
                                Private f32* %590 = OpAccessChain %31 %217 
                                                      OpStore %590 %589 
                                Private f32* %591 = OpAccessChain %9 %217 
                                         f32 %592 = OpLoad %591 
                                Private f32* %593 = OpAccessChain %31 %217 
                                         f32 %594 = OpLoad %593 
                                         f32 %595 = OpFMul %592 %594 
                                Private f32* %596 = OpAccessChain %9 %217 
                                                      OpStore %596 %595 
                                Private f32* %597 = OpAccessChain %9 %217 
                                         f32 %598 = OpLoad %597 
                                         f32 %600 = OpFMul %598 %599 
                                         f32 %602 = OpFAdd %600 %601 
                                Private f32* %603 = OpAccessChain %9 %217 
                                                      OpStore %603 %602 
                                       f32_3 %604 = OpLoad %176 
                                       f32_3 %606 = OpFMul %604 %605 
                                                      OpStore %31 %606 
                                         f32 %607 = OpLoad %36 
                                         f32 %608 = OpExtInst %1 4 %607 
                                         f32 %609 = OpFNegate %608 
                                         f32 %610 = OpFAdd %609 %54 
                                                      OpStore %36 %610 
                                         f32 %611 = OpLoad %36 
                                         f32 %612 = OpLoad %36 
                                         f32 %613 = OpFMul %611 %612 
                                Private f32* %614 = OpAccessChain %43 %217 
                                                      OpStore %614 %613 
                                Private f32* %615 = OpAccessChain %43 %217 
                                         f32 %616 = OpLoad %615 
                                Private f32* %617 = OpAccessChain %43 %217 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                Private f32* %620 = OpAccessChain %43 %217 
                                                      OpStore %620 %619 
                                         f32 %621 = OpLoad %36 
                                Private f32* %622 = OpAccessChain %43 %217 
                                         f32 %623 = OpLoad %622 
                                         f32 %624 = OpFMul %621 %623 
                                                      OpStore %36 %624 
                                         f32 %625 = OpLoad %36 
                                         f32 %627 = OpFMul %625 %626 
                                         f32 %628 = OpFAdd %627 %601 
                                                      OpStore %36 %628 
                                         f32 %629 = OpLoad %36 
                                       f32_3 %630 = OpCompositeConstruct %629 %629 %629 
                                       f32_3 %631 = OpLoad %31 
                                       f32_3 %632 = OpFMul %630 %631 
                                                      OpStore %31 %632 
                                       f32_3 %633 = OpLoad %541 
                                       f32_3 %634 = OpLoad %9 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 0 0 
                                       f32_3 %636 = OpFMul %633 %635 
                                       f32_3 %637 = OpLoad %31 
                                       f32_3 %638 = OpFAdd %636 %637 
                                                      OpStore %9 %638 
                                       f32_3 %639 = OpLoad %75 
                                       f32_3 %640 = OpLoad %9 
                                       f32_3 %641 = OpFAdd %639 %640 
                                       f32_4 %642 = OpLoad %129 
                                       f32_4 %643 = OpVectorShuffle %642 %641 4 5 6 3 
                                                      OpStore %129 %643 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 387
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationControl %4 "main" %23 %25 %30 %37 %39 %47 %51 %58 %60 %65 %67 %72 %74 %79 %81 %86 %88 %219 %371 
                                                      OpExecutionMode %4 OutputVertices 4 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %25 BuiltIn WorkgroupSize 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %37 Location 37 
                                                      OpDecorate %39 Location 39 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %51 Location 51 
                                                      OpDecorate %58 Location 58 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate %65 Location 65 
                                                      OpDecorate vs_TEXCOORD1 Location 67 
                                                      OpDecorate %72 Location 72 
                                                      OpDecorate vs_TEXCOORD2 Location 74 
                                                      OpDecorate %79 Location 79 
                                                      OpDecorate vs_TEXCOORD3 Location 81 
                                                      OpDecorate %86 Location 86 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %96 ArrayStride 96 
                                                      OpMemberDecorate %97 0 Offset 97 
                                                      OpMemberDecorate %97 1 Offset 97 
                                                      OpMemberDecorate %97 2 Offset 97 
                                                      OpMemberDecorate %97 3 Offset 97 
                                                      OpDecorate %97 Block 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate %219 Patch 
                                                      OpDecorate %219 BuiltIn 219 
                                                      OpDecorate %371 Patch 
                                                      OpDecorate %371 BuiltIn 371 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %8 = OpTypeInt 32 1 
                                               %9 = OpTypePointer Function %8 
                                              %10 = OpTypeFunction %2 %9 
                                              %17 = OpTypeFloat 32 
                                              %18 = OpTypeVector %17 4 
                                              %19 = OpTypeInt 32 0 
                                          u32 %20 = OpConstant 3 
                                              %21 = OpTypeArray %18 %20 
                                              %22 = OpTypePointer Output %21 
                             Output f32_4[3]* %23 = OpVariable Output 
                                              %24 = OpTypePointer Input %8 
                                   Input i32* %25 = OpVariable Input 
                                          u32 %27 = OpConstant 32 
                                              %28 = OpTypeArray %18 %27 
                                              %29 = OpTypePointer Input %28 
                             Input f32_4[32]* %30 = OpVariable Input 
                                              %32 = OpTypePointer Input %18 
                                              %35 = OpTypePointer Output %18 
                             Output f32_4[3]* %37 = OpVariable Output 
                             Input f32_4[32]* %39 = OpVariable Input 
                                              %44 = OpTypeVector %17 3 
                                              %45 = OpTypeArray %44 %20 
                                              %46 = OpTypePointer Output %45 
                             Output f32_3[3]* %47 = OpVariable Output 
                                              %49 = OpTypeArray %44 %27 
                                              %50 = OpTypePointer Input %49 
                             Input f32_3[32]* %51 = OpVariable Input 
                                              %53 = OpTypePointer Input %44 
                                              %56 = OpTypePointer Output %44 
                             Output f32_4[3]* %58 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD0 = OpVariable Input 
                             Output f32_4[3]* %65 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD1 = OpVariable Input 
                             Output f32_4[3]* %72 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD2 = OpVariable Input 
                             Output f32_4[3]* %79 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD3 = OpVariable Input 
                             Output f32_4[3]* %86 = OpVariable Output 
                             Input f32_4[32]* %88 = OpVariable Input 
                                              %93 = OpTypePointer Private %44 
                               Private f32_3* %94 = OpVariable Private 
                                          u32 %95 = OpConstant 4 
                                              %96 = OpTypeArray %18 %95 
                                              %97 = OpTypeStruct %44 %18 %96 %17 
                                              %98 = OpTypePointer Uniform %97 
Uniform struct {f32_3; f32_4; f32_4[4]; f32;}* %99 = OpVariable Uniform 
                                         i32 %100 = OpConstant 2 
                                         i32 %101 = OpConstant 1 
                                             %102 = OpTypePointer Uniform %18 
                                         i32 %110 = OpConstant 0 
                                         i32 %129 = OpConstant 3 
                              Private f32_3* %139 = OpVariable Private 
                              Private f32_3* %174 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                             %182 = OpTypePointer Uniform %44 
                                             %187 = OpTypePointer Private %17 
                                Private f32* %188 = OpVariable Private 
                                             %195 = OpTypePointer Uniform %17 
                                Private f32* %203 = OpVariable Private 
                                         u32 %210 = OpConstant 1 
                                             %217 = OpTypeArray %17 %95 
                                             %218 = OpTypePointer Output %217 
                              Output f32[4]* %219 = OpVariable Output 
                                         f32 %221 = OpConstant 3.674022E-40 
                                             %223 = OpTypePointer Output %17 
                              Private f32_3* %259 = OpVariable Private 
                                         u32 %285 = OpConstant 0 
                              Private f32_3* %325 = OpVariable Private 
                                         u32 %368 = OpConstant 2 
                                             %369 = OpTypeArray %17 %368 
                                             %370 = OpTypePointer Output %369 
                              Output f32[2]* %371 = OpVariable Output 
                                         f32 %374 = OpConstant 3.674022E-40 
                                             %379 = OpTypeBool 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %383 = OpVariable Function 
                               Function i32* %385 = OpVariable Function 
                                        void %377 = OpFunctionCall %6 
                                                      OpControlBarrier 368 95 285 
                                         i32 %378 = OpLoad %25 
                                        bool %380 = OpIEqual %378 %110 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %380 %381 %382 
                                             %381 = OpLabel 
                                                      OpStore %383 %110 
                                        void %384 = OpFunctionCall %12 %383 
                                                      OpStore %385 %110 
                                        void %386 = OpFunctionCall %15 %385 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
                                          void %6 = OpFunction None %3 
                                               %7 = OpLabel 
                                          i32 %26 = OpLoad %25 
                                          i32 %31 = OpLoad %25 
                                 Input f32_4* %33 = OpAccessChain %30 %31 
                                        f32_4 %34 = OpLoad %33 
                                Output f32_4* %36 = OpAccessChain %23 %26 
                                                      OpStore %36 %34 
                                          i32 %38 = OpLoad %25 
                                          i32 %40 = OpLoad %25 
                                 Input f32_4* %41 = OpAccessChain %39 %40 
                                        f32_4 %42 = OpLoad %41 
                                Output f32_4* %43 = OpAccessChain %37 %38 
                                                      OpStore %43 %42 
                                          i32 %48 = OpLoad %25 
                                          i32 %52 = OpLoad %25 
                                 Input f32_3* %54 = OpAccessChain %51 %52 
                                        f32_3 %55 = OpLoad %54 
                                Output f32_3* %57 = OpAccessChain %47 %48 
                                                      OpStore %57 %55 
                                          i32 %59 = OpLoad %25 
                                          i32 %61 = OpLoad %25 
                                 Input f32_4* %62 = OpAccessChain vs_TEXCOORD0 %61 
                                        f32_4 %63 = OpLoad %62 
                                Output f32_4* %64 = OpAccessChain %58 %59 
                                                      OpStore %64 %63 
                                          i32 %66 = OpLoad %25 
                                          i32 %68 = OpLoad %25 
                                 Input f32_4* %69 = OpAccessChain vs_TEXCOORD1 %68 
                                        f32_4 %70 = OpLoad %69 
                                Output f32_4* %71 = OpAccessChain %65 %66 
                                                      OpStore %71 %70 
                                          i32 %73 = OpLoad %25 
                                          i32 %75 = OpLoad %25 
                                 Input f32_4* %76 = OpAccessChain vs_TEXCOORD2 %75 
                                        f32_4 %77 = OpLoad %76 
                                Output f32_4* %78 = OpAccessChain %72 %73 
                                                      OpStore %78 %77 
                                          i32 %80 = OpLoad %25 
                                          i32 %82 = OpLoad %25 
                                 Input f32_4* %83 = OpAccessChain vs_TEXCOORD3 %82 
                                        f32_4 %84 = OpLoad %83 
                                Output f32_4* %85 = OpAccessChain %79 %80 
                                                      OpStore %85 %84 
                                          i32 %87 = OpLoad %25 
                                          i32 %89 = OpLoad %25 
                                 Input f32_4* %90 = OpAccessChain %88 %89 
                                        f32_4 %91 = OpLoad %90 
                                Output f32_4* %92 = OpAccessChain %86 %87 
                                                      OpStore %92 %91 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %12 = OpFunction None %10 
                                Function i32* %11 = OpFunctionParameter 
                                              %13 = OpLabel 
                              Uniform f32_4* %103 = OpAccessChain %99 %100 %101 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                Input f32_4* %106 = OpAccessChain %30 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 1 1 1 
                                       f32_3 %109 = OpFMul %105 %108 
                                                      OpStore %94 %109 
                              Uniform f32_4* %111 = OpAccessChain %99 %100 %110 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                Input f32_4* %114 = OpAccessChain %30 %101 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %113 %116 
                                       f32_3 %118 = OpLoad %94 
                                       f32_3 %119 = OpFAdd %117 %118 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %99 %100 %100 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                Input f32_4* %123 = OpAccessChain %30 %101 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 2 2 2 
                                       f32_3 %126 = OpFMul %122 %125 
                                       f32_3 %127 = OpLoad %94 
                                       f32_3 %128 = OpFAdd %126 %127 
                                                      OpStore %94 %128 
                              Uniform f32_4* %130 = OpAccessChain %99 %100 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                Input f32_4* %133 = OpAccessChain %30 %101 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 3 3 3 
                                       f32_3 %136 = OpFMul %132 %135 
                                       f32_3 %137 = OpLoad %94 
                                       f32_3 %138 = OpFAdd %136 %137 
                                                      OpStore %94 %138 
                              Uniform f32_4* %140 = OpAccessChain %99 %100 %101 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                Input f32_4* %143 = OpAccessChain %30 %100 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 1 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                                      OpStore %139 %146 
                              Uniform f32_4* %147 = OpAccessChain %99 %100 %110 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                Input f32_4* %150 = OpAccessChain %30 %100 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 0 0 
                                       f32_3 %153 = OpFMul %149 %152 
                                       f32_3 %154 = OpLoad %139 
                                       f32_3 %155 = OpFAdd %153 %154 
                                                      OpStore %139 %155 
                              Uniform f32_4* %156 = OpAccessChain %99 %100 %100 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                Input f32_4* %159 = OpAccessChain %30 %100 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 2 2 2 
                                       f32_3 %162 = OpFMul %158 %161 
                                       f32_3 %163 = OpLoad %139 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %139 %164 
                              Uniform f32_4* %165 = OpAccessChain %99 %100 %129 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                Input f32_4* %168 = OpAccessChain %30 %100 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 3 3 3 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_3 %172 = OpLoad %139 
                                       f32_3 %173 = OpFAdd %171 %172 
                                                      OpStore %139 %173 
                                       f32_3 %175 = OpLoad %94 
                                       f32_3 %176 = OpLoad %139 
                                       f32_3 %177 = OpFAdd %175 %176 
                                                      OpStore %174 %177 
                                       f32_3 %178 = OpLoad %174 
                                       f32_3 %181 = OpFMul %178 %180 
                              Uniform f32_3* %183 = OpAccessChain %99 %110 
                                       f32_3 %184 = OpLoad %183 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpFAdd %181 %185 
                                                      OpStore %174 %186 
                                       f32_3 %189 = OpLoad %174 
                                       f32_3 %190 = OpLoad %174 
                                         f32 %191 = OpDot %189 %190 
                                                      OpStore %188 %191 
                                         f32 %192 = OpLoad %188 
                                         f32 %193 = OpExtInst %1 31 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                Uniform f32* %196 = OpAccessChain %99 %129 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %194 %197 
                                                      OpStore %188 %198 
                                       f32_3 %199 = OpLoad %94 
                                       f32_3 %200 = OpLoad %139 
                                       f32_3 %201 = OpFNegate %200 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore %174 %202 
                                       f32_3 %204 = OpLoad %174 
                                       f32_3 %205 = OpLoad %174 
                                         f32 %206 = OpDot %204 %205 
                                                      OpStore %203 %206 
                                         f32 %207 = OpLoad %203 
                                         f32 %208 = OpExtInst %1 31 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                Uniform f32* %211 = OpAccessChain %99 %101 %210 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %209 %212 
                                                      OpStore %203 %213 
                                         f32 %214 = OpLoad %203 
                                         f32 %215 = OpLoad %188 
                                         f32 %216 = OpFDiv %214 %215 
                                                      OpStore %188 %216 
                                         f32 %220 = OpLoad %188 
                                         f32 %222 = OpExtInst %1 40 %220 %221 
                                 Output f32* %224 = OpAccessChain %219 %110 
                                                      OpStore %224 %222 
                              Uniform f32_4* %225 = OpAccessChain %99 %100 %101 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                Input f32_4* %228 = OpAccessChain %30 %110 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 1 1 1 
                                       f32_3 %231 = OpFMul %227 %230 
                                                      OpStore %174 %231 
                              Uniform f32_4* %232 = OpAccessChain %99 %100 %110 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                Input f32_4* %235 = OpAccessChain %30 %110 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 0 0 
                                       f32_3 %238 = OpFMul %234 %237 
                                       f32_3 %239 = OpLoad %174 
                                       f32_3 %240 = OpFAdd %238 %239 
                                                      OpStore %174 %240 
                              Uniform f32_4* %241 = OpAccessChain %99 %100 %100 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                Input f32_4* %244 = OpAccessChain %30 %110 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 2 2 2 
                                       f32_3 %247 = OpFMul %243 %246 
                                       f32_3 %248 = OpLoad %174 
                                       f32_3 %249 = OpFAdd %247 %248 
                                                      OpStore %174 %249 
                              Uniform f32_4* %250 = OpAccessChain %99 %100 %129 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                Input f32_4* %253 = OpAccessChain %30 %110 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 3 3 3 
                                       f32_3 %256 = OpFMul %252 %255 
                                       f32_3 %257 = OpLoad %174 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore %174 %258 
                                       f32_3 %260 = OpLoad %139 
                                       f32_3 %261 = OpLoad %174 
                                       f32_3 %262 = OpFAdd %260 %261 
                                                      OpStore %259 %262 
                                       f32_3 %263 = OpLoad %139 
                                       f32_3 %264 = OpLoad %174 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_3 %266 = OpFAdd %263 %265 
                                                      OpStore %139 %266 
                                       f32_3 %267 = OpLoad %139 
                                       f32_3 %268 = OpLoad %139 
                                         f32 %269 = OpDot %267 %268 
                                                      OpStore %188 %269 
                                         f32 %270 = OpLoad %188 
                                         f32 %271 = OpExtInst %1 31 %270 
                                                      OpStore %188 %271 
                                         f32 %272 = OpLoad %188 
                                Uniform f32* %273 = OpAccessChain %99 %101 %210 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                                      OpStore %188 %275 
                                       f32_3 %276 = OpLoad %259 
                                       f32_3 %277 = OpFMul %276 %180 
                              Uniform f32_3* %278 = OpAccessChain %99 %110 
                                       f32_3 %279 = OpLoad %278 
                                       f32_3 %280 = OpFNegate %279 
                                       f32_3 %281 = OpFAdd %277 %280 
                                                      OpStore %139 %281 
                                       f32_3 %282 = OpLoad %139 
                                       f32_3 %283 = OpLoad %139 
                                         f32 %284 = OpDot %282 %283 
                                Private f32* %286 = OpAccessChain %139 %285 
                                                      OpStore %286 %284 
                                Private f32* %287 = OpAccessChain %139 %285 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 31 %288 
                                Private f32* %290 = OpAccessChain %139 %285 
                                                      OpStore %290 %289 
                                Private f32* %291 = OpAccessChain %139 %285 
                                         f32 %292 = OpLoad %291 
                                Uniform f32* %293 = OpAccessChain %99 %129 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFMul %292 %294 
                                Private f32* %296 = OpAccessChain %139 %285 
                                                      OpStore %296 %295 
                                         f32 %297 = OpLoad %188 
                                Private f32* %298 = OpAccessChain %139 %285 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFDiv %297 %299 
                                                      OpStore %188 %300 
                                         f32 %301 = OpLoad %188 
                                         f32 %302 = OpExtInst %1 40 %301 %221 
                                 Output f32* %303 = OpAccessChain %219 %101 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %94 
                                       f32_3 %305 = OpLoad %174 
                                       f32_3 %306 = OpFAdd %304 %305 
                                                      OpStore %139 %306 
                                       f32_3 %307 = OpLoad %94 
                                       f32_3 %308 = OpFNegate %307 
                                       f32_3 %309 = OpLoad %174 
                                       f32_3 %310 = OpFAdd %308 %309 
                                                      OpStore %94 %310 
                                       f32_3 %311 = OpLoad %94 
                                       f32_3 %312 = OpLoad %94 
                                         f32 %313 = OpDot %311 %312 
                                Private f32* %314 = OpAccessChain %94 %285 
                                                      OpStore %314 %313 
                                Private f32* %315 = OpAccessChain %94 %285 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpExtInst %1 31 %316 
                                Private f32* %318 = OpAccessChain %94 %285 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %94 %285 
                                         f32 %320 = OpLoad %319 
                                Uniform f32* %321 = OpAccessChain %99 %101 %210 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %320 %322 
                                Private f32* %324 = OpAccessChain %94 %285 
                                                      OpStore %324 %323 
                                       f32_3 %326 = OpLoad %139 
                                       f32_3 %327 = OpFMul %326 %180 
                              Uniform f32_3* %328 = OpAccessChain %99 %110 
                                       f32_3 %329 = OpLoad %328 
                                       f32_3 %330 = OpFNegate %329 
                                       f32_3 %331 = OpFAdd %327 %330 
                                                      OpStore %325 %331 
                                       f32_3 %332 = OpLoad %325 
                                       f32_3 %333 = OpLoad %325 
                                         f32 %334 = OpDot %332 %333 
                                Private f32* %335 = OpAccessChain %325 %285 
                                                      OpStore %335 %334 
                                Private f32* %336 = OpAccessChain %325 %285 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpExtInst %1 31 %337 
                                Private f32* %339 = OpAccessChain %325 %285 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %325 %285 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %99 %129 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFMul %341 %343 
                                Private f32* %345 = OpAccessChain %325 %285 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %94 %285 
                                         f32 %347 = OpLoad %346 
                                Private f32* %348 = OpAccessChain %325 %285 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFDiv %347 %349 
                                Private f32* %351 = OpAccessChain %94 %285 
                                                      OpStore %351 %350 
                                Private f32* %352 = OpAccessChain %94 %285 
                                         f32 %353 = OpLoad %352 
                                         f32 %354 = OpExtInst %1 40 %353 %221 
                                 Output f32* %355 = OpAccessChain %219 %100 
                                                      OpStore %355 %354 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %15 = OpFunction None %10 
                                Function i32* %14 = OpFunctionParameter 
                                              %16 = OpLabel 
                                 Output f32* %356 = OpAccessChain %219 %100 
                                         f32 %357 = OpLoad %356 
                                 Output f32* %358 = OpAccessChain %219 %100 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                Private f32* %361 = OpAccessChain %94 %285 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %94 %285 
                                         f32 %363 = OpLoad %362 
                                 Output f32* %364 = OpAccessChain %219 %100 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFAdd %363 %365 
                                Private f32* %367 = OpAccessChain %94 %285 
                                                      OpStore %367 %366 
                                Private f32* %372 = OpAccessChain %94 %285 
                                         f32 %373 = OpLoad %372 
                                         f32 %375 = OpFMul %373 %374 
                                 Output f32* %376 = OpAccessChain %371 %110 
                                                      OpStore %376 %375 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 399
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationEvaluation %4 "main" %12 %20 %139 %236 %301 %334 %344 %382 
                                                      OpExecutionMode %4 Triangles 
                                                      OpExecutionMode %4 SpacingFractionalOdd 
                                                      OpExecutionMode %4 VertexOrderCw 
                                                      OpDecorate %12 BuiltIn TessLevelInner 
                                                      OpDecorate %20 Location 20 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpMemberDecorate %60 0 Offset 60 
                                                      OpMemberDecorate %60 1 Offset 60 
                                                      OpMemberDecorate %60 2 Offset 60 
                                                      OpMemberDecorate %60 3 Offset 60 
                                                      OpMemberDecorate %60 4 Offset 60 
                                                      OpMemberDecorate %60 5 Offset 60 
                                                      OpMemberDecorate %60 6 Offset 60 
                                                      OpMemberDecorate %60 7 Offset 60 
                                                      OpMemberDecorate %60 8 Offset 60 
                                                      OpMemberDecorate %60 9 Offset 60 
                                                      OpMemberDecorate %60 10 Offset 60 
                                                      OpMemberDecorate %60 11 Offset 60 
                                                      OpMemberDecorate %60 12 Offset 60 
                                                      OpDecorate %60 Block 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpDecorate %96 DescriptorSet 96 
                                                      OpDecorate %96 Binding 96 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate %110 DescriptorSet 110 
                                                      OpDecorate %110 Binding 110 
                                                      OpDecorate %112 DescriptorSet 112 
                                                      OpDecorate %112 Binding 112 
                                                      OpDecorate %139 Location 139 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate %301 Location 301 
                                                      OpMemberDecorate %332 0 BuiltIn 332 
                                                      OpMemberDecorate %332 1 BuiltIn 332 
                                                      OpMemberDecorate %332 2 BuiltIn 332 
                                                      OpDecorate %332 Block 
                                                      OpDecorate %344 Location 344 
                                                      OpDecorate %382 Location 382 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 32 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypePointer Input %18 
                             Input f32_4[32]* %20 = OpVariable Input 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Input %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %42 = OpConstant 2 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                              %60 = OpTypeStruct %7 %7 %7 %7 %7 %57 %58 %59 %6 %6 %7 %6 %6 
                                              %61 = OpTypePointer Uniform %60 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32; f32;}* %62 = OpVariable Uniform 
                                          i32 %63 = OpConstant 10 
                                              %64 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 8 
                                              %79 = OpTypePointer Uniform %6 
                                          i32 %82 = OpConstant 9 
                                              %92 = OpTypePointer Private %6 
                                 Private f32* %93 = OpVariable Private 
                                              %94 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %95 = OpTypePointer UniformConstant %94 
         UniformConstant read_only Texture2D* %96 = OpVariable UniformConstant 
                                              %98 = OpTypeSampler 
                                              %99 = OpTypePointer UniformConstant %98 
                    UniformConstant sampler* %100 = OpVariable UniformConstant 
                                             %102 = OpTypeSampledImage %94 
                                         f32 %106 = OpConstant 3.674022E-40 
                                         u32 %108 = OpConstant 0 
        UniformConstant read_only Texture2D* %110 = OpVariable UniformConstant 
                    UniformConstant sampler* %112 = OpVariable UniformConstant 
                                         i32 %127 = OpConstant 6 
                              Private f32_4* %134 = OpVariable Private 
                                             %137 = OpTypeArray %10 %17 
                                             %138 = OpTypePointer Input %137 
                            Input f32_3[32]* %139 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         u32 %179 = OpConstant 2 
                                         u32 %187 = OpConstant 1 
                                Private f32* %189 = OpVariable Private 
                                         i32 %202 = OpConstant 11 
                                             %207 = OpTypePointer Private %10 
                              Private f32_3* %208 = OpVariable Private 
                                         f32 %222 = OpConstant 3.674022E-40 
                            Input f32_4[32]* %236 = OpVariable Input 
                                         i32 %256 = OpConstant 12 
                              Private f32_4* %274 = OpVariable Private 
                                         i32 %277 = OpConstant 5 
                                         i32 %296 = OpConstant 3 
                                             %300 = OpTypePointer Output %10 
                               Output f32_3* %301 = OpVariable Output 
                                         i32 %313 = OpConstant 7 
                                             %331 = OpTypeArray %6 %187 
                                             %332 = OpTypeStruct %7 %6 %331 
                                             %333 = OpTypePointer Output %332 
        Output struct {f32_4; f32; f32[1];}* %334 = OpVariable Output 
                                             %342 = OpTypePointer Output %7 
                               Output f32_3* %344 = OpVariable Output 
                               Output f32_3* %382 = OpVariable Output 
                                         i32 %383 = OpConstant 4 
                                             %393 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 1 1 
                                 Input f32_4* %24 = OpAccessChain %20 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                                        f32_2 %27 = OpFMul %15 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                                 Input f32_4* %31 = OpAccessChain %20 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_3 %34 = OpLoad %12 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 0 
                                        f32_2 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                                        f32_2 %39 = OpFAdd %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                 Input f32_4* %43 = OpAccessChain %20 %42 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_3 %46 = OpLoad %12 
                                        f32_2 %47 = OpVectorShuffle %46 %46 2 2 
                                        f32_2 %48 = OpFMul %45 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                                        f32_2 %51 = OpFAdd %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               Uniform f32_4* %65 = OpAccessChain %62 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_2 %67 = OpVectorShuffle %66 %66 0 1 
                                        f32_2 %68 = OpFMul %55 %67 
                               Uniform f32_4* %69 = OpAccessChain %62 %63 
                                        f32_4 %70 = OpLoad %69 
                                        f32_2 %71 = OpVectorShuffle %70 %70 2 3 
                                        f32_2 %72 = OpFAdd %68 %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %72 4 5 2 3 
                                                      OpStore %9 %74 
                               Uniform f32_4* %75 = OpAccessChain %62 %30 
                                        f32_4 %76 = OpLoad %75 
                                        f32_2 %77 = OpVectorShuffle %76 %76 1 1 
                                 Uniform f32* %80 = OpAccessChain %62 %78 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %83 = OpAccessChain %62 %82 
                                          f32 %84 = OpLoad %83 
                                        f32_2 %85 = OpCompositeConstruct %81 %84 
                                        f32_2 %86 = OpFMul %77 %85 
                                        f32_4 %87 = OpLoad %9 
                                        f32_2 %88 = OpVectorShuffle %87 %87 0 1 
                                        f32_2 %89 = OpFAdd %86 %88 
                                        f32_4 %90 = OpLoad %9 
                                        f32_4 %91 = OpVectorShuffle %90 %89 4 5 2 3 
                                                      OpStore %9 %91 
                          read_only Texture2D %97 = OpLoad %96 
                                     sampler %101 = OpLoad %100 
                  read_only Texture2DSampled %103 = OpSampledImage %97 %101 
                                       f32_4 %104 = OpLoad %9 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_4 %107 = OpImageSampleExplicitLod %103 %105 Lod %7 
                                         f32 %109 = OpCompositeExtract %107 0 
                                                      OpStore %93 %109 
                         read_only Texture2D %111 = OpLoad %110 
                                     sampler %113 = OpLoad %112 
                  read_only Texture2DSampled %114 = OpSampledImage %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
                                       f32_4 %117 = OpImageSampleExplicitLod %114 %116 Lod %7 
                                         f32 %118 = OpCompositeExtract %117 0 
                                Private f32* %119 = OpAccessChain %9 %108 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %9 %108 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpLoad %93 
                                         f32 %123 = OpFMul %121 %122 
                                Private f32* %124 = OpAccessChain %9 %108 
                                                      OpStore %124 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 0 0 
                              Uniform f32_4* %128 = OpAccessChain %62 %127 %22 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %126 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %9 %133 
                                       f32_3 %135 = OpLoad %12 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                                Input f32_3* %140 = OpAccessChain %139 %22 
                                       f32_3 %141 = OpLoad %140 
                                       f32_3 %142 = OpFMul %136 %141 
                                       f32_4 %143 = OpLoad %134 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %134 %144 
                                Input f32_3* %145 = OpAccessChain %139 %30 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpLoad %12 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 0 0 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %134 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %149 %151 
                                       f32_4 %153 = OpLoad %134 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %134 %154 
                                Input f32_3* %155 = OpAccessChain %139 %42 
                                       f32_3 %156 = OpLoad %155 
                                       f32_3 %157 = OpLoad %12 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %134 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %134 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %134 %164 
                                       f32_4 %166 = OpLoad %134 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                              Uniform f32_4* %168 = OpAccessChain %62 %127 %30 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %167 %170 
                                Private f32* %172 = OpAccessChain %165 %108 
                                                      OpStore %172 %171 
                                       f32_4 %173 = OpLoad %134 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                              Uniform f32_4* %175 = OpAccessChain %62 %127 %42 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %165 %179 
                                                      OpStore %180 %178 
                                       f32_4 %181 = OpLoad %134 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                              Uniform f32_4* %183 = OpAccessChain %62 %127 %22 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %182 %185 
                                Private f32* %188 = OpAccessChain %165 %187 
                                                      OpStore %188 %186 
                                       f32_4 %190 = OpLoad %165 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %165 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %191 %193 
                                                      OpStore %189 %194 
                                         f32 %195 = OpLoad %189 
                                         f32 %196 = OpExtInst %1 32 %195 
                                                      OpStore %189 %196 
                                Private f32* %197 = OpAccessChain %165 %187 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFNegate %198 
                                         f32 %200 = OpLoad %189 
                                         f32 %201 = OpFMul %199 %200 
                                Uniform f32* %203 = OpAccessChain %62 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFAdd %201 %204 
                                Private f32* %206 = OpAccessChain %134 %108 
                                                      OpStore %206 %205 
                                         f32 %209 = OpLoad %189 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_4 %211 = OpLoad %165 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFMul %210 %212 
                                                      OpStore %208 %213 
                                Private f32* %214 = OpAccessChain %134 %108 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpExtInst %1 4 %215 
                                Uniform f32* %217 = OpAccessChain %62 %202 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                         f32 %220 = OpFAdd %216 %219 
                                                      OpStore %189 %220 
                                         f32 %221 = OpLoad %189 
                                         f32 %223 = OpExtInst %1 43 %221 %106 %222 
                                                      OpStore %189 %223 
                                         f32 %224 = OpLoad %189 
                                         f32 %225 = OpFNegate %224 
                                         f32 %226 = OpFAdd %225 %222 
                                                      OpStore %189 %226 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                         f32 %229 = OpLoad %189 
                                       f32_3 %230 = OpCompositeConstruct %229 %229 %229 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_3 %234 = OpLoad %12 
                                       f32_4 %235 = OpVectorShuffle %234 %234 1 1 1 1 
                                Input f32_4* %237 = OpAccessChain %236 %22 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpFMul %235 %238 
                                                      OpStore %165 %239 
                                Input f32_4* %240 = OpAccessChain %236 %30 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpLoad %12 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpFMul %241 %243 
                                       f32_4 %245 = OpLoad %165 
                                       f32_4 %246 = OpFAdd %244 %245 
                                                      OpStore %165 %246 
                                Input f32_4* %247 = OpAccessChain %236 %42 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpLoad %12 
                                       f32_4 %250 = OpVectorShuffle %249 %249 2 2 2 2 
                                       f32_4 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %165 
                                       f32_4 %253 = OpFAdd %251 %252 
                                                      OpStore %165 %253 
                                       f32_4 %254 = OpLoad %9 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                Uniform f32* %257 = OpAccessChain %62 %256 
                                         f32 %258 = OpLoad %257 
                                Uniform f32* %259 = OpAccessChain %62 %256 
                                         f32 %260 = OpLoad %259 
                                Uniform f32* %261 = OpAccessChain %62 %256 
                                         f32 %262 = OpLoad %261 
                                       f32_3 %263 = OpCompositeConstruct %258 %260 %262 
                                         f32 %264 = OpCompositeExtract %263 0 
                                         f32 %265 = OpCompositeExtract %263 1 
                                         f32 %266 = OpCompositeExtract %263 2 
                                       f32_3 %267 = OpCompositeConstruct %264 %265 %266 
                                       f32_3 %268 = OpFMul %255 %267 
                                       f32_4 %269 = OpLoad %165 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %9 %273 
                                       f32_4 %275 = OpLoad %9 
                                       f32_4 %276 = OpVectorShuffle %275 %275 1 1 1 1 
                              Uniform f32_4* %278 = OpAccessChain %62 %277 %22 
                                       f32_4 %279 = OpLoad %278 
                                       f32_4 %280 = OpFMul %276 %279 
                                                      OpStore %274 %280 
                              Uniform f32_4* %281 = OpAccessChain %62 %277 %30 
                                       f32_4 %282 = OpLoad %281 
                                       f32_4 %283 = OpLoad %9 
                                       f32_4 %284 = OpVectorShuffle %283 %283 0 0 0 0 
                                       f32_4 %285 = OpFMul %282 %284 
                                       f32_4 %286 = OpLoad %274 
                                       f32_4 %287 = OpFAdd %285 %286 
                                                      OpStore %274 %287 
                              Uniform f32_4* %288 = OpAccessChain %62 %277 %42 
                                       f32_4 %289 = OpLoad %288 
                                       f32_4 %290 = OpLoad %9 
                                       f32_4 %291 = OpVectorShuffle %290 %290 2 2 2 2 
                                       f32_4 %292 = OpFMul %289 %291 
                                       f32_4 %293 = OpLoad %274 
                                       f32_4 %294 = OpFAdd %292 %293 
                                                      OpStore %9 %294 
                                       f32_4 %295 = OpLoad %9 
                              Uniform f32_4* %297 = OpAccessChain %62 %277 %296 
                                       f32_4 %298 = OpLoad %297 
                                       f32_4 %299 = OpFAdd %295 %298 
                                                      OpStore %274 %299 
                              Uniform f32_4* %302 = OpAccessChain %62 %277 %296 
                                       f32_4 %303 = OpLoad %302 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                       f32_4 %305 = OpLoad %165 
                                       f32_3 %306 = OpVectorShuffle %305 %305 3 3 3 
                                       f32_3 %307 = OpFMul %304 %306 
                                       f32_4 %308 = OpLoad %9 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_3 %310 = OpFAdd %307 %309 
                                                      OpStore %301 %310 
                                       f32_4 %311 = OpLoad %274 
                                       f32_4 %312 = OpVectorShuffle %311 %311 1 1 1 1 
                              Uniform f32_4* %314 = OpAccessChain %62 %313 %22 
                                       f32_4 %315 = OpLoad %314 
                                       f32_4 %316 = OpFMul %312 %315 
                                                      OpStore %9 %316 
                              Uniform f32_4* %317 = OpAccessChain %62 %313 %30 
                                       f32_4 %318 = OpLoad %317 
                                       f32_4 %319 = OpLoad %274 
                                       f32_4 %320 = OpVectorShuffle %319 %319 0 0 0 0 
                                       f32_4 %321 = OpFMul %318 %320 
                                       f32_4 %322 = OpLoad %9 
                                       f32_4 %323 = OpFAdd %321 %322 
                                                      OpStore %9 %323 
                              Uniform f32_4* %324 = OpAccessChain %62 %313 %42 
                                       f32_4 %325 = OpLoad %324 
                                       f32_4 %326 = OpLoad %274 
                                       f32_4 %327 = OpVectorShuffle %326 %326 2 2 2 2 
                                       f32_4 %328 = OpFMul %325 %327 
                                       f32_4 %329 = OpLoad %9 
                                       f32_4 %330 = OpFAdd %328 %329 
                                                      OpStore %9 %330 
                              Uniform f32_4* %335 = OpAccessChain %62 %313 %296 
                                       f32_4 %336 = OpLoad %335 
                                       f32_4 %337 = OpLoad %274 
                                       f32_4 %338 = OpVectorShuffle %337 %337 3 3 3 3 
                                       f32_4 %339 = OpFMul %336 %338 
                                       f32_4 %340 = OpLoad %9 
                                       f32_4 %341 = OpFAdd %339 %340 
                               Output f32_4* %343 = OpAccessChain %334 %30 
                                                      OpStore %343 %341 
                                       f32_3 %345 = OpLoad %208 
                                                      OpStore %344 %345 
                                Private f32* %346 = OpAccessChain %208 %187 
                                         f32 %347 = OpLoad %346 
                                Private f32* %348 = OpAccessChain %208 %187 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFMul %347 %349 
                                Private f32* %351 = OpAccessChain %9 %108 
                                                      OpStore %351 %350 
                                Private f32* %352 = OpAccessChain %208 %108 
                                         f32 %353 = OpLoad %352 
                                Private f32* %354 = OpAccessChain %208 %108 
                                         f32 %355 = OpLoad %354 
                                         f32 %356 = OpFMul %353 %355 
                                Private f32* %357 = OpAccessChain %9 %108 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpFNegate %358 
                                         f32 %360 = OpFAdd %356 %359 
                                Private f32* %361 = OpAccessChain %9 %108 
                                                      OpStore %361 %360 
                                       f32_3 %362 = OpLoad %208 
                                       f32_4 %363 = OpVectorShuffle %362 %362 1 2 2 0 
                                       f32_3 %364 = OpLoad %208 
                                       f32_4 %365 = OpVectorShuffle %364 %364 0 1 2 2 
                                       f32_4 %366 = OpFMul %363 %365 
                                                      OpStore %134 %366 
                              Uniform f32_4* %367 = OpAccessChain %62 %22 
                                       f32_4 %368 = OpLoad %367 
                                       f32_4 %369 = OpLoad %134 
                                         f32 %370 = OpDot %368 %369 
                                Private f32* %371 = OpAccessChain %165 %108 
                                                      OpStore %371 %370 
                              Uniform f32_4* %372 = OpAccessChain %62 %42 
                                       f32_4 %373 = OpLoad %372 
                                       f32_4 %374 = OpLoad %134 
                                         f32 %375 = OpDot %373 %374 
                                Private f32* %376 = OpAccessChain %165 %187 
                                                      OpStore %376 %375 
                              Uniform f32_4* %377 = OpAccessChain %62 %296 
                                       f32_4 %378 = OpLoad %377 
                                       f32_4 %379 = OpLoad %134 
                                         f32 %380 = OpDot %378 %379 
                                Private f32* %381 = OpAccessChain %165 %179 
                                                      OpStore %381 %380 
                              Uniform f32_4* %384 = OpAccessChain %62 %383 
                                       f32_4 %385 = OpLoad %384 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                       f32_4 %387 = OpLoad %9 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 0 0 
                                       f32_3 %389 = OpFMul %386 %388 
                                       f32_4 %390 = OpLoad %165 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpFAdd %389 %391 
                                                      OpStore %382 %392 
                                 Output f32* %394 = OpAccessChain %334 %30 %187 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFNegate %395 
                                 Output f32* %397 = OpAccessChain %334 %30 %187 
                                                      OpStore %397 %396 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 410
#extension GL_ARB_explicit_attrib_location : require

in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
in  vec4 in_TEXCOORD3;
in  vec4 in_COLOR0;
layout(location = 0) out vec4 vs_INTERNALTESSPOS0;
layout(location = 1) out vec4 vs_TANGENT0;
layout(location = 2) out vec3 vs_NORMAL0;
layout(location = 3) out vec4 vs_TEXCOORD0;
layout(location = 4) out vec4 vs_TEXCOORD1;
layout(location = 5) out vec4 vs_TEXCOORD2;
layout(location = 6) out vec4 vs_TEXCOORD3;
layout(location = 7) out vec4 vs_COLOR0;
void main()
{
    vs_INTERNALTESSPOS0 = in_POSITION0;
    vs_TANGENT0 = in_TANGENT0;
    vs_NORMAL0.xyz = in_NORMAL0.xyz;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD3;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Y_Mask;
uniform 	vec4 _Flamecolor2;
uniform 	vec4 _FlameColor;
uniform 	float _FresnelBias;
uniform 	float _FresnelScale;
uniform 	float _FresnelPower;
uniform 	float _Alpha;
UNITY_LOCATION(0) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform  samplerCube unity_SpecCube1;
layout(location = 0) in  vec3 ds_TEXCOORD0;
layout(location = 1) in  vec3 ds_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
bvec3 u_xlatb7;
vec3 u_xlat8;
bvec3 u_xlatb9;
vec3 u_xlat10;
float u_xlat30;
float u_xlat31;
float u_xlat32;
bool u_xlatb32;
float u_xlat33;
bool u_xlatb33;
void main()
{
    u_xlat0.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat31 = dot(ds_TEXCOORD0.xyz, ds_TEXCOORD0.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * ds_TEXCOORD0.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat32 = (-u_xlat31) + 1.0;
    u_xlat32 = log2(u_xlat32);
    u_xlat32 = u_xlat32 * _FresnelPower;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = _FresnelScale * u_xlat32 + _FresnelBias;
    u_xlat3.xyz = (-_Flamecolor2.xyz) + _FlameColor.xyz;
    u_xlat3.xyz = vec3(u_xlat32) * u_xlat3.xyz + _Flamecolor2.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(5.0, 5.0, 5.0));
    u_xlat33 = (-ds_TEXCOORD0.y) + _Y_Mask;
    u_xlat33 = abs(u_xlat33) + (-_Y_Mask);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat32 = u_xlat32 * u_xlat33;
    SV_Target0.w = u_xlat32 * _Alpha;
    u_xlat32 = dot((-u_xlat1.xyz), ds_TEXCOORD0.xyz);
    u_xlat32 = u_xlat32 + u_xlat32;
    u_xlat1.xyz = ds_TEXCOORD0.xyz * (-vec3(u_xlat32)) + (-u_xlat1.xyz);
    u_xlatb32 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb32){
        u_xlat32 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat32 = inversesqrt(u_xlat32);
        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat32);
        u_xlat5.xyz = (-ds_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
        u_xlat6.xyz = (-ds_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat5;
            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
            u_xlat5 = hlslcc_movcTemp;
        }
        u_xlat32 = min(u_xlat5.y, u_xlat5.x);
        u_xlat32 = min(u_xlat5.z, u_xlat32);
        u_xlat5.xyz = ds_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat32) + u_xlat5.xyz;
    } else {
        u_xlat4.xyz = u_xlat1.xyz;
    }
    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, 6.0);
    u_xlat32 = u_xlat4.w + -1.0;
    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat32 + 1.0;
    u_xlat32 = log2(u_xlat32);
    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat32);
    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb33){
        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb33){
            u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat33 = inversesqrt(u_xlat33);
            u_xlat6.xyz = u_xlat1.xyz * vec3(u_xlat33);
            u_xlat7.xyz = (-ds_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
            u_xlat8.xyz = (-ds_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat7;
                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
                u_xlat7 = hlslcc_movcTemp;
            }
            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
            u_xlat33 = min(u_xlat7.z, u_xlat33);
            u_xlat7.xyz = ds_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
        }
        u_xlat6 = textureLod(unity_SpecCube1, u_xlat1.xyz, 6.0);
        u_xlat1.x = u_xlat6.w + -1.0;
        u_xlat1.x = unity_SpecCube1_HDR.w * u_xlat1.x + 1.0;
        u_xlat1.x = log2(u_xlat1.x);
        u_xlat1.x = u_xlat1.x * unity_SpecCube1_HDR.y;
        u_xlat1.x = exp2(u_xlat1.x);
        u_xlat1.x = u_xlat1.x * unity_SpecCube1_HDR.x;
        u_xlat1.xyz = u_xlat6.xyz * u_xlat1.xxx;
        u_xlat4.xyz = vec3(u_xlat32) * u_xlat4.xyz + (-u_xlat1.xyz);
        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat1.xyz;
    }
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10.x = abs(u_xlat31) + u_xlat30;
    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
    u_xlat10.x = 0.5 / u_xlat10.x;
    u_xlat10.x = u_xlat10.x * 0.999999881;
    u_xlat10.x = u_xlat30 * u_xlat10.x;
    u_xlat10.xyz = u_xlat10.xxx * _LightColor0.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat1.x = u_xlat0.x * u_xlat0.x;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.959999979 + 0.0399999991;
    u_xlat1.xyz = u_xlat5.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat31 = -abs(u_xlat31) + 1.0;
    u_xlat2.x = u_xlat31 * u_xlat31;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat31 = u_xlat31 * u_xlat2.x;
    u_xlat31 = u_xlat31 * 2.23517418e-08 + 0.0399999991;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xxx + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    return;
}

#endif
#ifdef HULL
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(vertices=3) out;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	float _EdgeLength;
layout(location = 0) in vec4 vs_INTERNALTESSPOS0[];
layout(location = 0) out vec4 hs_INTERNALTESSPOS0[];
layout(location = 1) in vec4 vs_TANGENT0[];
layout(location = 1) out vec4 hs_TANGENT0[];
layout(location = 2) in vec3 vs_NORMAL0[];
layout(location = 2) out vec3 hs_NORMAL0[];
layout(location = 3) in vec4 vs_TEXCOORD0[];
layout(location = 3) out vec4 hs_TEXCOORD0[];
layout(location = 4) in vec4 vs_TEXCOORD1[];
layout(location = 4) out vec4 hs_TEXCOORD1[];
layout(location = 5) in vec4 vs_TEXCOORD2[];
layout(location = 5) out vec4 hs_TEXCOORD2[];
layout(location = 6) in vec4 vs_TEXCOORD3[];
layout(location = 6) out vec4 hs_TEXCOORD3[];
layout(location = 7) in vec4 vs_COLOR0[];
layout(location = 7) out vec4 hs_COLOR0[];
void passthrough_ctrl_points()
{
    hs_INTERNALTESSPOS0[gl_InvocationID] = vs_INTERNALTESSPOS0[gl_InvocationID];
    hs_TANGENT0[gl_InvocationID] = vs_TANGENT0[gl_InvocationID];
    hs_NORMAL0[gl_InvocationID] = vs_NORMAL0[gl_InvocationID];
    hs_TEXCOORD0[gl_InvocationID] = vs_TEXCOORD0[gl_InvocationID];
    hs_TEXCOORD1[gl_InvocationID] = vs_TEXCOORD1[gl_InvocationID];
    hs_TEXCOORD2[gl_InvocationID] = vs_TEXCOORD2[gl_InvocationID];
    hs_TEXCOORD3[gl_InvocationID] = vs_TEXCOORD3[gl_InvocationID];
    hs_COLOR0[gl_InvocationID] = vs_COLOR0[gl_InvocationID];
}
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
float u_xlat13;
void fork_phase2(int phaseInstanceID)
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[1].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[1].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[2].www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _EdgeLength;
    u_xlat2.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _ScreenParams.y;
    u_xlat12 = u_xlat13 / u_xlat12;
    gl_TessLevelOuter[0] = max(u_xlat12, 1.0);
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[0].www + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _ScreenParams.y;
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _EdgeLength;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    gl_TessLevelOuter[1] = max(u_xlat12, 1.0);
    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _ScreenParams.y;
    u_xlat4.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _EdgeLength;
    u_xlat0.x = u_xlat0.x / u_xlat4.x;
    gl_TessLevelOuter[2] = max(u_xlat0.x, 1.0);
}
void join_phase3(int phaseInstanceID)
{
    u_xlat0.x = gl_TessLevelOuter[2] + gl_TessLevelOuter[2];
    u_xlat0.x = u_xlat0.x + gl_TessLevelOuter[2];
    gl_TessLevelInner[0] = u_xlat0.x * 0.333333343;
}
void main()
{
    passthrough_ctrl_points();
    barrier();
    if (gl_InvocationID == 0)
    {
        fork_phase2(0);
        join_phase3(0);
    }
}

#endif
#ifdef DOMAIN
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(ccw) in;
layout(fractional_odd_spacing) in;
layout(triangles) in;
uniform 	vec4 _Time;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _u;
uniform 	float _v;
uniform 	vec4 _Flamenoise_ST;
uniform 	float _Y_Mask;
uniform 	float _FlameHeight;
UNITY_LOCATION(2) uniform  sampler2D _FlameWave;
UNITY_LOCATION(3) uniform  sampler2D _Flamenoise;
layout(location = 0) in  vec4 hs_INTERNALTESSPOS0 [];
layout(location = 2) in  vec3 hs_NORMAL0 [];
layout(location = 3) in  vec4 hs_TEXCOORD0 [];
layout(location = 0) out vec3 ds_TEXCOORD0;
layout(location = 1) out vec3 ds_TEXCOORD1;
layout(location = 2) out vec3 ds_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = gl_TessCoord.yy * hs_TEXCOORD0[1].xy;
    u_xlat0.xy = hs_TEXCOORD0[0].xy * gl_TessCoord.xx + u_xlat0.xy;
    u_xlat0.xy = hs_TEXCOORD0[2].xy * gl_TessCoord.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _Flamenoise_ST.xy + _Flamenoise_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_u, _v) + u_xlat0.xy;
    u_xlat8 = textureLod(_FlameWave, u_xlat0.xy, 0.0).x;
    u_xlat0.x = textureLod(_Flamenoise, u_xlat0.xy, 0.0).x;
    u_xlat0.x = u_xlat0.x * u_xlat8;
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat1.xyz = gl_TessCoord.yyy * hs_NORMAL0[1].xyz;
    u_xlat1.xyz = hs_NORMAL0[0].xyz * gl_TessCoord.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hs_NORMAL0[2].xyz * gl_TessCoord.zzz + u_xlat1.xyz;
    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.x = (-u_xlat2.y) * u_xlat12 + _Y_Mask;
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = abs(u_xlat1.x) + (-_Y_Mask);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
    u_xlat2 = gl_TessCoord.yyyy * hs_INTERNALTESSPOS0[1];
    u_xlat2 = hs_INTERNALTESSPOS0[0] * gl_TessCoord.xxxx + u_xlat2;
    u_xlat2 = hs_INTERNALTESSPOS0[2] * gl_TessCoord.zzzz + u_xlat2;
    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_FlameHeight, _FlameHeight, _FlameHeight)) + u_xlat2.xyz;
    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
    u_xlat3 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    ds_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat2.www + u_xlat0.xyz;
    u_xlat0 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat0;
    ds_TEXCOORD0.xyz = u_xlat5.xyz;
    u_xlat0.x = u_xlat5.y * u_xlat5.y;
    u_xlat0.x = u_xlat5.x * u_xlat5.x + (-u_xlat0.x);
    u_xlat1 = u_xlat5.yzzx * u_xlat5.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    ds_TEXCOORD2.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 38
; Schema: 0
                               OpCapability Shader 
                        %1 = OpExtInstImport "GLSL.std.450" 
                               OpMemoryModel Logical GLSL450 
                               OpEntryPoint Vertex %4 "main" %9 %11 %13 %14 %18 %20 %22 %23 %25 %26 %28 %29 %31 %32 %34 %35 
                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                               OpDecorate %9 Location 9 
                               OpDecorate %11 Location 11 
                               OpDecorate %13 Location 13 
                               OpDecorate %14 Location 14 
                               OpDecorate %18 Location 18 
                               OpDecorate %20 Location 20 
                               OpDecorate vs_TEXCOORD0 Location 22 
                               OpDecorate %23 Location 23 
                               OpDecorate vs_TEXCOORD1 Location 25 
                               OpDecorate %26 Location 26 
                               OpDecorate vs_TEXCOORD2 Location 28 
                               OpDecorate %29 Location 29 
                               OpDecorate vs_TEXCOORD3 Location 31 
                               OpDecorate %32 Location 32 
                               OpDecorate %34 Location 34 
                               OpDecorate %35 Location 35 
                        %2 = OpTypeVoid 
                        %3 = OpTypeFunction %2 
                        %6 = OpTypeFloat 32 
                        %7 = OpTypeVector %6 4 
                        %8 = OpTypePointer Output %7 
          Output f32_4* %9 = OpVariable Output 
                       %10 = OpTypePointer Input %7 
          Input f32_4* %11 = OpVariable Input 
         Output f32_4* %13 = OpVariable Output 
          Input f32_4* %14 = OpVariable Input 
                       %16 = OpTypeVector %6 3 
                       %17 = OpTypePointer Output %16 
         Output f32_3* %18 = OpVariable Output 
                       %19 = OpTypePointer Input %16 
          Input f32_3* %20 = OpVariable Input 
Output f32_4* vs_TEXCOORD0 = OpVariable Output 
          Input f32_4* %23 = OpVariable Input 
Output f32_4* vs_TEXCOORD1 = OpVariable Output 
          Input f32_4* %26 = OpVariable Input 
Output f32_4* vs_TEXCOORD2 = OpVariable Output 
          Input f32_4* %29 = OpVariable Input 
Output f32_4* vs_TEXCOORD3 = OpVariable Output 
          Input f32_4* %32 = OpVariable Input 
         Output f32_4* %34 = OpVariable Output 
          Input f32_4* %35 = OpVariable Input 
                   void %4 = OpFunction None %3 
                        %5 = OpLabel 
                 f32_4 %12 = OpLoad %11 
                               OpStore %9 %12 
                 f32_4 %15 = OpLoad %14 
                               OpStore %13 %15 
                 f32_3 %21 = OpLoad %20 
                               OpStore %18 %21 
                 f32_4 %24 = OpLoad %23 
                               OpStore vs_TEXCOORD0 %24 
                 f32_4 %27 = OpLoad %26 
                               OpStore vs_TEXCOORD1 %27 
                 f32_4 %30 = OpLoad %29 
                               OpStore vs_TEXCOORD2 %30 
                 f32_4 %33 = OpLoad %32 
                               OpStore vs_TEXCOORD3 %33 
                 f32_4 %36 = OpLoad %35 
                               OpStore %34 %36 
                               OpReturn
                               OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 645
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %37 %129 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpMemberDecorate %15 16 Offset 15 
                                                      OpMemberDecorate %15 17 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %37 Location 37 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %287 DescriptorSet 287 
                                                      OpDecorate %287 Binding 287 
                                                      OpDecorate %291 DescriptorSet 291 
                                                      OpDecorate %291 Binding 291 
                                                      OpDecorate %442 DescriptorSet 442 
                                                      OpDecorate %442 Binding 442 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeStruct %7 %14 %14 %14 %14 %14 %14 %14 %14 %14 %14 %6 %14 %14 %6 %6 %6 %6 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32_4; f32_4; f32; f32; f32; f32;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %7 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %25 = OpVariable Private 
                               Private f32_3* %31 = OpVariable Private 
                                 Private f32* %36 = OpVariable Private 
                                 Input f32_3* %37 = OpVariable Input 
                               Private f32_3* %43 = OpVariable Private 
                                 Private f32* %51 = OpVariable Private 
                                          f32 %54 = OpConstant 3.674022E-40 
                                          i32 %59 = OpConstant 16 
                                              %60 = OpTypePointer Uniform %6 
                                          i32 %66 = OpConstant 15 
                                          i32 %71 = OpConstant 14 
                               Private f32_3* %75 = OpVariable Private 
                                          i32 %76 = OpConstant 12 
                                              %77 = OpTypePointer Uniform %14 
                                          i32 %82 = OpConstant 13 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                         f32 %100 = OpConstant 3.674022E-40 
                                       f32_3 %101 = OpConstantComposite %100 %100 %100 
                                Private f32* %103 = OpVariable Private 
                                             %104 = OpTypeInt 32 0 
                                         u32 %105 = OpConstant 1 
                                             %106 = OpTypePointer Input %6 
                                         i32 %110 = OpConstant 11 
                                             %128 = OpTypePointer Output %14 
                               Output f32_4* %129 = OpVariable Output 
                                         i32 %131 = OpConstant 17 
                                         u32 %135 = OpConstant 3 
                                             %136 = OpTypePointer Output %6 
                                             %153 = OpTypeBool 
                                             %154 = OpTypePointer Private %153 
                               Private bool* %155 = OpVariable Private 
                                         i32 %156 = OpConstant 4 
                                             %168 = OpTypePointer Private %14 
                              Private f32_4* %169 = OpVariable Private 
                              Private f32_3* %176 = OpVariable Private 
                                         i32 %179 = OpConstant 2 
                              Private f32_4* %188 = OpVariable Private 
                                         i32 %191 = OpConstant 3 
                                             %205 = OpTypeVector %153 3 
                                             %206 = OpTypePointer Private %205 
                             Private bool_3* %207 = OpVariable Private 
                                       f32_4 %208 = OpConstantComposite %96 %96 %96 %96 
                                             %211 = OpTypeVector %153 4 
                                             %214 = OpTypePointer Function %7 
                                         u32 %217 = OpConstant 0 
                                             %220 = OpTypePointer Function %6 
                                         u32 %243 = OpConstant 2 
                                             %285 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %286 = OpTypePointer UniformConstant %285 
      UniformConstant read_only TextureCube* %287 = OpVariable UniformConstant 
                                             %289 = OpTypeSampler 
                                             %290 = OpTypePointer UniformConstant %289 
                    UniformConstant sampler* %291 = OpVariable UniformConstant 
                                             %293 = OpTypeSampledImage %285 
                                         f32 %297 = OpConstant 3.674022E-40 
                                         f32 %301 = OpConstant 3.674022E-40 
                                         i32 %303 = OpConstant 5 
                               Private bool* %326 = OpVariable Private 
                                         f32 %329 = OpConstant 3.674022E-40 
                                         i32 %334 = OpConstant 8 
                              Private f32_3* %352 = OpVariable Private 
                                         i32 %355 = OpConstant 6 
                              Private f32_3* %364 = OpVariable Private 
                                         i32 %367 = OpConstant 7 
                             Private bool_3* %376 = OpVariable Private 
      UniformConstant read_only TextureCube* %442 = OpVariable UniformConstant 
                                         i32 %452 = OpConstant 9 
                                         i32 %507 = OpConstant 1 
                                         f32 %516 = OpConstant 3.674022E-40 
                              Private f32_3* %541 = OpVariable Private 
                                         f32 %549 = OpConstant 3.674022E-40 
                                         f32 %552 = OpConstant 3.674022E-40 
                                         f32 %564 = OpConstant 3.674022E-40 
                                         i32 %569 = OpConstant 10 
                                         f32 %599 = OpConstant 3.674022E-40 
                                         f32 %601 = OpConstant 3.674022E-40 
                                       f32_3 %605 = OpConstantComposite %552 %552 %552 
                                         f32 %626 = OpConstant 3.674022E-40 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %215 = OpVariable Function 
                               Function f32* %221 = OpVariable Function 
                               Function f32* %233 = OpVariable Function 
                               Function f32* %246 = OpVariable Function 
                             Function f32_3* %381 = OpVariable Function 
                               Function f32* %385 = OpVariable Function 
                               Function f32* %397 = OpVariable Function 
                               Function f32* %409 = OpVariable Function 
                                        f32_3 %12 = OpLoad %11 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %13 %22 
                                                      OpStore %9 %23 
                                        f32_3 %26 = OpLoad %9 
                                        f32_3 %27 = OpLoad %9 
                                          f32 %28 = OpDot %26 %27 
                                                      OpStore %25 %28 
                                          f32 %29 = OpLoad %25 
                                          f32 %30 = OpExtInst %1 32 %29 
                                                      OpStore %25 %30 
                                          f32 %32 = OpLoad %25 
                                        f32_3 %33 = OpCompositeConstruct %32 %32 %32 
                                        f32_3 %34 = OpLoad %9 
                                        f32_3 %35 = OpFMul %33 %34 
                                                      OpStore %31 %35 
                                        f32_3 %38 = OpLoad %37 
                                        f32_3 %39 = OpLoad %37 
                                          f32 %40 = OpDot %38 %39 
                                                      OpStore %36 %40 
                                          f32 %41 = OpLoad %36 
                                          f32 %42 = OpExtInst %1 32 %41 
                                                      OpStore %36 %42 
                                          f32 %44 = OpLoad %36 
                                        f32_3 %45 = OpCompositeConstruct %44 %44 %44 
                                        f32_3 %46 = OpLoad %37 
                                        f32_3 %47 = OpFMul %45 %46 
                                                      OpStore %43 %47 
                                        f32_3 %48 = OpLoad %43 
                                        f32_3 %49 = OpLoad %31 
                                          f32 %50 = OpDot %48 %49 
                                                      OpStore %36 %50 
                                          f32 %52 = OpLoad %36 
                                          f32 %53 = OpFNegate %52 
                                          f32 %55 = OpFAdd %53 %54 
                                                      OpStore %51 %55 
                                          f32 %56 = OpLoad %51 
                                          f32 %57 = OpExtInst %1 30 %56 
                                                      OpStore %51 %57 
                                          f32 %58 = OpLoad %51 
                                 Uniform f32* %61 = OpAccessChain %17 %59 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFMul %58 %62 
                                                      OpStore %51 %63 
                                          f32 %64 = OpLoad %51 
                                          f32 %65 = OpExtInst %1 29 %64 
                                                      OpStore %51 %65 
                                 Uniform f32* %67 = OpAccessChain %17 %66 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpLoad %51 
                                          f32 %70 = OpFMul %68 %69 
                                 Uniform f32* %72 = OpAccessChain %17 %71 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFAdd %70 %73 
                                                      OpStore %51 %74 
                               Uniform f32_4* %78 = OpAccessChain %17 %76 
                                        f32_4 %79 = OpLoad %78 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 1 2 
                                        f32_3 %81 = OpFNegate %80 
                               Uniform f32_4* %83 = OpAccessChain %17 %82 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFAdd %81 %85 
                                                      OpStore %75 %86 
                                          f32 %87 = OpLoad %51 
                                        f32_3 %88 = OpCompositeConstruct %87 %87 %87 
                                        f32_3 %89 = OpLoad %75 
                                        f32_3 %90 = OpFMul %88 %89 
                               Uniform f32_4* %91 = OpAccessChain %17 %76 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFAdd %90 %93 
                                                      OpStore %75 %94 
                                        f32_3 %95 = OpLoad %75 
                                        f32_3 %98 = OpExtInst %1 40 %95 %97 
                                                      OpStore %75 %98 
                                        f32_3 %99 = OpLoad %75 
                                       f32_3 %102 = OpExtInst %1 37 %99 %101 
                                                      OpStore %75 %102 
                                  Input f32* %107 = OpAccessChain %37 %105 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFNegate %108 
                                Uniform f32* %111 = OpAccessChain %17 %110 
                                         f32 %112 = OpLoad %111 
                                         f32 %113 = OpFAdd %109 %112 
                                                      OpStore %103 %113 
                                         f32 %114 = OpLoad %103 
                                         f32 %115 = OpExtInst %1 4 %114 
                                Uniform f32* %116 = OpAccessChain %17 %110 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                         f32 %119 = OpFAdd %115 %118 
                                                      OpStore %103 %119 
                                         f32 %120 = OpLoad %103 
                                         f32 %121 = OpExtInst %1 43 %120 %96 %54 
                                                      OpStore %103 %121 
                                         f32 %122 = OpLoad %103 
                                         f32 %123 = OpFNegate %122 
                                         f32 %124 = OpFAdd %123 %54 
                                                      OpStore %103 %124 
                                         f32 %125 = OpLoad %51 
                                         f32 %126 = OpLoad %103 
                                         f32 %127 = OpFMul %125 %126 
                                                      OpStore %51 %127 
                                         f32 %130 = OpLoad %51 
                                Uniform f32* %132 = OpAccessChain %17 %131 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFMul %130 %133 
                                 Output f32* %137 = OpAccessChain %129 %135 
                                                      OpStore %137 %134 
                                       f32_3 %138 = OpLoad %31 
                                       f32_3 %139 = OpFNegate %138 
                                       f32_3 %140 = OpLoad %37 
                                         f32 %141 = OpDot %139 %140 
                                                      OpStore %51 %141 
                                         f32 %142 = OpLoad %51 
                                         f32 %143 = OpLoad %51 
                                         f32 %144 = OpFAdd %142 %143 
                                                      OpStore %51 %144 
                                       f32_3 %145 = OpLoad %37 
                                         f32 %146 = OpLoad %51 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_3 %148 = OpFNegate %147 
                                       f32_3 %149 = OpFMul %145 %148 
                                       f32_3 %150 = OpLoad %31 
                                       f32_3 %151 = OpFNegate %150 
                                       f32_3 %152 = OpFAdd %149 %151 
                                                      OpStore %31 %152 
                                Uniform f32* %157 = OpAccessChain %17 %156 %135 
                                         f32 %158 = OpLoad %157 
                                        bool %159 = OpFOrdLessThan %96 %158 
                                                      OpStore %155 %159 
                                        bool %160 = OpLoad %155 
                                                      OpSelectionMerge %162 None 
                                                      OpBranchConditional %160 %161 %281 
                                             %161 = OpLabel 
                                       f32_3 %163 = OpLoad %31 
                                       f32_3 %164 = OpLoad %31 
                                         f32 %165 = OpDot %163 %164 
                                                      OpStore %51 %165 
                                         f32 %166 = OpLoad %51 
                                         f32 %167 = OpExtInst %1 32 %166 
                                                      OpStore %51 %167 
                                       f32_3 %170 = OpLoad %31 
                                         f32 %171 = OpLoad %51 
                                       f32_3 %172 = OpCompositeConstruct %171 %171 %171 
                                       f32_3 %173 = OpFMul %170 %172 
                                       f32_4 %174 = OpLoad %169 
                                       f32_4 %175 = OpVectorShuffle %174 %173 4 5 6 3 
                                                      OpStore %169 %175 
                                       f32_3 %177 = OpLoad %11 
                                       f32_3 %178 = OpFNegate %177 
                              Uniform f32_4* %180 = OpAccessChain %17 %179 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFAdd %178 %182 
                                                      OpStore %176 %183 
                                       f32_3 %184 = OpLoad %176 
                                       f32_4 %185 = OpLoad %169 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFDiv %184 %186 
                                                      OpStore %176 %187 
                                       f32_3 %189 = OpLoad %11 
                                       f32_3 %190 = OpFNegate %189 
                              Uniform f32_4* %192 = OpAccessChain %17 %191 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %195 = OpFAdd %190 %194 
                                       f32_4 %196 = OpLoad %188 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
                                                      OpStore %188 %197 
                                       f32_4 %198 = OpLoad %188 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_4 %200 = OpLoad %169 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFDiv %199 %201 
                                       f32_4 %203 = OpLoad %188 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 6 3 
                                                      OpStore %188 %204 
                                       f32_4 %209 = OpLoad %169 
                                       f32_4 %210 = OpVectorShuffle %209 %209 0 1 2 0 
                                      bool_4 %212 = OpFOrdLessThan %208 %210 
                                      bool_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                                      OpStore %207 %213 
                                       f32_3 %216 = OpLoad %176 
                                                      OpStore %215 %216 
                               Private bool* %218 = OpAccessChain %207 %217 
                                        bool %219 = OpLoad %218 
                                                      OpSelectionMerge %223 None 
                                                      OpBranchConditional %219 %222 %226 
                                             %222 = OpLabel 
                                Private f32* %224 = OpAccessChain %176 %217 
                                         f32 %225 = OpLoad %224 
                                                      OpStore %221 %225 
                                                      OpBranch %223 
                                             %226 = OpLabel 
                                Private f32* %227 = OpAccessChain %188 %217 
                                         f32 %228 = OpLoad %227 
                                                      OpStore %221 %228 
                                                      OpBranch %223 
                                             %223 = OpLabel 
                                         f32 %229 = OpLoad %221 
                               Function f32* %230 = OpAccessChain %215 %217 
                                                      OpStore %230 %229 
                               Private bool* %231 = OpAccessChain %207 %105 
                                        bool %232 = OpLoad %231 
                                                      OpSelectionMerge %235 None 
                                                      OpBranchConditional %232 %234 %238 
                                             %234 = OpLabel 
                                Private f32* %236 = OpAccessChain %176 %105 
                                         f32 %237 = OpLoad %236 
                                                      OpStore %233 %237 
                                                      OpBranch %235 
                                             %238 = OpLabel 
                                Private f32* %239 = OpAccessChain %188 %105 
                                         f32 %240 = OpLoad %239 
                                                      OpStore %233 %240 
                                                      OpBranch %235 
                                             %235 = OpLabel 
                                         f32 %241 = OpLoad %233 
                               Function f32* %242 = OpAccessChain %215 %105 
                                                      OpStore %242 %241 
                               Private bool* %244 = OpAccessChain %207 %243 
                                        bool %245 = OpLoad %244 
                                                      OpSelectionMerge %248 None 
                                                      OpBranchConditional %245 %247 %251 
                                             %247 = OpLabel 
                                Private f32* %249 = OpAccessChain %176 %243 
                                         f32 %250 = OpLoad %249 
                                                      OpStore %246 %250 
                                                      OpBranch %248 
                                             %251 = OpLabel 
                                Private f32* %252 = OpAccessChain %188 %243 
                                         f32 %253 = OpLoad %252 
                                                      OpStore %246 %253 
                                                      OpBranch %248 
                                             %248 = OpLabel 
                                         f32 %254 = OpLoad %246 
                               Function f32* %255 = OpAccessChain %215 %243 
                                                      OpStore %255 %254 
                                       f32_3 %256 = OpLoad %215 
                                                      OpStore %176 %256 
                                Private f32* %257 = OpAccessChain %176 %105 
                                         f32 %258 = OpLoad %257 
                                Private f32* %259 = OpAccessChain %176 %217 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpExtInst %1 37 %258 %260 
                                                      OpStore %51 %261 
                                Private f32* %262 = OpAccessChain %176 %243 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpLoad %51 
                                         f32 %265 = OpExtInst %1 37 %263 %264 
                                                      OpStore %51 %265 
                                       f32_3 %266 = OpLoad %11 
                              Uniform f32_4* %267 = OpAccessChain %17 %156 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFNegate %269 
                                       f32_3 %271 = OpFAdd %266 %270 
                                                      OpStore %176 %271 
                                       f32_4 %272 = OpLoad %169 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                         f32 %274 = OpLoad %51 
                                       f32_3 %275 = OpCompositeConstruct %274 %274 %274 
                                       f32_3 %276 = OpFMul %273 %275 
                                       f32_3 %277 = OpLoad %176 
                                       f32_3 %278 = OpFAdd %276 %277 
                                       f32_4 %279 = OpLoad %169 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %169 %280 
                                                      OpBranch %162 
                                             %281 = OpLabel 
                                       f32_3 %282 = OpLoad %31 
                                       f32_4 %283 = OpLoad %169 
                                       f32_4 %284 = OpVectorShuffle %283 %282 4 5 6 3 
                                                      OpStore %169 %284 
                                                      OpBranch %162 
                                             %162 = OpLabel 
                       read_only TextureCube %288 = OpLoad %287 
                                     sampler %292 = OpLoad %291 
                read_only TextureCubeSampled %294 = OpSampledImage %288 %292 
                                       f32_4 %295 = OpLoad %169 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_4 %298 = OpImageSampleExplicitLod %294 %296 Lod %14 
                                                      OpStore %169 %298 
                                Private f32* %299 = OpAccessChain %169 %135 
                                         f32 %300 = OpLoad %299 
                                         f32 %302 = OpFAdd %300 %301 
                                                      OpStore %51 %302 
                                Uniform f32* %304 = OpAccessChain %17 %303 %135 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpLoad %51 
                                         f32 %307 = OpFMul %305 %306 
                                         f32 %308 = OpFAdd %307 %54 
                                                      OpStore %51 %308 
                                         f32 %309 = OpLoad %51 
                                         f32 %310 = OpExtInst %1 30 %309 
                                                      OpStore %51 %310 
                                         f32 %311 = OpLoad %51 
                                Uniform f32* %312 = OpAccessChain %17 %303 %105 
                                         f32 %313 = OpLoad %312 
                                         f32 %314 = OpFMul %311 %313 
                                                      OpStore %51 %314 
                                         f32 %315 = OpLoad %51 
                                         f32 %316 = OpExtInst %1 29 %315 
                                                      OpStore %51 %316 
                                         f32 %317 = OpLoad %51 
                                Uniform f32* %318 = OpAccessChain %17 %303 %217 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFMul %317 %319 
                                                      OpStore %51 %320 
                                       f32_4 %321 = OpLoad %169 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                         f32 %323 = OpLoad %51 
                                       f32_3 %324 = OpCompositeConstruct %323 %323 %323 
                                       f32_3 %325 = OpFMul %322 %324 
                                                      OpStore %176 %325 
                                Uniform f32* %327 = OpAccessChain %17 %191 %135 
                                         f32 %328 = OpLoad %327 
                                        bool %330 = OpFOrdLessThan %328 %329 
                                                      OpStore %326 %330 
                                        bool %331 = OpLoad %326 
                                                      OpSelectionMerge %333 None 
                                                      OpBranchConditional %331 %332 %333 
                                             %332 = OpLabel 
                                Uniform f32* %335 = OpAccessChain %17 %334 %135 
                                         f32 %336 = OpLoad %335 
                                        bool %337 = OpFOrdLessThan %96 %336 
                                                      OpStore %326 %337 
                                        bool %338 = OpLoad %326 
                                                      OpSelectionMerge %340 None 
                                                      OpBranchConditional %338 %339 %340 
                                             %339 = OpLabel 
                                       f32_3 %341 = OpLoad %31 
                                       f32_3 %342 = OpLoad %31 
                                         f32 %343 = OpDot %341 %342 
                                                      OpStore %103 %343 
                                         f32 %344 = OpLoad %103 
                                         f32 %345 = OpExtInst %1 32 %344 
                                                      OpStore %103 %345 
                                       f32_3 %346 = OpLoad %31 
                                         f32 %347 = OpLoad %103 
                                       f32_3 %348 = OpCompositeConstruct %347 %347 %347 
                                       f32_3 %349 = OpFMul %346 %348 
                                       f32_4 %350 = OpLoad %188 
                                       f32_4 %351 = OpVectorShuffle %350 %349 4 5 6 3 
                                                      OpStore %188 %351 
                                       f32_3 %353 = OpLoad %11 
                                       f32_3 %354 = OpFNegate %353 
                              Uniform f32_4* %356 = OpAccessChain %17 %355 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_3 %359 = OpFAdd %354 %358 
                                                      OpStore %352 %359 
                                       f32_3 %360 = OpLoad %352 
                                       f32_4 %361 = OpLoad %188 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                       f32_3 %363 = OpFDiv %360 %362 
                                                      OpStore %352 %363 
                                       f32_3 %365 = OpLoad %11 
                                       f32_3 %366 = OpFNegate %365 
                              Uniform f32_4* %368 = OpAccessChain %17 %367 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_3 %371 = OpFAdd %366 %370 
                                                      OpStore %364 %371 
                                       f32_3 %372 = OpLoad %364 
                                       f32_4 %373 = OpLoad %188 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFDiv %372 %374 
                                                      OpStore %364 %375 
                                       f32_4 %377 = OpLoad %188 
                                       f32_4 %378 = OpVectorShuffle %377 %377 0 1 2 0 
                                      bool_4 %379 = OpFOrdLessThan %208 %378 
                                      bool_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                                      OpStore %376 %380 
                                       f32_3 %382 = OpLoad %352 
                                                      OpStore %381 %382 
                               Private bool* %383 = OpAccessChain %376 %217 
                                        bool %384 = OpLoad %383 
                                                      OpSelectionMerge %387 None 
                                                      OpBranchConditional %384 %386 %390 
                                             %386 = OpLabel 
                                Private f32* %388 = OpAccessChain %352 %217 
                                         f32 %389 = OpLoad %388 
                                                      OpStore %385 %389 
                                                      OpBranch %387 
                                             %390 = OpLabel 
                                Private f32* %391 = OpAccessChain %364 %217 
                                         f32 %392 = OpLoad %391 
                                                      OpStore %385 %392 
                                                      OpBranch %387 
                                             %387 = OpLabel 
                                         f32 %393 = OpLoad %385 
                               Function f32* %394 = OpAccessChain %381 %217 
                                                      OpStore %394 %393 
                               Private bool* %395 = OpAccessChain %376 %105 
                                        bool %396 = OpLoad %395 
                                                      OpSelectionMerge %399 None 
                                                      OpBranchConditional %396 %398 %402 
                                             %398 = OpLabel 
                                Private f32* %400 = OpAccessChain %352 %105 
                                         f32 %401 = OpLoad %400 
                                                      OpStore %397 %401 
                                                      OpBranch %399 
                                             %402 = OpLabel 
                                Private f32* %403 = OpAccessChain %364 %105 
                                         f32 %404 = OpLoad %403 
                                                      OpStore %397 %404 
                                                      OpBranch %399 
                                             %399 = OpLabel 
                                         f32 %405 = OpLoad %397 
                               Function f32* %406 = OpAccessChain %381 %105 
                                                      OpStore %406 %405 
                               Private bool* %407 = OpAccessChain %376 %243 
                                        bool %408 = OpLoad %407 
                                                      OpSelectionMerge %411 None 
                                                      OpBranchConditional %408 %410 %414 
                                             %410 = OpLabel 
                                Private f32* %412 = OpAccessChain %352 %243 
                                         f32 %413 = OpLoad %412 
                                                      OpStore %409 %413 
                                                      OpBranch %411 
                                             %414 = OpLabel 
                                Private f32* %415 = OpAccessChain %364 %243 
                                         f32 %416 = OpLoad %415 
                                                      OpStore %409 %416 
                                                      OpBranch %411 
                                             %411 = OpLabel 
                                         f32 %417 = OpLoad %409 
                               Function f32* %418 = OpAccessChain %381 %243 
                                                      OpStore %418 %417 
                                       f32_3 %419 = OpLoad %381 
                                                      OpStore %352 %419 
                                Private f32* %420 = OpAccessChain %352 %105 
                                         f32 %421 = OpLoad %420 
                                Private f32* %422 = OpAccessChain %352 %217 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpExtInst %1 37 %421 %423 
                                                      OpStore %103 %424 
                                Private f32* %425 = OpAccessChain %352 %243 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpLoad %103 
                                         f32 %428 = OpExtInst %1 37 %426 %427 
                                                      OpStore %103 %428 
                                       f32_3 %429 = OpLoad %11 
                              Uniform f32_4* %430 = OpAccessChain %17 %334 
                                       f32_4 %431 = OpLoad %430 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                       f32_3 %433 = OpFNegate %432 
                                       f32_3 %434 = OpFAdd %429 %433 
                                                      OpStore %352 %434 
                                       f32_4 %435 = OpLoad %188 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
                                         f32 %437 = OpLoad %103 
                                       f32_3 %438 = OpCompositeConstruct %437 %437 %437 
                                       f32_3 %439 = OpFMul %436 %438 
                                       f32_3 %440 = OpLoad %352 
                                       f32_3 %441 = OpFAdd %439 %440 
                                                      OpStore %31 %441 
                                                      OpBranch %340 
                                             %340 = OpLabel 
                       read_only TextureCube %443 = OpLoad %442 
                                     sampler %444 = OpLoad %291 
                read_only TextureCubeSampled %445 = OpSampledImage %443 %444 
                                       f32_3 %446 = OpLoad %31 
                                       f32_4 %447 = OpImageSampleExplicitLod %445 %446 Lod %14 
                                                      OpStore %188 %447 
                                Private f32* %448 = OpAccessChain %188 %135 
                                         f32 %449 = OpLoad %448 
                                         f32 %450 = OpFAdd %449 %301 
                                Private f32* %451 = OpAccessChain %31 %217 
                                                      OpStore %451 %450 
                                Uniform f32* %453 = OpAccessChain %17 %452 %135 
                                         f32 %454 = OpLoad %453 
                                Private f32* %455 = OpAccessChain %31 %217 
                                         f32 %456 = OpLoad %455 
                                         f32 %457 = OpFMul %454 %456 
                                         f32 %458 = OpFAdd %457 %54 
                                Private f32* %459 = OpAccessChain %31 %217 
                                                      OpStore %459 %458 
                                Private f32* %460 = OpAccessChain %31 %217 
                                         f32 %461 = OpLoad %460 
                                         f32 %462 = OpExtInst %1 30 %461 
                                Private f32* %463 = OpAccessChain %31 %217 
                                                      OpStore %463 %462 
                                Private f32* %464 = OpAccessChain %31 %217 
                                         f32 %465 = OpLoad %464 
                                Uniform f32* %466 = OpAccessChain %17 %452 %105 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFMul %465 %467 
                                Private f32* %469 = OpAccessChain %31 %217 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %31 %217 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpExtInst %1 29 %471 
                                Private f32* %473 = OpAccessChain %31 %217 
                                                      OpStore %473 %472 
                                Private f32* %474 = OpAccessChain %31 %217 
                                         f32 %475 = OpLoad %474 
                                Uniform f32* %476 = OpAccessChain %17 %452 %217 
                                         f32 %477 = OpLoad %476 
                                         f32 %478 = OpFMul %475 %477 
                                Private f32* %479 = OpAccessChain %31 %217 
                                                      OpStore %479 %478 
                                       f32_4 %480 = OpLoad %188 
                                       f32_3 %481 = OpVectorShuffle %480 %480 0 1 2 
                                       f32_3 %482 = OpLoad %31 
                                       f32_3 %483 = OpVectorShuffle %482 %482 0 0 0 
                                       f32_3 %484 = OpFMul %481 %483 
                                                      OpStore %31 %484 
                                         f32 %485 = OpLoad %51 
                                       f32_3 %486 = OpCompositeConstruct %485 %485 %485 
                                       f32_4 %487 = OpLoad %169 
                                       f32_3 %488 = OpVectorShuffle %487 %487 0 1 2 
                                       f32_3 %489 = OpFMul %486 %488 
                                       f32_3 %490 = OpLoad %31 
                                       f32_3 %491 = OpFNegate %490 
                                       f32_3 %492 = OpFAdd %489 %491 
                                       f32_4 %493 = OpLoad %169 
                                       f32_4 %494 = OpVectorShuffle %493 %492 4 5 6 3 
                                                      OpStore %169 %494 
                              Uniform f32_4* %495 = OpAccessChain %17 %191 
                                       f32_4 %496 = OpLoad %495 
                                       f32_3 %497 = OpVectorShuffle %496 %496 3 3 3 
                                       f32_4 %498 = OpLoad %169 
                                       f32_3 %499 = OpVectorShuffle %498 %498 0 1 2 
                                       f32_3 %500 = OpFMul %497 %499 
                                       f32_3 %501 = OpLoad %31 
                                       f32_3 %502 = OpFAdd %500 %501 
                                                      OpStore %176 %502 
                                                      OpBranch %333 
                                             %333 = OpLabel 
                                       f32_3 %503 = OpLoad %9 
                                         f32 %504 = OpLoad %25 
                                       f32_3 %505 = OpCompositeConstruct %504 %504 %504 
                                       f32_3 %506 = OpFMul %503 %505 
                              Uniform f32_4* %508 = OpAccessChain %17 %507 
                                       f32_4 %509 = OpLoad %508 
                                       f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
                                       f32_3 %511 = OpFAdd %506 %510 
                                                      OpStore %9 %511 
                                       f32_3 %512 = OpLoad %9 
                                       f32_3 %513 = OpLoad %9 
                                         f32 %514 = OpDot %512 %513 
                                                      OpStore %25 %514 
                                         f32 %515 = OpLoad %25 
                                         f32 %517 = OpExtInst %1 40 %515 %516 
                                                      OpStore %25 %517 
                                         f32 %518 = OpLoad %25 
                                         f32 %519 = OpExtInst %1 32 %518 
                                                      OpStore %25 %519 
                                         f32 %520 = OpLoad %25 
                                       f32_3 %521 = OpCompositeConstruct %520 %520 %520 
                                       f32_3 %522 = OpLoad %9 
                                       f32_3 %523 = OpFMul %521 %522 
                                                      OpStore %9 %523 
                                       f32_3 %524 = OpLoad %43 
                              Uniform f32_4* %525 = OpAccessChain %17 %507 
                                       f32_4 %526 = OpLoad %525 
                                       f32_3 %527 = OpVectorShuffle %526 %526 0 1 2 
                                         f32 %528 = OpDot %524 %527 
                                                      OpStore %25 %528 
                                         f32 %529 = OpLoad %25 
                                         f32 %530 = OpExtInst %1 43 %529 %96 %54 
                                                      OpStore %25 %530 
                              Uniform f32_4* %531 = OpAccessChain %17 %507 
                                       f32_4 %532 = OpLoad %531 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
                                       f32_3 %534 = OpLoad %9 
                                         f32 %535 = OpDot %533 %534 
                                Private f32* %536 = OpAccessChain %9 %217 
                                                      OpStore %536 %535 
                                Private f32* %537 = OpAccessChain %9 %217 
                                         f32 %538 = OpLoad %537 
                                         f32 %539 = OpExtInst %1 43 %538 %96 %54 
                                Private f32* %540 = OpAccessChain %9 %217 
                                                      OpStore %540 %539 
                                         f32 %542 = OpLoad %36 
                                         f32 %543 = OpExtInst %1 4 %542 
                                         f32 %544 = OpLoad %25 
                                         f32 %545 = OpFAdd %543 %544 
                                Private f32* %546 = OpAccessChain %541 %217 
                                                      OpStore %546 %545 
                                Private f32* %547 = OpAccessChain %541 %217 
                                         f32 %548 = OpLoad %547 
                                         f32 %550 = OpFAdd %548 %549 
                                Private f32* %551 = OpAccessChain %541 %217 
                                                      OpStore %551 %550 
                                Private f32* %553 = OpAccessChain %541 %217 
                                         f32 %554 = OpLoad %553 
                                         f32 %555 = OpFDiv %552 %554 
                                Private f32* %556 = OpAccessChain %541 %217 
                                                      OpStore %556 %555 
                                         f32 %557 = OpLoad %25 
                                Private f32* %558 = OpAccessChain %541 %217 
                                         f32 %559 = OpLoad %558 
                                         f32 %560 = OpFMul %557 %559 
                                Private f32* %561 = OpAccessChain %541 %217 
                                                      OpStore %561 %560 
                                Private f32* %562 = OpAccessChain %541 %217 
                                         f32 %563 = OpLoad %562 
                                         f32 %565 = OpFMul %563 %564 
                                Private f32* %566 = OpAccessChain %541 %217 
                                                      OpStore %566 %565 
                                       f32_3 %567 = OpLoad %541 
                                       f32_3 %568 = OpVectorShuffle %567 %567 0 0 0 
                              Uniform f32_4* %570 = OpAccessChain %17 %569 
                                       f32_4 %571 = OpLoad %570 
                                       f32_3 %572 = OpVectorShuffle %571 %571 0 1 2 
                                       f32_3 %573 = OpFMul %568 %572 
                                                      OpStore %541 %573 
                                Private f32* %574 = OpAccessChain %9 %217 
                                         f32 %575 = OpLoad %574 
                                         f32 %576 = OpFNegate %575 
                                         f32 %577 = OpFAdd %576 %54 
                                Private f32* %578 = OpAccessChain %9 %217 
                                                      OpStore %578 %577 
                                Private f32* %579 = OpAccessChain %9 %217 
                                         f32 %580 = OpLoad %579 
                                Private f32* %581 = OpAccessChain %9 %217 
                                         f32 %582 = OpLoad %581 
                                         f32 %583 = OpFMul %580 %582 
                                Private f32* %584 = OpAccessChain %31 %217 
                                                      OpStore %584 %583 
                                Private f32* %585 = OpAccessChain %31 %217 
                                         f32 %586 = OpLoad %585 
                                Private f32* %587 = OpAccessChain %31 %217 
                                         f32 %588 = OpLoad %587 
                                         f32 %589 = OpFMul %586 %588 
                                Private f32* %590 = OpAccessChain %31 %217 
                                                      OpStore %590 %589 
                                Private f32* %591 = OpAccessChain %9 %217 
                                         f32 %592 = OpLoad %591 
                                Private f32* %593 = OpAccessChain %31 %217 
                                         f32 %594 = OpLoad %593 
                                         f32 %595 = OpFMul %592 %594 
                                Private f32* %596 = OpAccessChain %9 %217 
                                                      OpStore %596 %595 
                                Private f32* %597 = OpAccessChain %9 %217 
                                         f32 %598 = OpLoad %597 
                                         f32 %600 = OpFMul %598 %599 
                                         f32 %602 = OpFAdd %600 %601 
                                Private f32* %603 = OpAccessChain %9 %217 
                                                      OpStore %603 %602 
                                       f32_3 %604 = OpLoad %176 
                                       f32_3 %606 = OpFMul %604 %605 
                                                      OpStore %31 %606 
                                         f32 %607 = OpLoad %36 
                                         f32 %608 = OpExtInst %1 4 %607 
                                         f32 %609 = OpFNegate %608 
                                         f32 %610 = OpFAdd %609 %54 
                                                      OpStore %36 %610 
                                         f32 %611 = OpLoad %36 
                                         f32 %612 = OpLoad %36 
                                         f32 %613 = OpFMul %611 %612 
                                Private f32* %614 = OpAccessChain %43 %217 
                                                      OpStore %614 %613 
                                Private f32* %615 = OpAccessChain %43 %217 
                                         f32 %616 = OpLoad %615 
                                Private f32* %617 = OpAccessChain %43 %217 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                Private f32* %620 = OpAccessChain %43 %217 
                                                      OpStore %620 %619 
                                         f32 %621 = OpLoad %36 
                                Private f32* %622 = OpAccessChain %43 %217 
                                         f32 %623 = OpLoad %622 
                                         f32 %624 = OpFMul %621 %623 
                                                      OpStore %36 %624 
                                         f32 %625 = OpLoad %36 
                                         f32 %627 = OpFMul %625 %626 
                                         f32 %628 = OpFAdd %627 %601 
                                                      OpStore %36 %628 
                                         f32 %629 = OpLoad %36 
                                       f32_3 %630 = OpCompositeConstruct %629 %629 %629 
                                       f32_3 %631 = OpLoad %31 
                                       f32_3 %632 = OpFMul %630 %631 
                                                      OpStore %31 %632 
                                       f32_3 %633 = OpLoad %541 
                                       f32_3 %634 = OpLoad %9 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 0 0 
                                       f32_3 %636 = OpFMul %633 %635 
                                       f32_3 %637 = OpLoad %31 
                                       f32_3 %638 = OpFAdd %636 %637 
                                                      OpStore %9 %638 
                                       f32_3 %639 = OpLoad %75 
                                       f32_3 %640 = OpLoad %9 
                                       f32_3 %641 = OpFAdd %639 %640 
                                       f32_4 %642 = OpLoad %129 
                                       f32_4 %643 = OpVectorShuffle %642 %641 4 5 6 3 
                                                      OpStore %129 %643 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 387
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationControl %4 "main" %23 %25 %30 %37 %39 %47 %51 %58 %60 %65 %67 %72 %74 %79 %81 %86 %88 %219 %371 
                                                      OpExecutionMode %4 OutputVertices 4 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %25 BuiltIn WorkgroupSize 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %37 Location 37 
                                                      OpDecorate %39 Location 39 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %51 Location 51 
                                                      OpDecorate %58 Location 58 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate %65 Location 65 
                                                      OpDecorate vs_TEXCOORD1 Location 67 
                                                      OpDecorate %72 Location 72 
                                                      OpDecorate vs_TEXCOORD2 Location 74 
                                                      OpDecorate %79 Location 79 
                                                      OpDecorate vs_TEXCOORD3 Location 81 
                                                      OpDecorate %86 Location 86 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %96 ArrayStride 96 
                                                      OpMemberDecorate %97 0 Offset 97 
                                                      OpMemberDecorate %97 1 Offset 97 
                                                      OpMemberDecorate %97 2 Offset 97 
                                                      OpMemberDecorate %97 3 Offset 97 
                                                      OpDecorate %97 Block 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate %219 Patch 
                                                      OpDecorate %219 BuiltIn 219 
                                                      OpDecorate %371 Patch 
                                                      OpDecorate %371 BuiltIn 371 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %8 = OpTypeInt 32 1 
                                               %9 = OpTypePointer Function %8 
                                              %10 = OpTypeFunction %2 %9 
                                              %17 = OpTypeFloat 32 
                                              %18 = OpTypeVector %17 4 
                                              %19 = OpTypeInt 32 0 
                                          u32 %20 = OpConstant 3 
                                              %21 = OpTypeArray %18 %20 
                                              %22 = OpTypePointer Output %21 
                             Output f32_4[3]* %23 = OpVariable Output 
                                              %24 = OpTypePointer Input %8 
                                   Input i32* %25 = OpVariable Input 
                                          u32 %27 = OpConstant 32 
                                              %28 = OpTypeArray %18 %27 
                                              %29 = OpTypePointer Input %28 
                             Input f32_4[32]* %30 = OpVariable Input 
                                              %32 = OpTypePointer Input %18 
                                              %35 = OpTypePointer Output %18 
                             Output f32_4[3]* %37 = OpVariable Output 
                             Input f32_4[32]* %39 = OpVariable Input 
                                              %44 = OpTypeVector %17 3 
                                              %45 = OpTypeArray %44 %20 
                                              %46 = OpTypePointer Output %45 
                             Output f32_3[3]* %47 = OpVariable Output 
                                              %49 = OpTypeArray %44 %27 
                                              %50 = OpTypePointer Input %49 
                             Input f32_3[32]* %51 = OpVariable Input 
                                              %53 = OpTypePointer Input %44 
                                              %56 = OpTypePointer Output %44 
                             Output f32_4[3]* %58 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD0 = OpVariable Input 
                             Output f32_4[3]* %65 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD1 = OpVariable Input 
                             Output f32_4[3]* %72 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD2 = OpVariable Input 
                             Output f32_4[3]* %79 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD3 = OpVariable Input 
                             Output f32_4[3]* %86 = OpVariable Output 
                             Input f32_4[32]* %88 = OpVariable Input 
                                              %93 = OpTypePointer Private %44 
                               Private f32_3* %94 = OpVariable Private 
                                          u32 %95 = OpConstant 4 
                                              %96 = OpTypeArray %18 %95 
                                              %97 = OpTypeStruct %44 %18 %96 %17 
                                              %98 = OpTypePointer Uniform %97 
Uniform struct {f32_3; f32_4; f32_4[4]; f32;}* %99 = OpVariable Uniform 
                                         i32 %100 = OpConstant 2 
                                         i32 %101 = OpConstant 1 
                                             %102 = OpTypePointer Uniform %18 
                                         i32 %110 = OpConstant 0 
                                         i32 %129 = OpConstant 3 
                              Private f32_3* %139 = OpVariable Private 
                              Private f32_3* %174 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                             %182 = OpTypePointer Uniform %44 
                                             %187 = OpTypePointer Private %17 
                                Private f32* %188 = OpVariable Private 
                                             %195 = OpTypePointer Uniform %17 
                                Private f32* %203 = OpVariable Private 
                                         u32 %210 = OpConstant 1 
                                             %217 = OpTypeArray %17 %95 
                                             %218 = OpTypePointer Output %217 
                              Output f32[4]* %219 = OpVariable Output 
                                         f32 %221 = OpConstant 3.674022E-40 
                                             %223 = OpTypePointer Output %17 
                              Private f32_3* %259 = OpVariable Private 
                                         u32 %285 = OpConstant 0 
                              Private f32_3* %325 = OpVariable Private 
                                         u32 %368 = OpConstant 2 
                                             %369 = OpTypeArray %17 %368 
                                             %370 = OpTypePointer Output %369 
                              Output f32[2]* %371 = OpVariable Output 
                                         f32 %374 = OpConstant 3.674022E-40 
                                             %379 = OpTypeBool 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %383 = OpVariable Function 
                               Function i32* %385 = OpVariable Function 
                                        void %377 = OpFunctionCall %6 
                                                      OpControlBarrier 368 95 285 
                                         i32 %378 = OpLoad %25 
                                        bool %380 = OpIEqual %378 %110 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %380 %381 %382 
                                             %381 = OpLabel 
                                                      OpStore %383 %110 
                                        void %384 = OpFunctionCall %12 %383 
                                                      OpStore %385 %110 
                                        void %386 = OpFunctionCall %15 %385 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
                                          void %6 = OpFunction None %3 
                                               %7 = OpLabel 
                                          i32 %26 = OpLoad %25 
                                          i32 %31 = OpLoad %25 
                                 Input f32_4* %33 = OpAccessChain %30 %31 
                                        f32_4 %34 = OpLoad %33 
                                Output f32_4* %36 = OpAccessChain %23 %26 
                                                      OpStore %36 %34 
                                          i32 %38 = OpLoad %25 
                                          i32 %40 = OpLoad %25 
                                 Input f32_4* %41 = OpAccessChain %39 %40 
                                        f32_4 %42 = OpLoad %41 
                                Output f32_4* %43 = OpAccessChain %37 %38 
                                                      OpStore %43 %42 
                                          i32 %48 = OpLoad %25 
                                          i32 %52 = OpLoad %25 
                                 Input f32_3* %54 = OpAccessChain %51 %52 
                                        f32_3 %55 = OpLoad %54 
                                Output f32_3* %57 = OpAccessChain %47 %48 
                                                      OpStore %57 %55 
                                          i32 %59 = OpLoad %25 
                                          i32 %61 = OpLoad %25 
                                 Input f32_4* %62 = OpAccessChain vs_TEXCOORD0 %61 
                                        f32_4 %63 = OpLoad %62 
                                Output f32_4* %64 = OpAccessChain %58 %59 
                                                      OpStore %64 %63 
                                          i32 %66 = OpLoad %25 
                                          i32 %68 = OpLoad %25 
                                 Input f32_4* %69 = OpAccessChain vs_TEXCOORD1 %68 
                                        f32_4 %70 = OpLoad %69 
                                Output f32_4* %71 = OpAccessChain %65 %66 
                                                      OpStore %71 %70 
                                          i32 %73 = OpLoad %25 
                                          i32 %75 = OpLoad %25 
                                 Input f32_4* %76 = OpAccessChain vs_TEXCOORD2 %75 
                                        f32_4 %77 = OpLoad %76 
                                Output f32_4* %78 = OpAccessChain %72 %73 
                                                      OpStore %78 %77 
                                          i32 %80 = OpLoad %25 
                                          i32 %82 = OpLoad %25 
                                 Input f32_4* %83 = OpAccessChain vs_TEXCOORD3 %82 
                                        f32_4 %84 = OpLoad %83 
                                Output f32_4* %85 = OpAccessChain %79 %80 
                                                      OpStore %85 %84 
                                          i32 %87 = OpLoad %25 
                                          i32 %89 = OpLoad %25 
                                 Input f32_4* %90 = OpAccessChain %88 %89 
                                        f32_4 %91 = OpLoad %90 
                                Output f32_4* %92 = OpAccessChain %86 %87 
                                                      OpStore %92 %91 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %12 = OpFunction None %10 
                                Function i32* %11 = OpFunctionParameter 
                                              %13 = OpLabel 
                              Uniform f32_4* %103 = OpAccessChain %99 %100 %101 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                Input f32_4* %106 = OpAccessChain %30 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 1 1 1 
                                       f32_3 %109 = OpFMul %105 %108 
                                                      OpStore %94 %109 
                              Uniform f32_4* %111 = OpAccessChain %99 %100 %110 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                Input f32_4* %114 = OpAccessChain %30 %101 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %113 %116 
                                       f32_3 %118 = OpLoad %94 
                                       f32_3 %119 = OpFAdd %117 %118 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %99 %100 %100 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                Input f32_4* %123 = OpAccessChain %30 %101 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 2 2 2 
                                       f32_3 %126 = OpFMul %122 %125 
                                       f32_3 %127 = OpLoad %94 
                                       f32_3 %128 = OpFAdd %126 %127 
                                                      OpStore %94 %128 
                              Uniform f32_4* %130 = OpAccessChain %99 %100 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                Input f32_4* %133 = OpAccessChain %30 %101 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 3 3 3 
                                       f32_3 %136 = OpFMul %132 %135 
                                       f32_3 %137 = OpLoad %94 
                                       f32_3 %138 = OpFAdd %136 %137 
                                                      OpStore %94 %138 
                              Uniform f32_4* %140 = OpAccessChain %99 %100 %101 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                Input f32_4* %143 = OpAccessChain %30 %100 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 1 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                                      OpStore %139 %146 
                              Uniform f32_4* %147 = OpAccessChain %99 %100 %110 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                Input f32_4* %150 = OpAccessChain %30 %100 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 0 0 
                                       f32_3 %153 = OpFMul %149 %152 
                                       f32_3 %154 = OpLoad %139 
                                       f32_3 %155 = OpFAdd %153 %154 
                                                      OpStore %139 %155 
                              Uniform f32_4* %156 = OpAccessChain %99 %100 %100 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                Input f32_4* %159 = OpAccessChain %30 %100 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 2 2 2 
                                       f32_3 %162 = OpFMul %158 %161 
                                       f32_3 %163 = OpLoad %139 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %139 %164 
                              Uniform f32_4* %165 = OpAccessChain %99 %100 %129 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                Input f32_4* %168 = OpAccessChain %30 %100 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 3 3 3 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_3 %172 = OpLoad %139 
                                       f32_3 %173 = OpFAdd %171 %172 
                                                      OpStore %139 %173 
                                       f32_3 %175 = OpLoad %94 
                                       f32_3 %176 = OpLoad %139 
                                       f32_3 %177 = OpFAdd %175 %176 
                                                      OpStore %174 %177 
                                       f32_3 %178 = OpLoad %174 
                                       f32_3 %181 = OpFMul %178 %180 
                              Uniform f32_3* %183 = OpAccessChain %99 %110 
                                       f32_3 %184 = OpLoad %183 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpFAdd %181 %185 
                                                      OpStore %174 %186 
                                       f32_3 %189 = OpLoad %174 
                                       f32_3 %190 = OpLoad %174 
                                         f32 %191 = OpDot %189 %190 
                                                      OpStore %188 %191 
                                         f32 %192 = OpLoad %188 
                                         f32 %193 = OpExtInst %1 31 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                Uniform f32* %196 = OpAccessChain %99 %129 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %194 %197 
                                                      OpStore %188 %198 
                                       f32_3 %199 = OpLoad %94 
                                       f32_3 %200 = OpLoad %139 
                                       f32_3 %201 = OpFNegate %200 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore %174 %202 
                                       f32_3 %204 = OpLoad %174 
                                       f32_3 %205 = OpLoad %174 
                                         f32 %206 = OpDot %204 %205 
                                                      OpStore %203 %206 
                                         f32 %207 = OpLoad %203 
                                         f32 %208 = OpExtInst %1 31 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                Uniform f32* %211 = OpAccessChain %99 %101 %210 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %209 %212 
                                                      OpStore %203 %213 
                                         f32 %214 = OpLoad %203 
                                         f32 %215 = OpLoad %188 
                                         f32 %216 = OpFDiv %214 %215 
                                                      OpStore %188 %216 
                                         f32 %220 = OpLoad %188 
                                         f32 %222 = OpExtInst %1 40 %220 %221 
                                 Output f32* %224 = OpAccessChain %219 %110 
                                                      OpStore %224 %222 
                              Uniform f32_4* %225 = OpAccessChain %99 %100 %101 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                Input f32_4* %228 = OpAccessChain %30 %110 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 1 1 1 
                                       f32_3 %231 = OpFMul %227 %230 
                                                      OpStore %174 %231 
                              Uniform f32_4* %232 = OpAccessChain %99 %100 %110 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                Input f32_4* %235 = OpAccessChain %30 %110 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 0 0 
                                       f32_3 %238 = OpFMul %234 %237 
                                       f32_3 %239 = OpLoad %174 
                                       f32_3 %240 = OpFAdd %238 %239 
                                                      OpStore %174 %240 
                              Uniform f32_4* %241 = OpAccessChain %99 %100 %100 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                Input f32_4* %244 = OpAccessChain %30 %110 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 2 2 2 
                                       f32_3 %247 = OpFMul %243 %246 
                                       f32_3 %248 = OpLoad %174 
                                       f32_3 %249 = OpFAdd %247 %248 
                                                      OpStore %174 %249 
                              Uniform f32_4* %250 = OpAccessChain %99 %100 %129 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                Input f32_4* %253 = OpAccessChain %30 %110 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 3 3 3 
                                       f32_3 %256 = OpFMul %252 %255 
                                       f32_3 %257 = OpLoad %174 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore %174 %258 
                                       f32_3 %260 = OpLoad %139 
                                       f32_3 %261 = OpLoad %174 
                                       f32_3 %262 = OpFAdd %260 %261 
                                                      OpStore %259 %262 
                                       f32_3 %263 = OpLoad %139 
                                       f32_3 %264 = OpLoad %174 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_3 %266 = OpFAdd %263 %265 
                                                      OpStore %139 %266 
                                       f32_3 %267 = OpLoad %139 
                                       f32_3 %268 = OpLoad %139 
                                         f32 %269 = OpDot %267 %268 
                                                      OpStore %188 %269 
                                         f32 %270 = OpLoad %188 
                                         f32 %271 = OpExtInst %1 31 %270 
                                                      OpStore %188 %271 
                                         f32 %272 = OpLoad %188 
                                Uniform f32* %273 = OpAccessChain %99 %101 %210 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                                      OpStore %188 %275 
                                       f32_3 %276 = OpLoad %259 
                                       f32_3 %277 = OpFMul %276 %180 
                              Uniform f32_3* %278 = OpAccessChain %99 %110 
                                       f32_3 %279 = OpLoad %278 
                                       f32_3 %280 = OpFNegate %279 
                                       f32_3 %281 = OpFAdd %277 %280 
                                                      OpStore %139 %281 
                                       f32_3 %282 = OpLoad %139 
                                       f32_3 %283 = OpLoad %139 
                                         f32 %284 = OpDot %282 %283 
                                Private f32* %286 = OpAccessChain %139 %285 
                                                      OpStore %286 %284 
                                Private f32* %287 = OpAccessChain %139 %285 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 31 %288 
                                Private f32* %290 = OpAccessChain %139 %285 
                                                      OpStore %290 %289 
                                Private f32* %291 = OpAccessChain %139 %285 
                                         f32 %292 = OpLoad %291 
                                Uniform f32* %293 = OpAccessChain %99 %129 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFMul %292 %294 
                                Private f32* %296 = OpAccessChain %139 %285 
                                                      OpStore %296 %295 
                                         f32 %297 = OpLoad %188 
                                Private f32* %298 = OpAccessChain %139 %285 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFDiv %297 %299 
                                                      OpStore %188 %300 
                                         f32 %301 = OpLoad %188 
                                         f32 %302 = OpExtInst %1 40 %301 %221 
                                 Output f32* %303 = OpAccessChain %219 %101 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %94 
                                       f32_3 %305 = OpLoad %174 
                                       f32_3 %306 = OpFAdd %304 %305 
                                                      OpStore %139 %306 
                                       f32_3 %307 = OpLoad %94 
                                       f32_3 %308 = OpFNegate %307 
                                       f32_3 %309 = OpLoad %174 
                                       f32_3 %310 = OpFAdd %308 %309 
                                                      OpStore %94 %310 
                                       f32_3 %311 = OpLoad %94 
                                       f32_3 %312 = OpLoad %94 
                                         f32 %313 = OpDot %311 %312 
                                Private f32* %314 = OpAccessChain %94 %285 
                                                      OpStore %314 %313 
                                Private f32* %315 = OpAccessChain %94 %285 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpExtInst %1 31 %316 
                                Private f32* %318 = OpAccessChain %94 %285 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %94 %285 
                                         f32 %320 = OpLoad %319 
                                Uniform f32* %321 = OpAccessChain %99 %101 %210 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %320 %322 
                                Private f32* %324 = OpAccessChain %94 %285 
                                                      OpStore %324 %323 
                                       f32_3 %326 = OpLoad %139 
                                       f32_3 %327 = OpFMul %326 %180 
                              Uniform f32_3* %328 = OpAccessChain %99 %110 
                                       f32_3 %329 = OpLoad %328 
                                       f32_3 %330 = OpFNegate %329 
                                       f32_3 %331 = OpFAdd %327 %330 
                                                      OpStore %325 %331 
                                       f32_3 %332 = OpLoad %325 
                                       f32_3 %333 = OpLoad %325 
                                         f32 %334 = OpDot %332 %333 
                                Private f32* %335 = OpAccessChain %325 %285 
                                                      OpStore %335 %334 
                                Private f32* %336 = OpAccessChain %325 %285 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpExtInst %1 31 %337 
                                Private f32* %339 = OpAccessChain %325 %285 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %325 %285 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %99 %129 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFMul %341 %343 
                                Private f32* %345 = OpAccessChain %325 %285 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %94 %285 
                                         f32 %347 = OpLoad %346 
                                Private f32* %348 = OpAccessChain %325 %285 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFDiv %347 %349 
                                Private f32* %351 = OpAccessChain %94 %285 
                                                      OpStore %351 %350 
                                Private f32* %352 = OpAccessChain %94 %285 
                                         f32 %353 = OpLoad %352 
                                         f32 %354 = OpExtInst %1 40 %353 %221 
                                 Output f32* %355 = OpAccessChain %219 %100 
                                                      OpStore %355 %354 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %15 = OpFunction None %10 
                                Function i32* %14 = OpFunctionParameter 
                                              %16 = OpLabel 
                                 Output f32* %356 = OpAccessChain %219 %100 
                                         f32 %357 = OpLoad %356 
                                 Output f32* %358 = OpAccessChain %219 %100 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                Private f32* %361 = OpAccessChain %94 %285 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %94 %285 
                                         f32 %363 = OpLoad %362 
                                 Output f32* %364 = OpAccessChain %219 %100 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFAdd %363 %365 
                                Private f32* %367 = OpAccessChain %94 %285 
                                                      OpStore %367 %366 
                                Private f32* %372 = OpAccessChain %94 %285 
                                         f32 %373 = OpLoad %372 
                                         f32 %375 = OpFMul %373 %374 
                                 Output f32* %376 = OpAccessChain %371 %110 
                                                      OpStore %376 %375 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 399
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationEvaluation %4 "main" %12 %20 %139 %236 %301 %334 %344 %382 
                                                      OpExecutionMode %4 Triangles 
                                                      OpExecutionMode %4 SpacingFractionalOdd 
                                                      OpExecutionMode %4 VertexOrderCw 
                                                      OpDecorate %12 BuiltIn TessLevelInner 
                                                      OpDecorate %20 Location 20 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpMemberDecorate %60 0 Offset 60 
                                                      OpMemberDecorate %60 1 Offset 60 
                                                      OpMemberDecorate %60 2 Offset 60 
                                                      OpMemberDecorate %60 3 Offset 60 
                                                      OpMemberDecorate %60 4 Offset 60 
                                                      OpMemberDecorate %60 5 Offset 60 
                                                      OpMemberDecorate %60 6 Offset 60 
                                                      OpMemberDecorate %60 7 Offset 60 
                                                      OpMemberDecorate %60 8 Offset 60 
                                                      OpMemberDecorate %60 9 Offset 60 
                                                      OpMemberDecorate %60 10 Offset 60 
                                                      OpMemberDecorate %60 11 Offset 60 
                                                      OpMemberDecorate %60 12 Offset 60 
                                                      OpDecorate %60 Block 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpDecorate %96 DescriptorSet 96 
                                                      OpDecorate %96 Binding 96 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate %110 DescriptorSet 110 
                                                      OpDecorate %110 Binding 110 
                                                      OpDecorate %112 DescriptorSet 112 
                                                      OpDecorate %112 Binding 112 
                                                      OpDecorate %139 Location 139 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate %301 Location 301 
                                                      OpMemberDecorate %332 0 BuiltIn 332 
                                                      OpMemberDecorate %332 1 BuiltIn 332 
                                                      OpMemberDecorate %332 2 BuiltIn 332 
                                                      OpDecorate %332 Block 
                                                      OpDecorate %344 Location 344 
                                                      OpDecorate %382 Location 382 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 32 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypePointer Input %18 
                             Input f32_4[32]* %20 = OpVariable Input 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Input %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %42 = OpConstant 2 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                              %60 = OpTypeStruct %7 %7 %7 %7 %7 %57 %58 %59 %6 %6 %7 %6 %6 
                                              %61 = OpTypePointer Uniform %60 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32; f32;}* %62 = OpVariable Uniform 
                                          i32 %63 = OpConstant 10 
                                              %64 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 8 
                                              %79 = OpTypePointer Uniform %6 
                                          i32 %82 = OpConstant 9 
                                              %92 = OpTypePointer Private %6 
                                 Private f32* %93 = OpVariable Private 
                                              %94 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %95 = OpTypePointer UniformConstant %94 
         UniformConstant read_only Texture2D* %96 = OpVariable UniformConstant 
                                              %98 = OpTypeSampler 
                                              %99 = OpTypePointer UniformConstant %98 
                    UniformConstant sampler* %100 = OpVariable UniformConstant 
                                             %102 = OpTypeSampledImage %94 
                                         f32 %106 = OpConstant 3.674022E-40 
                                         u32 %108 = OpConstant 0 
        UniformConstant read_only Texture2D* %110 = OpVariable UniformConstant 
                    UniformConstant sampler* %112 = OpVariable UniformConstant 
                                         i32 %127 = OpConstant 6 
                              Private f32_4* %134 = OpVariable Private 
                                             %137 = OpTypeArray %10 %17 
                                             %138 = OpTypePointer Input %137 
                            Input f32_3[32]* %139 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         u32 %179 = OpConstant 2 
                                         u32 %187 = OpConstant 1 
                                Private f32* %189 = OpVariable Private 
                                         i32 %202 = OpConstant 11 
                                             %207 = OpTypePointer Private %10 
                              Private f32_3* %208 = OpVariable Private 
                                         f32 %222 = OpConstant 3.674022E-40 
                            Input f32_4[32]* %236 = OpVariable Input 
                                         i32 %256 = OpConstant 12 
                              Private f32_4* %274 = OpVariable Private 
                                         i32 %277 = OpConstant 5 
                                         i32 %296 = OpConstant 3 
                                             %300 = OpTypePointer Output %10 
                               Output f32_3* %301 = OpVariable Output 
                                         i32 %313 = OpConstant 7 
                                             %331 = OpTypeArray %6 %187 
                                             %332 = OpTypeStruct %7 %6 %331 
                                             %333 = OpTypePointer Output %332 
        Output struct {f32_4; f32; f32[1];}* %334 = OpVariable Output 
                                             %342 = OpTypePointer Output %7 
                               Output f32_3* %344 = OpVariable Output 
                               Output f32_3* %382 = OpVariable Output 
                                         i32 %383 = OpConstant 4 
                                             %393 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 1 1 
                                 Input f32_4* %24 = OpAccessChain %20 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                                        f32_2 %27 = OpFMul %15 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                                 Input f32_4* %31 = OpAccessChain %20 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_3 %34 = OpLoad %12 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 0 
                                        f32_2 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                                        f32_2 %39 = OpFAdd %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                 Input f32_4* %43 = OpAccessChain %20 %42 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_3 %46 = OpLoad %12 
                                        f32_2 %47 = OpVectorShuffle %46 %46 2 2 
                                        f32_2 %48 = OpFMul %45 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                                        f32_2 %51 = OpFAdd %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               Uniform f32_4* %65 = OpAccessChain %62 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_2 %67 = OpVectorShuffle %66 %66 0 1 
                                        f32_2 %68 = OpFMul %55 %67 
                               Uniform f32_4* %69 = OpAccessChain %62 %63 
                                        f32_4 %70 = OpLoad %69 
                                        f32_2 %71 = OpVectorShuffle %70 %70 2 3 
                                        f32_2 %72 = OpFAdd %68 %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %72 4 5 2 3 
                                                      OpStore %9 %74 
                               Uniform f32_4* %75 = OpAccessChain %62 %30 
                                        f32_4 %76 = OpLoad %75 
                                        f32_2 %77 = OpVectorShuffle %76 %76 1 1 
                                 Uniform f32* %80 = OpAccessChain %62 %78 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %83 = OpAccessChain %62 %82 
                                          f32 %84 = OpLoad %83 
                                        f32_2 %85 = OpCompositeConstruct %81 %84 
                                        f32_2 %86 = OpFMul %77 %85 
                                        f32_4 %87 = OpLoad %9 
                                        f32_2 %88 = OpVectorShuffle %87 %87 0 1 
                                        f32_2 %89 = OpFAdd %86 %88 
                                        f32_4 %90 = OpLoad %9 
                                        f32_4 %91 = OpVectorShuffle %90 %89 4 5 2 3 
                                                      OpStore %9 %91 
                          read_only Texture2D %97 = OpLoad %96 
                                     sampler %101 = OpLoad %100 
                  read_only Texture2DSampled %103 = OpSampledImage %97 %101 
                                       f32_4 %104 = OpLoad %9 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_4 %107 = OpImageSampleExplicitLod %103 %105 Lod %7 
                                         f32 %109 = OpCompositeExtract %107 0 
                                                      OpStore %93 %109 
                         read_only Texture2D %111 = OpLoad %110 
                                     sampler %113 = OpLoad %112 
                  read_only Texture2DSampled %114 = OpSampledImage %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
                                       f32_4 %117 = OpImageSampleExplicitLod %114 %116 Lod %7 
                                         f32 %118 = OpCompositeExtract %117 0 
                                Private f32* %119 = OpAccessChain %9 %108 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %9 %108 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpLoad %93 
                                         f32 %123 = OpFMul %121 %122 
                                Private f32* %124 = OpAccessChain %9 %108 
                                                      OpStore %124 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 0 0 
                              Uniform f32_4* %128 = OpAccessChain %62 %127 %22 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %126 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %9 %133 
                                       f32_3 %135 = OpLoad %12 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                                Input f32_3* %140 = OpAccessChain %139 %22 
                                       f32_3 %141 = OpLoad %140 
                                       f32_3 %142 = OpFMul %136 %141 
                                       f32_4 %143 = OpLoad %134 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %134 %144 
                                Input f32_3* %145 = OpAccessChain %139 %30 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpLoad %12 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 0 0 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %134 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %149 %151 
                                       f32_4 %153 = OpLoad %134 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %134 %154 
                                Input f32_3* %155 = OpAccessChain %139 %42 
                                       f32_3 %156 = OpLoad %155 
                                       f32_3 %157 = OpLoad %12 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %134 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %134 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %134 %164 
                                       f32_4 %166 = OpLoad %134 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                              Uniform f32_4* %168 = OpAccessChain %62 %127 %30 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %167 %170 
                                Private f32* %172 = OpAccessChain %165 %108 
                                                      OpStore %172 %171 
                                       f32_4 %173 = OpLoad %134 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                              Uniform f32_4* %175 = OpAccessChain %62 %127 %42 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %165 %179 
                                                      OpStore %180 %178 
                                       f32_4 %181 = OpLoad %134 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                              Uniform f32_4* %183 = OpAccessChain %62 %127 %22 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %182 %185 
                                Private f32* %188 = OpAccessChain %165 %187 
                                                      OpStore %188 %186 
                                       f32_4 %190 = OpLoad %165 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %165 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %191 %193 
                                                      OpStore %189 %194 
                                         f32 %195 = OpLoad %189 
                                         f32 %196 = OpExtInst %1 32 %195 
                                                      OpStore %189 %196 
                                Private f32* %197 = OpAccessChain %165 %187 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFNegate %198 
                                         f32 %200 = OpLoad %189 
                                         f32 %201 = OpFMul %199 %200 
                                Uniform f32* %203 = OpAccessChain %62 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFAdd %201 %204 
                                Private f32* %206 = OpAccessChain %134 %108 
                                                      OpStore %206 %205 
                                         f32 %209 = OpLoad %189 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_4 %211 = OpLoad %165 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFMul %210 %212 
                                                      OpStore %208 %213 
                                Private f32* %214 = OpAccessChain %134 %108 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpExtInst %1 4 %215 
                                Uniform f32* %217 = OpAccessChain %62 %202 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                         f32 %220 = OpFAdd %216 %219 
                                                      OpStore %189 %220 
                                         f32 %221 = OpLoad %189 
                                         f32 %223 = OpExtInst %1 43 %221 %106 %222 
                                                      OpStore %189 %223 
                                         f32 %224 = OpLoad %189 
                                         f32 %225 = OpFNegate %224 
                                         f32 %226 = OpFAdd %225 %222 
                                                      OpStore %189 %226 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                         f32 %229 = OpLoad %189 
                                       f32_3 %230 = OpCompositeConstruct %229 %229 %229 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_3 %234 = OpLoad %12 
                                       f32_4 %235 = OpVectorShuffle %234 %234 1 1 1 1 
                                Input f32_4* %237 = OpAccessChain %236 %22 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpFMul %235 %238 
                                                      OpStore %165 %239 
                                Input f32_4* %240 = OpAccessChain %236 %30 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpLoad %12 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpFMul %241 %243 
                                       f32_4 %245 = OpLoad %165 
                                       f32_4 %246 = OpFAdd %244 %245 
                                                      OpStore %165 %246 
                                Input f32_4* %247 = OpAccessChain %236 %42 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpLoad %12 
                                       f32_4 %250 = OpVectorShuffle %249 %249 2 2 2 2 
                                       f32_4 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %165 
                                       f32_4 %253 = OpFAdd %251 %252 
                                                      OpStore %165 %253 
                                       f32_4 %254 = OpLoad %9 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                Uniform f32* %257 = OpAccessChain %62 %256 
                                         f32 %258 = OpLoad %257 
                                Uniform f32* %259 = OpAccessChain %62 %256 
                                         f32 %260 = OpLoad %259 
                                Uniform f32* %261 = OpAccessChain %62 %256 
                                         f32 %262 = OpLoad %261 
                                       f32_3 %263 = OpCompositeConstruct %258 %260 %262 
                                         f32 %264 = OpCompositeExtract %263 0 
                                         f32 %265 = OpCompositeExtract %263 1 
                                         f32 %266 = OpCompositeExtract %263 2 
                                       f32_3 %267 = OpCompositeConstruct %264 %265 %266 
                                       f32_3 %268 = OpFMul %255 %267 
                                       f32_4 %269 = OpLoad %165 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %9 %273 
                                       f32_4 %275 = OpLoad %9 
                                       f32_4 %276 = OpVectorShuffle %275 %275 1 1 1 1 
                              Uniform f32_4* %278 = OpAccessChain %62 %277 %22 
                                       f32_4 %279 = OpLoad %278 
                                       f32_4 %280 = OpFMul %276 %279 
                                                      OpStore %274 %280 
                              Uniform f32_4* %281 = OpAccessChain %62 %277 %30 
                                       f32_4 %282 = OpLoad %281 
                                       f32_4 %283 = OpLoad %9 
                                       f32_4 %284 = OpVectorShuffle %283 %283 0 0 0 0 
                                       f32_4 %285 = OpFMul %282 %284 
                                       f32_4 %286 = OpLoad %274 
                                       f32_4 %287 = OpFAdd %285 %286 
                                                      OpStore %274 %287 
                              Uniform f32_4* %288 = OpAccessChain %62 %277 %42 
                                       f32_4 %289 = OpLoad %288 
                                       f32_4 %290 = OpLoad %9 
                                       f32_4 %291 = OpVectorShuffle %290 %290 2 2 2 2 
                                       f32_4 %292 = OpFMul %289 %291 
                                       f32_4 %293 = OpLoad %274 
                                       f32_4 %294 = OpFAdd %292 %293 
                                                      OpStore %9 %294 
                                       f32_4 %295 = OpLoad %9 
                              Uniform f32_4* %297 = OpAccessChain %62 %277 %296 
                                       f32_4 %298 = OpLoad %297 
                                       f32_4 %299 = OpFAdd %295 %298 
                                                      OpStore %274 %299 
                              Uniform f32_4* %302 = OpAccessChain %62 %277 %296 
                                       f32_4 %303 = OpLoad %302 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                       f32_4 %305 = OpLoad %165 
                                       f32_3 %306 = OpVectorShuffle %305 %305 3 3 3 
                                       f32_3 %307 = OpFMul %304 %306 
                                       f32_4 %308 = OpLoad %9 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_3 %310 = OpFAdd %307 %309 
                                                      OpStore %301 %310 
                                       f32_4 %311 = OpLoad %274 
                                       f32_4 %312 = OpVectorShuffle %311 %311 1 1 1 1 
                              Uniform f32_4* %314 = OpAccessChain %62 %313 %22 
                                       f32_4 %315 = OpLoad %314 
                                       f32_4 %316 = OpFMul %312 %315 
                                                      OpStore %9 %316 
                              Uniform f32_4* %317 = OpAccessChain %62 %313 %30 
                                       f32_4 %318 = OpLoad %317 
                                       f32_4 %319 = OpLoad %274 
                                       f32_4 %320 = OpVectorShuffle %319 %319 0 0 0 0 
                                       f32_4 %321 = OpFMul %318 %320 
                                       f32_4 %322 = OpLoad %9 
                                       f32_4 %323 = OpFAdd %321 %322 
                                                      OpStore %9 %323 
                              Uniform f32_4* %324 = OpAccessChain %62 %313 %42 
                                       f32_4 %325 = OpLoad %324 
                                       f32_4 %326 = OpLoad %274 
                                       f32_4 %327 = OpVectorShuffle %326 %326 2 2 2 2 
                                       f32_4 %328 = OpFMul %325 %327 
                                       f32_4 %329 = OpLoad %9 
                                       f32_4 %330 = OpFAdd %328 %329 
                                                      OpStore %9 %330 
                              Uniform f32_4* %335 = OpAccessChain %62 %313 %296 
                                       f32_4 %336 = OpLoad %335 
                                       f32_4 %337 = OpLoad %274 
                                       f32_4 %338 = OpVectorShuffle %337 %337 3 3 3 3 
                                       f32_4 %339 = OpFMul %336 %338 
                                       f32_4 %340 = OpLoad %9 
                                       f32_4 %341 = OpFAdd %339 %340 
                               Output f32_4* %343 = OpAccessChain %334 %30 
                                                      OpStore %343 %341 
                                       f32_3 %345 = OpLoad %208 
                                                      OpStore %344 %345 
                                Private f32* %346 = OpAccessChain %208 %187 
                                         f32 %347 = OpLoad %346 
                                Private f32* %348 = OpAccessChain %208 %187 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFMul %347 %349 
                                Private f32* %351 = OpAccessChain %9 %108 
                                                      OpStore %351 %350 
                                Private f32* %352 = OpAccessChain %208 %108 
                                         f32 %353 = OpLoad %352 
                                Private f32* %354 = OpAccessChain %208 %108 
                                         f32 %355 = OpLoad %354 
                                         f32 %356 = OpFMul %353 %355 
                                Private f32* %357 = OpAccessChain %9 %108 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpFNegate %358 
                                         f32 %360 = OpFAdd %356 %359 
                                Private f32* %361 = OpAccessChain %9 %108 
                                                      OpStore %361 %360 
                                       f32_3 %362 = OpLoad %208 
                                       f32_4 %363 = OpVectorShuffle %362 %362 1 2 2 0 
                                       f32_3 %364 = OpLoad %208 
                                       f32_4 %365 = OpVectorShuffle %364 %364 0 1 2 2 
                                       f32_4 %366 = OpFMul %363 %365 
                                                      OpStore %134 %366 
                              Uniform f32_4* %367 = OpAccessChain %62 %22 
                                       f32_4 %368 = OpLoad %367 
                                       f32_4 %369 = OpLoad %134 
                                         f32 %370 = OpDot %368 %369 
                                Private f32* %371 = OpAccessChain %165 %108 
                                                      OpStore %371 %370 
                              Uniform f32_4* %372 = OpAccessChain %62 %42 
                                       f32_4 %373 = OpLoad %372 
                                       f32_4 %374 = OpLoad %134 
                                         f32 %375 = OpDot %373 %374 
                                Private f32* %376 = OpAccessChain %165 %187 
                                                      OpStore %376 %375 
                              Uniform f32_4* %377 = OpAccessChain %62 %296 
                                       f32_4 %378 = OpLoad %377 
                                       f32_4 %379 = OpLoad %134 
                                         f32 %380 = OpDot %378 %379 
                                Private f32* %381 = OpAccessChain %165 %179 
                                                      OpStore %381 %380 
                              Uniform f32_4* %384 = OpAccessChain %62 %383 
                                       f32_4 %385 = OpLoad %384 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                       f32_4 %387 = OpLoad %9 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 0 0 
                                       f32_3 %389 = OpFMul %386 %388 
                                       f32_4 %390 = OpLoad %165 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpFAdd %389 %391 
                                                      OpStore %382 %392 
                                 Output f32* %394 = OpAccessChain %334 %30 %187 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFNegate %395 
                                 Output f32* %397 = OpAccessChain %334 %30 %187 
                                                      OpStore %397 %396 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 410
#extension GL_ARB_explicit_attrib_location : require

in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
in  vec4 in_TEXCOORD3;
in  vec4 in_COLOR0;
layout(location = 0) out vec4 vs_INTERNALTESSPOS0;
layout(location = 1) out vec4 vs_TANGENT0;
layout(location = 2) out vec3 vs_NORMAL0;
layout(location = 3) out vec4 vs_TEXCOORD0;
layout(location = 4) out vec4 vs_TEXCOORD1;
layout(location = 5) out vec4 vs_TEXCOORD2;
layout(location = 6) out vec4 vs_TEXCOORD3;
layout(location = 7) out vec4 vs_COLOR0;
void main()
{
    vs_INTERNALTESSPOS0 = in_POSITION0;
    vs_TANGENT0 = in_TANGENT0;
    vs_NORMAL0.xyz = in_NORMAL0.xyz;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD3;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Y_Mask;
uniform 	vec4 _Flamecolor2;
uniform 	vec4 _FlameColor;
uniform 	float _FresnelBias;
uniform 	float _FresnelScale;
uniform 	float _FresnelPower;
uniform 	float _Alpha;
UNITY_LOCATION(0) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform  samplerCube unity_SpecCube1;
layout(location = 0) in  vec3 ds_TEXCOORD0;
layout(location = 1) in  float ds_TEXCOORD3;
layout(location = 2) in  vec3 ds_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
bvec3 u_xlatb7;
vec3 u_xlat8;
bvec3 u_xlatb9;
vec3 u_xlat10;
float u_xlat30;
float u_xlat31;
float u_xlat32;
bool u_xlatb32;
float u_xlat33;
bool u_xlatb33;
void main()
{
    u_xlat0.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat31 = dot(ds_TEXCOORD0.xyz, ds_TEXCOORD0.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * ds_TEXCOORD0.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat32 = (-u_xlat31) + 1.0;
    u_xlat32 = log2(u_xlat32);
    u_xlat32 = u_xlat32 * _FresnelPower;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = _FresnelScale * u_xlat32 + _FresnelBias;
    u_xlat3.xyz = (-_Flamecolor2.xyz) + _FlameColor.xyz;
    u_xlat3.xyz = vec3(u_xlat32) * u_xlat3.xyz + _Flamecolor2.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(5.0, 5.0, 5.0));
    u_xlat33 = (-ds_TEXCOORD0.y) + _Y_Mask;
    u_xlat33 = abs(u_xlat33) + (-_Y_Mask);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat32 = u_xlat32 * u_xlat33;
    SV_Target0.w = u_xlat32 * _Alpha;
    u_xlat32 = dot((-u_xlat1.xyz), ds_TEXCOORD0.xyz);
    u_xlat32 = u_xlat32 + u_xlat32;
    u_xlat1.xyz = ds_TEXCOORD0.xyz * (-vec3(u_xlat32)) + (-u_xlat1.xyz);
    u_xlatb32 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb32){
        u_xlat32 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat32 = inversesqrt(u_xlat32);
        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat32);
        u_xlat5.xyz = (-ds_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
        u_xlat6.xyz = (-ds_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat5;
            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
            u_xlat5 = hlslcc_movcTemp;
        }
        u_xlat32 = min(u_xlat5.y, u_xlat5.x);
        u_xlat32 = min(u_xlat5.z, u_xlat32);
        u_xlat5.xyz = ds_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat32) + u_xlat5.xyz;
    } else {
        u_xlat4.xyz = u_xlat1.xyz;
    }
    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, 6.0);
    u_xlat32 = u_xlat4.w + -1.0;
    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat32 + 1.0;
    u_xlat32 = log2(u_xlat32);
    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat32);
    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb33){
        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb33){
            u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat33 = inversesqrt(u_xlat33);
            u_xlat6.xyz = u_xlat1.xyz * vec3(u_xlat33);
            u_xlat7.xyz = (-ds_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
            u_xlat8.xyz = (-ds_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat7;
                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
                u_xlat7 = hlslcc_movcTemp;
            }
            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
            u_xlat33 = min(u_xlat7.z, u_xlat33);
            u_xlat7.xyz = ds_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
        }
        u_xlat6 = textureLod(unity_SpecCube1, u_xlat1.xyz, 6.0);
        u_xlat1.x = u_xlat6.w + -1.0;
        u_xlat1.x = unity_SpecCube1_HDR.w * u_xlat1.x + 1.0;
        u_xlat1.x = log2(u_xlat1.x);
        u_xlat1.x = u_xlat1.x * unity_SpecCube1_HDR.y;
        u_xlat1.x = exp2(u_xlat1.x);
        u_xlat1.x = u_xlat1.x * unity_SpecCube1_HDR.x;
        u_xlat1.xyz = u_xlat6.xyz * u_xlat1.xxx;
        u_xlat4.xyz = vec3(u_xlat32) * u_xlat4.xyz + (-u_xlat1.xyz);
        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat1.xyz;
    }
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10.x = abs(u_xlat31) + u_xlat30;
    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
    u_xlat10.x = 0.5 / u_xlat10.x;
    u_xlat10.x = u_xlat10.x * 0.999999881;
    u_xlat10.x = u_xlat30 * u_xlat10.x;
    u_xlat10.xyz = u_xlat10.xxx * _LightColor0.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat1.x = u_xlat0.x * u_xlat0.x;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.959999979 + 0.0399999991;
    u_xlat1.xyz = u_xlat5.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat31 = -abs(u_xlat31) + 1.0;
    u_xlat2.x = u_xlat31 * u_xlat31;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat31 = u_xlat31 * u_xlat2.x;
    u_xlat31 = u_xlat31 * 2.23517418e-08 + 0.0399999991;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    u_xlat30 = ds_TEXCOORD3 * unity_FogParams.z + unity_FogParams.w;
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
    return;
}

#endif
#ifdef HULL
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(vertices=3) out;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	float _EdgeLength;
layout(location = 0) in vec4 vs_INTERNALTESSPOS0[];
layout(location = 0) out vec4 hs_INTERNALTESSPOS0[];
layout(location = 1) in vec4 vs_TANGENT0[];
layout(location = 1) out vec4 hs_TANGENT0[];
layout(location = 2) in vec3 vs_NORMAL0[];
layout(location = 2) out vec3 hs_NORMAL0[];
layout(location = 3) in vec4 vs_TEXCOORD0[];
layout(location = 3) out vec4 hs_TEXCOORD0[];
layout(location = 4) in vec4 vs_TEXCOORD1[];
layout(location = 4) out vec4 hs_TEXCOORD1[];
layout(location = 5) in vec4 vs_TEXCOORD2[];
layout(location = 5) out vec4 hs_TEXCOORD2[];
layout(location = 6) in vec4 vs_TEXCOORD3[];
layout(location = 6) out vec4 hs_TEXCOORD3[];
layout(location = 7) in vec4 vs_COLOR0[];
layout(location = 7) out vec4 hs_COLOR0[];
void passthrough_ctrl_points()
{
    hs_INTERNALTESSPOS0[gl_InvocationID] = vs_INTERNALTESSPOS0[gl_InvocationID];
    hs_TANGENT0[gl_InvocationID] = vs_TANGENT0[gl_InvocationID];
    hs_NORMAL0[gl_InvocationID] = vs_NORMAL0[gl_InvocationID];
    hs_TEXCOORD0[gl_InvocationID] = vs_TEXCOORD0[gl_InvocationID];
    hs_TEXCOORD1[gl_InvocationID] = vs_TEXCOORD1[gl_InvocationID];
    hs_TEXCOORD2[gl_InvocationID] = vs_TEXCOORD2[gl_InvocationID];
    hs_TEXCOORD3[gl_InvocationID] = vs_TEXCOORD3[gl_InvocationID];
    hs_COLOR0[gl_InvocationID] = vs_COLOR0[gl_InvocationID];
}
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
float u_xlat13;
void fork_phase2(int phaseInstanceID)
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[1].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[1].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[2].www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _EdgeLength;
    u_xlat2.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _ScreenParams.y;
    u_xlat12 = u_xlat13 / u_xlat12;
    gl_TessLevelOuter[0] = max(u_xlat12, 1.0);
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[0].www + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _ScreenParams.y;
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _EdgeLength;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    gl_TessLevelOuter[1] = max(u_xlat12, 1.0);
    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _ScreenParams.y;
    u_xlat4.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _EdgeLength;
    u_xlat0.x = u_xlat0.x / u_xlat4.x;
    gl_TessLevelOuter[2] = max(u_xlat0.x, 1.0);
}
void join_phase3(int phaseInstanceID)
{
    u_xlat0.x = gl_TessLevelOuter[2] + gl_TessLevelOuter[2];
    u_xlat0.x = u_xlat0.x + gl_TessLevelOuter[2];
    gl_TessLevelInner[0] = u_xlat0.x * 0.333333343;
}
void main()
{
    passthrough_ctrl_points();
    barrier();
    if (gl_InvocationID == 0)
    {
        fork_phase2(0);
        join_phase3(0);
    }
}

#endif
#ifdef DOMAIN
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(ccw) in;
layout(fractional_odd_spacing) in;
layout(triangles) in;
uniform 	vec4 _Time;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _u;
uniform 	float _v;
uniform 	vec4 _Flamenoise_ST;
uniform 	float _Y_Mask;
uniform 	float _FlameHeight;
UNITY_LOCATION(2) uniform  sampler2D _FlameWave;
UNITY_LOCATION(3) uniform  sampler2D _Flamenoise;
layout(location = 0) in  vec4 hs_INTERNALTESSPOS0 [];
layout(location = 2) in  vec3 hs_NORMAL0 [];
layout(location = 3) in  vec4 hs_TEXCOORD0 [];
layout(location = 0) out vec3 ds_TEXCOORD0;
layout(location = 1) out float ds_TEXCOORD3;
layout(location = 2) out vec3 ds_TEXCOORD1;
layout(location = 3) out vec3 ds_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = gl_TessCoord.yy * hs_TEXCOORD0[1].xy;
    u_xlat0.xy = hs_TEXCOORD0[0].xy * gl_TessCoord.xx + u_xlat0.xy;
    u_xlat0.xy = hs_TEXCOORD0[2].xy * gl_TessCoord.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _Flamenoise_ST.xy + _Flamenoise_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_u, _v) + u_xlat0.xy;
    u_xlat8 = textureLod(_FlameWave, u_xlat0.xy, 0.0).x;
    u_xlat0.x = textureLod(_Flamenoise, u_xlat0.xy, 0.0).x;
    u_xlat0.x = u_xlat0.x * u_xlat8;
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat1.xyz = gl_TessCoord.yyy * hs_NORMAL0[1].xyz;
    u_xlat1.xyz = hs_NORMAL0[0].xyz * gl_TessCoord.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hs_NORMAL0[2].xyz * gl_TessCoord.zzz + u_xlat1.xyz;
    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.x = (-u_xlat2.y) * u_xlat12 + _Y_Mask;
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = abs(u_xlat1.x) + (-_Y_Mask);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
    u_xlat2 = gl_TessCoord.yyyy * hs_INTERNALTESSPOS0[1];
    u_xlat2 = hs_INTERNALTESSPOS0[0] * gl_TessCoord.xxxx + u_xlat2;
    u_xlat2 = hs_INTERNALTESSPOS0[2] * gl_TessCoord.zzzz + u_xlat2;
    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_FlameHeight, _FlameHeight, _FlameHeight)) + u_xlat2.xyz;
    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
    u_xlat3 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    ds_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat2.www + u_xlat0.xyz;
    u_xlat0 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat0;
    gl_Position = u_xlat0;
    ds_TEXCOORD3 = u_xlat0.z;
    ds_TEXCOORD0.xyz = u_xlat5.xyz;
    u_xlat0.x = u_xlat5.y * u_xlat5.y;
    u_xlat0.x = u_xlat5.x * u_xlat5.x + (-u_xlat0.x);
    u_xlat1 = u_xlat5.yzzx * u_xlat5.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    ds_TEXCOORD2.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 38
; Schema: 0
                               OpCapability Shader 
                        %1 = OpExtInstImport "GLSL.std.450" 
                               OpMemoryModel Logical GLSL450 
                               OpEntryPoint Vertex %4 "main" %9 %11 %13 %14 %18 %20 %22 %23 %25 %26 %28 %29 %31 %32 %34 %35 
                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                               OpDecorate %9 Location 9 
                               OpDecorate %11 Location 11 
                               OpDecorate %13 Location 13 
                               OpDecorate %14 Location 14 
                               OpDecorate %18 Location 18 
                               OpDecorate %20 Location 20 
                               OpDecorate vs_TEXCOORD0 Location 22 
                               OpDecorate %23 Location 23 
                               OpDecorate vs_TEXCOORD1 Location 25 
                               OpDecorate %26 Location 26 
                               OpDecorate vs_TEXCOORD2 Location 28 
                               OpDecorate %29 Location 29 
                               OpDecorate vs_TEXCOORD3 Location 31 
                               OpDecorate %32 Location 32 
                               OpDecorate %34 Location 34 
                               OpDecorate %35 Location 35 
                        %2 = OpTypeVoid 
                        %3 = OpTypeFunction %2 
                        %6 = OpTypeFloat 32 
                        %7 = OpTypeVector %6 4 
                        %8 = OpTypePointer Output %7 
          Output f32_4* %9 = OpVariable Output 
                       %10 = OpTypePointer Input %7 
          Input f32_4* %11 = OpVariable Input 
         Output f32_4* %13 = OpVariable Output 
          Input f32_4* %14 = OpVariable Input 
                       %16 = OpTypeVector %6 3 
                       %17 = OpTypePointer Output %16 
         Output f32_3* %18 = OpVariable Output 
                       %19 = OpTypePointer Input %16 
          Input f32_3* %20 = OpVariable Input 
Output f32_4* vs_TEXCOORD0 = OpVariable Output 
          Input f32_4* %23 = OpVariable Input 
Output f32_4* vs_TEXCOORD1 = OpVariable Output 
          Input f32_4* %26 = OpVariable Input 
Output f32_4* vs_TEXCOORD2 = OpVariable Output 
          Input f32_4* %29 = OpVariable Input 
Output f32_4* vs_TEXCOORD3 = OpVariable Output 
          Input f32_4* %32 = OpVariable Input 
         Output f32_4* %34 = OpVariable Output 
          Input f32_4* %35 = OpVariable Input 
                   void %4 = OpFunction None %3 
                        %5 = OpLabel 
                 f32_4 %12 = OpLoad %11 
                               OpStore %9 %12 
                 f32_4 %15 = OpLoad %14 
                               OpStore %13 %15 
                 f32_3 %21 = OpLoad %20 
                               OpStore %18 %21 
                 f32_4 %24 = OpLoad %23 
                               OpStore vs_TEXCOORD0 %24 
                 f32_4 %27 = OpLoad %26 
                               OpStore vs_TEXCOORD1 %27 
                 f32_4 %30 = OpLoad %29 
                               OpStore vs_TEXCOORD2 %30 
                 f32_4 %33 = OpLoad %32 
                               OpStore vs_TEXCOORD3 %33 
                 f32_4 %36 = OpLoad %35 
                               OpStore %34 %36 
                               OpReturn
                               OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 685
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %37 %129 %642 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpMemberDecorate %15 16 Offset 15 
                                                      OpMemberDecorate %15 17 Offset 15 
                                                      OpMemberDecorate %15 18 Offset 15 
                                                      OpMemberDecorate %15 19 Offset 15 
                                                      OpMemberDecorate %15 20 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %37 Location 37 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %287 DescriptorSet 287 
                                                      OpDecorate %287 Binding 287 
                                                      OpDecorate %291 DescriptorSet 291 
                                                      OpDecorate %291 Binding 291 
                                                      OpDecorate %442 DescriptorSet 442 
                                                      OpDecorate %442 Binding 442 
                                                      OpDecorate %642 Location 642 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeStruct %7 %14 %14 %14 %14 %14 %14 %14 %14 %14 %14 %14 %14 %14 %6 %14 %14 %6 %6 %6 %6 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32_4; f32_4; f32; f32; f32; f32;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %7 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %25 = OpVariable Private 
                               Private f32_3* %31 = OpVariable Private 
                                 Private f32* %36 = OpVariable Private 
                                 Input f32_3* %37 = OpVariable Input 
                               Private f32_3* %43 = OpVariable Private 
                                 Private f32* %51 = OpVariable Private 
                                          f32 %54 = OpConstant 3.674022E-40 
                                          i32 %59 = OpConstant 19 
                                              %60 = OpTypePointer Uniform %6 
                                          i32 %66 = OpConstant 18 
                                          i32 %71 = OpConstant 17 
                               Private f32_3* %75 = OpVariable Private 
                                          i32 %76 = OpConstant 15 
                                              %77 = OpTypePointer Uniform %14 
                                          i32 %82 = OpConstant 16 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                         f32 %100 = OpConstant 3.674022E-40 
                                       f32_3 %101 = OpConstantComposite %100 %100 %100 
                                Private f32* %103 = OpVariable Private 
                                             %104 = OpTypeInt 32 0 
                                         u32 %105 = OpConstant 1 
                                             %106 = OpTypePointer Input %6 
                                         i32 %110 = OpConstant 14 
                                             %128 = OpTypePointer Output %14 
                               Output f32_4* %129 = OpVariable Output 
                                         i32 %131 = OpConstant 20 
                                         u32 %135 = OpConstant 3 
                                             %136 = OpTypePointer Output %6 
                                             %153 = OpTypeBool 
                                             %154 = OpTypePointer Private %153 
                               Private bool* %155 = OpVariable Private 
                                         i32 %156 = OpConstant 7 
                                             %168 = OpTypePointer Private %14 
                              Private f32_4* %169 = OpVariable Private 
                              Private f32_3* %176 = OpVariable Private 
                                         i32 %179 = OpConstant 5 
                              Private f32_4* %188 = OpVariable Private 
                                         i32 %191 = OpConstant 6 
                                             %205 = OpTypeVector %153 3 
                                             %206 = OpTypePointer Private %205 
                             Private bool_3* %207 = OpVariable Private 
                                       f32_4 %208 = OpConstantComposite %96 %96 %96 %96 
                                             %211 = OpTypeVector %153 4 
                                             %214 = OpTypePointer Function %7 
                                         u32 %217 = OpConstant 0 
                                             %220 = OpTypePointer Function %6 
                                         u32 %243 = OpConstant 2 
                                             %285 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %286 = OpTypePointer UniformConstant %285 
      UniformConstant read_only TextureCube* %287 = OpVariable UniformConstant 
                                             %289 = OpTypeSampler 
                                             %290 = OpTypePointer UniformConstant %289 
                    UniformConstant sampler* %291 = OpVariable UniformConstant 
                                             %293 = OpTypeSampledImage %285 
                                         f32 %297 = OpConstant 3.674022E-40 
                                         f32 %301 = OpConstant 3.674022E-40 
                                         i32 %303 = OpConstant 8 
                               Private bool* %326 = OpVariable Private 
                                         f32 %329 = OpConstant 3.674022E-40 
                                         i32 %334 = OpConstant 11 
                              Private f32_3* %352 = OpVariable Private 
                                         i32 %355 = OpConstant 9 
                              Private f32_3* %364 = OpVariable Private 
                                         i32 %367 = OpConstant 10 
                             Private bool_3* %376 = OpVariable Private 
      UniformConstant read_only TextureCube* %442 = OpVariable UniformConstant 
                                         i32 %452 = OpConstant 12 
                                         i32 %507 = OpConstant 2 
                                         f32 %516 = OpConstant 3.674022E-40 
                              Private f32_3* %541 = OpVariable Private 
                                         f32 %549 = OpConstant 3.674022E-40 
                                         f32 %552 = OpConstant 3.674022E-40 
                                         f32 %564 = OpConstant 3.674022E-40 
                                         i32 %569 = OpConstant 13 
                                         f32 %599 = OpConstant 3.674022E-40 
                                         f32 %601 = OpConstant 3.674022E-40 
                                       f32_3 %605 = OpConstantComposite %552 %552 %552 
                                         f32 %626 = OpConstant 3.674022E-40 
                                  Input f32* %642 = OpVariable Input 
                                         i32 %644 = OpConstant 1 
                                         i32 %658 = OpConstant 4 
                                         i32 %668 = OpConstant 3 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %215 = OpVariable Function 
                               Function f32* %221 = OpVariable Function 
                               Function f32* %233 = OpVariable Function 
                               Function f32* %246 = OpVariable Function 
                             Function f32_3* %381 = OpVariable Function 
                               Function f32* %385 = OpVariable Function 
                               Function f32* %397 = OpVariable Function 
                               Function f32* %409 = OpVariable Function 
                                        f32_3 %12 = OpLoad %11 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %13 %22 
                                                      OpStore %9 %23 
                                        f32_3 %26 = OpLoad %9 
                                        f32_3 %27 = OpLoad %9 
                                          f32 %28 = OpDot %26 %27 
                                                      OpStore %25 %28 
                                          f32 %29 = OpLoad %25 
                                          f32 %30 = OpExtInst %1 32 %29 
                                                      OpStore %25 %30 
                                          f32 %32 = OpLoad %25 
                                        f32_3 %33 = OpCompositeConstruct %32 %32 %32 
                                        f32_3 %34 = OpLoad %9 
                                        f32_3 %35 = OpFMul %33 %34 
                                                      OpStore %31 %35 
                                        f32_3 %38 = OpLoad %37 
                                        f32_3 %39 = OpLoad %37 
                                          f32 %40 = OpDot %38 %39 
                                                      OpStore %36 %40 
                                          f32 %41 = OpLoad %36 
                                          f32 %42 = OpExtInst %1 32 %41 
                                                      OpStore %36 %42 
                                          f32 %44 = OpLoad %36 
                                        f32_3 %45 = OpCompositeConstruct %44 %44 %44 
                                        f32_3 %46 = OpLoad %37 
                                        f32_3 %47 = OpFMul %45 %46 
                                                      OpStore %43 %47 
                                        f32_3 %48 = OpLoad %43 
                                        f32_3 %49 = OpLoad %31 
                                          f32 %50 = OpDot %48 %49 
                                                      OpStore %36 %50 
                                          f32 %52 = OpLoad %36 
                                          f32 %53 = OpFNegate %52 
                                          f32 %55 = OpFAdd %53 %54 
                                                      OpStore %51 %55 
                                          f32 %56 = OpLoad %51 
                                          f32 %57 = OpExtInst %1 30 %56 
                                                      OpStore %51 %57 
                                          f32 %58 = OpLoad %51 
                                 Uniform f32* %61 = OpAccessChain %17 %59 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFMul %58 %62 
                                                      OpStore %51 %63 
                                          f32 %64 = OpLoad %51 
                                          f32 %65 = OpExtInst %1 29 %64 
                                                      OpStore %51 %65 
                                 Uniform f32* %67 = OpAccessChain %17 %66 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpLoad %51 
                                          f32 %70 = OpFMul %68 %69 
                                 Uniform f32* %72 = OpAccessChain %17 %71 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFAdd %70 %73 
                                                      OpStore %51 %74 
                               Uniform f32_4* %78 = OpAccessChain %17 %76 
                                        f32_4 %79 = OpLoad %78 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 1 2 
                                        f32_3 %81 = OpFNegate %80 
                               Uniform f32_4* %83 = OpAccessChain %17 %82 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFAdd %81 %85 
                                                      OpStore %75 %86 
                                          f32 %87 = OpLoad %51 
                                        f32_3 %88 = OpCompositeConstruct %87 %87 %87 
                                        f32_3 %89 = OpLoad %75 
                                        f32_3 %90 = OpFMul %88 %89 
                               Uniform f32_4* %91 = OpAccessChain %17 %76 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFAdd %90 %93 
                                                      OpStore %75 %94 
                                        f32_3 %95 = OpLoad %75 
                                        f32_3 %98 = OpExtInst %1 40 %95 %97 
                                                      OpStore %75 %98 
                                        f32_3 %99 = OpLoad %75 
                                       f32_3 %102 = OpExtInst %1 37 %99 %101 
                                                      OpStore %75 %102 
                                  Input f32* %107 = OpAccessChain %37 %105 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFNegate %108 
                                Uniform f32* %111 = OpAccessChain %17 %110 
                                         f32 %112 = OpLoad %111 
                                         f32 %113 = OpFAdd %109 %112 
                                                      OpStore %103 %113 
                                         f32 %114 = OpLoad %103 
                                         f32 %115 = OpExtInst %1 4 %114 
                                Uniform f32* %116 = OpAccessChain %17 %110 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                         f32 %119 = OpFAdd %115 %118 
                                                      OpStore %103 %119 
                                         f32 %120 = OpLoad %103 
                                         f32 %121 = OpExtInst %1 43 %120 %96 %54 
                                                      OpStore %103 %121 
                                         f32 %122 = OpLoad %103 
                                         f32 %123 = OpFNegate %122 
                                         f32 %124 = OpFAdd %123 %54 
                                                      OpStore %103 %124 
                                         f32 %125 = OpLoad %51 
                                         f32 %126 = OpLoad %103 
                                         f32 %127 = OpFMul %125 %126 
                                                      OpStore %51 %127 
                                         f32 %130 = OpLoad %51 
                                Uniform f32* %132 = OpAccessChain %17 %131 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFMul %130 %133 
                                 Output f32* %137 = OpAccessChain %129 %135 
                                                      OpStore %137 %134 
                                       f32_3 %138 = OpLoad %31 
                                       f32_3 %139 = OpFNegate %138 
                                       f32_3 %140 = OpLoad %37 
                                         f32 %141 = OpDot %139 %140 
                                                      OpStore %51 %141 
                                         f32 %142 = OpLoad %51 
                                         f32 %143 = OpLoad %51 
                                         f32 %144 = OpFAdd %142 %143 
                                                      OpStore %51 %144 
                                       f32_3 %145 = OpLoad %37 
                                         f32 %146 = OpLoad %51 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_3 %148 = OpFNegate %147 
                                       f32_3 %149 = OpFMul %145 %148 
                                       f32_3 %150 = OpLoad %31 
                                       f32_3 %151 = OpFNegate %150 
                                       f32_3 %152 = OpFAdd %149 %151 
                                                      OpStore %31 %152 
                                Uniform f32* %157 = OpAccessChain %17 %156 %135 
                                         f32 %158 = OpLoad %157 
                                        bool %159 = OpFOrdLessThan %96 %158 
                                                      OpStore %155 %159 
                                        bool %160 = OpLoad %155 
                                                      OpSelectionMerge %162 None 
                                                      OpBranchConditional %160 %161 %281 
                                             %161 = OpLabel 
                                       f32_3 %163 = OpLoad %31 
                                       f32_3 %164 = OpLoad %31 
                                         f32 %165 = OpDot %163 %164 
                                                      OpStore %51 %165 
                                         f32 %166 = OpLoad %51 
                                         f32 %167 = OpExtInst %1 32 %166 
                                                      OpStore %51 %167 
                                       f32_3 %170 = OpLoad %31 
                                         f32 %171 = OpLoad %51 
                                       f32_3 %172 = OpCompositeConstruct %171 %171 %171 
                                       f32_3 %173 = OpFMul %170 %172 
                                       f32_4 %174 = OpLoad %169 
                                       f32_4 %175 = OpVectorShuffle %174 %173 4 5 6 3 
                                                      OpStore %169 %175 
                                       f32_3 %177 = OpLoad %11 
                                       f32_3 %178 = OpFNegate %177 
                              Uniform f32_4* %180 = OpAccessChain %17 %179 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFAdd %178 %182 
                                                      OpStore %176 %183 
                                       f32_3 %184 = OpLoad %176 
                                       f32_4 %185 = OpLoad %169 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFDiv %184 %186 
                                                      OpStore %176 %187 
                                       f32_3 %189 = OpLoad %11 
                                       f32_3 %190 = OpFNegate %189 
                              Uniform f32_4* %192 = OpAccessChain %17 %191 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %195 = OpFAdd %190 %194 
                                       f32_4 %196 = OpLoad %188 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
                                                      OpStore %188 %197 
                                       f32_4 %198 = OpLoad %188 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_4 %200 = OpLoad %169 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFDiv %199 %201 
                                       f32_4 %203 = OpLoad %188 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 6 3 
                                                      OpStore %188 %204 
                                       f32_4 %209 = OpLoad %169 
                                       f32_4 %210 = OpVectorShuffle %209 %209 0 1 2 0 
                                      bool_4 %212 = OpFOrdLessThan %208 %210 
                                      bool_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                                      OpStore %207 %213 
                                       f32_3 %216 = OpLoad %176 
                                                      OpStore %215 %216 
                               Private bool* %218 = OpAccessChain %207 %217 
                                        bool %219 = OpLoad %218 
                                                      OpSelectionMerge %223 None 
                                                      OpBranchConditional %219 %222 %226 
                                             %222 = OpLabel 
                                Private f32* %224 = OpAccessChain %176 %217 
                                         f32 %225 = OpLoad %224 
                                                      OpStore %221 %225 
                                                      OpBranch %223 
                                             %226 = OpLabel 
                                Private f32* %227 = OpAccessChain %188 %217 
                                         f32 %228 = OpLoad %227 
                                                      OpStore %221 %228 
                                                      OpBranch %223 
                                             %223 = OpLabel 
                                         f32 %229 = OpLoad %221 
                               Function f32* %230 = OpAccessChain %215 %217 
                                                      OpStore %230 %229 
                               Private bool* %231 = OpAccessChain %207 %105 
                                        bool %232 = OpLoad %231 
                                                      OpSelectionMerge %235 None 
                                                      OpBranchConditional %232 %234 %238 
                                             %234 = OpLabel 
                                Private f32* %236 = OpAccessChain %176 %105 
                                         f32 %237 = OpLoad %236 
                                                      OpStore %233 %237 
                                                      OpBranch %235 
                                             %238 = OpLabel 
                                Private f32* %239 = OpAccessChain %188 %105 
                                         f32 %240 = OpLoad %239 
                                                      OpStore %233 %240 
                                                      OpBranch %235 
                                             %235 = OpLabel 
                                         f32 %241 = OpLoad %233 
                               Function f32* %242 = OpAccessChain %215 %105 
                                                      OpStore %242 %241 
                               Private bool* %244 = OpAccessChain %207 %243 
                                        bool %245 = OpLoad %244 
                                                      OpSelectionMerge %248 None 
                                                      OpBranchConditional %245 %247 %251 
                                             %247 = OpLabel 
                                Private f32* %249 = OpAccessChain %176 %243 
                                         f32 %250 = OpLoad %249 
                                                      OpStore %246 %250 
                                                      OpBranch %248 
                                             %251 = OpLabel 
                                Private f32* %252 = OpAccessChain %188 %243 
                                         f32 %253 = OpLoad %252 
                                                      OpStore %246 %253 
                                                      OpBranch %248 
                                             %248 = OpLabel 
                                         f32 %254 = OpLoad %246 
                               Function f32* %255 = OpAccessChain %215 %243 
                                                      OpStore %255 %254 
                                       f32_3 %256 = OpLoad %215 
                                                      OpStore %176 %256 
                                Private f32* %257 = OpAccessChain %176 %105 
                                         f32 %258 = OpLoad %257 
                                Private f32* %259 = OpAccessChain %176 %217 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpExtInst %1 37 %258 %260 
                                                      OpStore %51 %261 
                                Private f32* %262 = OpAccessChain %176 %243 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpLoad %51 
                                         f32 %265 = OpExtInst %1 37 %263 %264 
                                                      OpStore %51 %265 
                                       f32_3 %266 = OpLoad %11 
                              Uniform f32_4* %267 = OpAccessChain %17 %156 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFNegate %269 
                                       f32_3 %271 = OpFAdd %266 %270 
                                                      OpStore %176 %271 
                                       f32_4 %272 = OpLoad %169 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                         f32 %274 = OpLoad %51 
                                       f32_3 %275 = OpCompositeConstruct %274 %274 %274 
                                       f32_3 %276 = OpFMul %273 %275 
                                       f32_3 %277 = OpLoad %176 
                                       f32_3 %278 = OpFAdd %276 %277 
                                       f32_4 %279 = OpLoad %169 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %169 %280 
                                                      OpBranch %162 
                                             %281 = OpLabel 
                                       f32_3 %282 = OpLoad %31 
                                       f32_4 %283 = OpLoad %169 
                                       f32_4 %284 = OpVectorShuffle %283 %282 4 5 6 3 
                                                      OpStore %169 %284 
                                                      OpBranch %162 
                                             %162 = OpLabel 
                       read_only TextureCube %288 = OpLoad %287 
                                     sampler %292 = OpLoad %291 
                read_only TextureCubeSampled %294 = OpSampledImage %288 %292 
                                       f32_4 %295 = OpLoad %169 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_4 %298 = OpImageSampleExplicitLod %294 %296 Lod %14 
                                                      OpStore %169 %298 
                                Private f32* %299 = OpAccessChain %169 %135 
                                         f32 %300 = OpLoad %299 
                                         f32 %302 = OpFAdd %300 %301 
                                                      OpStore %51 %302 
                                Uniform f32* %304 = OpAccessChain %17 %303 %135 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpLoad %51 
                                         f32 %307 = OpFMul %305 %306 
                                         f32 %308 = OpFAdd %307 %54 
                                                      OpStore %51 %308 
                                         f32 %309 = OpLoad %51 
                                         f32 %310 = OpExtInst %1 30 %309 
                                                      OpStore %51 %310 
                                         f32 %311 = OpLoad %51 
                                Uniform f32* %312 = OpAccessChain %17 %303 %105 
                                         f32 %313 = OpLoad %312 
                                         f32 %314 = OpFMul %311 %313 
                                                      OpStore %51 %314 
                                         f32 %315 = OpLoad %51 
                                         f32 %316 = OpExtInst %1 29 %315 
                                                      OpStore %51 %316 
                                         f32 %317 = OpLoad %51 
                                Uniform f32* %318 = OpAccessChain %17 %303 %217 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFMul %317 %319 
                                                      OpStore %51 %320 
                                       f32_4 %321 = OpLoad %169 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                         f32 %323 = OpLoad %51 
                                       f32_3 %324 = OpCompositeConstruct %323 %323 %323 
                                       f32_3 %325 = OpFMul %322 %324 
                                                      OpStore %176 %325 
                                Uniform f32* %327 = OpAccessChain %17 %191 %135 
                                         f32 %328 = OpLoad %327 
                                        bool %330 = OpFOrdLessThan %328 %329 
                                                      OpStore %326 %330 
                                        bool %331 = OpLoad %326 
                                                      OpSelectionMerge %333 None 
                                                      OpBranchConditional %331 %332 %333 
                                             %332 = OpLabel 
                                Uniform f32* %335 = OpAccessChain %17 %334 %135 
                                         f32 %336 = OpLoad %335 
                                        bool %337 = OpFOrdLessThan %96 %336 
                                                      OpStore %326 %337 
                                        bool %338 = OpLoad %326 
                                                      OpSelectionMerge %340 None 
                                                      OpBranchConditional %338 %339 %340 
                                             %339 = OpLabel 
                                       f32_3 %341 = OpLoad %31 
                                       f32_3 %342 = OpLoad %31 
                                         f32 %343 = OpDot %341 %342 
                                                      OpStore %103 %343 
                                         f32 %344 = OpLoad %103 
                                         f32 %345 = OpExtInst %1 32 %344 
                                                      OpStore %103 %345 
                                       f32_3 %346 = OpLoad %31 
                                         f32 %347 = OpLoad %103 
                                       f32_3 %348 = OpCompositeConstruct %347 %347 %347 
                                       f32_3 %349 = OpFMul %346 %348 
                                       f32_4 %350 = OpLoad %188 
                                       f32_4 %351 = OpVectorShuffle %350 %349 4 5 6 3 
                                                      OpStore %188 %351 
                                       f32_3 %353 = OpLoad %11 
                                       f32_3 %354 = OpFNegate %353 
                              Uniform f32_4* %356 = OpAccessChain %17 %355 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_3 %359 = OpFAdd %354 %358 
                                                      OpStore %352 %359 
                                       f32_3 %360 = OpLoad %352 
                                       f32_4 %361 = OpLoad %188 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                       f32_3 %363 = OpFDiv %360 %362 
                                                      OpStore %352 %363 
                                       f32_3 %365 = OpLoad %11 
                                       f32_3 %366 = OpFNegate %365 
                              Uniform f32_4* %368 = OpAccessChain %17 %367 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_3 %371 = OpFAdd %366 %370 
                                                      OpStore %364 %371 
                                       f32_3 %372 = OpLoad %364 
                                       f32_4 %373 = OpLoad %188 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFDiv %372 %374 
                                                      OpStore %364 %375 
                                       f32_4 %377 = OpLoad %188 
                                       f32_4 %378 = OpVectorShuffle %377 %377 0 1 2 0 
                                      bool_4 %379 = OpFOrdLessThan %208 %378 
                                      bool_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                                      OpStore %376 %380 
                                       f32_3 %382 = OpLoad %352 
                                                      OpStore %381 %382 
                               Private bool* %383 = OpAccessChain %376 %217 
                                        bool %384 = OpLoad %383 
                                                      OpSelectionMerge %387 None 
                                                      OpBranchConditional %384 %386 %390 
                                             %386 = OpLabel 
                                Private f32* %388 = OpAccessChain %352 %217 
                                         f32 %389 = OpLoad %388 
                                                      OpStore %385 %389 
                                                      OpBranch %387 
                                             %390 = OpLabel 
                                Private f32* %391 = OpAccessChain %364 %217 
                                         f32 %392 = OpLoad %391 
                                                      OpStore %385 %392 
                                                      OpBranch %387 
                                             %387 = OpLabel 
                                         f32 %393 = OpLoad %385 
                               Function f32* %394 = OpAccessChain %381 %217 
                                                      OpStore %394 %393 
                               Private bool* %395 = OpAccessChain %376 %105 
                                        bool %396 = OpLoad %395 
                                                      OpSelectionMerge %399 None 
                                                      OpBranchConditional %396 %398 %402 
                                             %398 = OpLabel 
                                Private f32* %400 = OpAccessChain %352 %105 
                                         f32 %401 = OpLoad %400 
                                                      OpStore %397 %401 
                                                      OpBranch %399 
                                             %402 = OpLabel 
                                Private f32* %403 = OpAccessChain %364 %105 
                                         f32 %404 = OpLoad %403 
                                                      OpStore %397 %404 
                                                      OpBranch %399 
                                             %399 = OpLabel 
                                         f32 %405 = OpLoad %397 
                               Function f32* %406 = OpAccessChain %381 %105 
                                                      OpStore %406 %405 
                               Private bool* %407 = OpAccessChain %376 %243 
                                        bool %408 = OpLoad %407 
                                                      OpSelectionMerge %411 None 
                                                      OpBranchConditional %408 %410 %414 
                                             %410 = OpLabel 
                                Private f32* %412 = OpAccessChain %352 %243 
                                         f32 %413 = OpLoad %412 
                                                      OpStore %409 %413 
                                                      OpBranch %411 
                                             %414 = OpLabel 
                                Private f32* %415 = OpAccessChain %364 %243 
                                         f32 %416 = OpLoad %415 
                                                      OpStore %409 %416 
                                                      OpBranch %411 
                                             %411 = OpLabel 
                                         f32 %417 = OpLoad %409 
                               Function f32* %418 = OpAccessChain %381 %243 
                                                      OpStore %418 %417 
                                       f32_3 %419 = OpLoad %381 
                                                      OpStore %352 %419 
                                Private f32* %420 = OpAccessChain %352 %105 
                                         f32 %421 = OpLoad %420 
                                Private f32* %422 = OpAccessChain %352 %217 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpExtInst %1 37 %421 %423 
                                                      OpStore %103 %424 
                                Private f32* %425 = OpAccessChain %352 %243 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpLoad %103 
                                         f32 %428 = OpExtInst %1 37 %426 %427 
                                                      OpStore %103 %428 
                                       f32_3 %429 = OpLoad %11 
                              Uniform f32_4* %430 = OpAccessChain %17 %334 
                                       f32_4 %431 = OpLoad %430 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                       f32_3 %433 = OpFNegate %432 
                                       f32_3 %434 = OpFAdd %429 %433 
                                                      OpStore %352 %434 
                                       f32_4 %435 = OpLoad %188 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
                                         f32 %437 = OpLoad %103 
                                       f32_3 %438 = OpCompositeConstruct %437 %437 %437 
                                       f32_3 %439 = OpFMul %436 %438 
                                       f32_3 %440 = OpLoad %352 
                                       f32_3 %441 = OpFAdd %439 %440 
                                                      OpStore %31 %441 
                                                      OpBranch %340 
                                             %340 = OpLabel 
                       read_only TextureCube %443 = OpLoad %442 
                                     sampler %444 = OpLoad %291 
                read_only TextureCubeSampled %445 = OpSampledImage %443 %444 
                                       f32_3 %446 = OpLoad %31 
                                       f32_4 %447 = OpImageSampleExplicitLod %445 %446 Lod %14 
                                                      OpStore %188 %447 
                                Private f32* %448 = OpAccessChain %188 %135 
                                         f32 %449 = OpLoad %448 
                                         f32 %450 = OpFAdd %449 %301 
                                Private f32* %451 = OpAccessChain %31 %217 
                                                      OpStore %451 %450 
                                Uniform f32* %453 = OpAccessChain %17 %452 %135 
                                         f32 %454 = OpLoad %453 
                                Private f32* %455 = OpAccessChain %31 %217 
                                         f32 %456 = OpLoad %455 
                                         f32 %457 = OpFMul %454 %456 
                                         f32 %458 = OpFAdd %457 %54 
                                Private f32* %459 = OpAccessChain %31 %217 
                                                      OpStore %459 %458 
                                Private f32* %460 = OpAccessChain %31 %217 
                                         f32 %461 = OpLoad %460 
                                         f32 %462 = OpExtInst %1 30 %461 
                                Private f32* %463 = OpAccessChain %31 %217 
                                                      OpStore %463 %462 
                                Private f32* %464 = OpAccessChain %31 %217 
                                         f32 %465 = OpLoad %464 
                                Uniform f32* %466 = OpAccessChain %17 %452 %105 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFMul %465 %467 
                                Private f32* %469 = OpAccessChain %31 %217 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %31 %217 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpExtInst %1 29 %471 
                                Private f32* %473 = OpAccessChain %31 %217 
                                                      OpStore %473 %472 
                                Private f32* %474 = OpAccessChain %31 %217 
                                         f32 %475 = OpLoad %474 
                                Uniform f32* %476 = OpAccessChain %17 %452 %217 
                                         f32 %477 = OpLoad %476 
                                         f32 %478 = OpFMul %475 %477 
                                Private f32* %479 = OpAccessChain %31 %217 
                                                      OpStore %479 %478 
                                       f32_4 %480 = OpLoad %188 
                                       f32_3 %481 = OpVectorShuffle %480 %480 0 1 2 
                                       f32_3 %482 = OpLoad %31 
                                       f32_3 %483 = OpVectorShuffle %482 %482 0 0 0 
                                       f32_3 %484 = OpFMul %481 %483 
                                                      OpStore %31 %484 
                                         f32 %485 = OpLoad %51 
                                       f32_3 %486 = OpCompositeConstruct %485 %485 %485 
                                       f32_4 %487 = OpLoad %169 
                                       f32_3 %488 = OpVectorShuffle %487 %487 0 1 2 
                                       f32_3 %489 = OpFMul %486 %488 
                                       f32_3 %490 = OpLoad %31 
                                       f32_3 %491 = OpFNegate %490 
                                       f32_3 %492 = OpFAdd %489 %491 
                                       f32_4 %493 = OpLoad %169 
                                       f32_4 %494 = OpVectorShuffle %493 %492 4 5 6 3 
                                                      OpStore %169 %494 
                              Uniform f32_4* %495 = OpAccessChain %17 %191 
                                       f32_4 %496 = OpLoad %495 
                                       f32_3 %497 = OpVectorShuffle %496 %496 3 3 3 
                                       f32_4 %498 = OpLoad %169 
                                       f32_3 %499 = OpVectorShuffle %498 %498 0 1 2 
                                       f32_3 %500 = OpFMul %497 %499 
                                       f32_3 %501 = OpLoad %31 
                                       f32_3 %502 = OpFAdd %500 %501 
                                                      OpStore %176 %502 
                                                      OpBranch %333 
                                             %333 = OpLabel 
                                       f32_3 %503 = OpLoad %9 
                                         f32 %504 = OpLoad %25 
                                       f32_3 %505 = OpCompositeConstruct %504 %504 %504 
                                       f32_3 %506 = OpFMul %503 %505 
                              Uniform f32_4* %508 = OpAccessChain %17 %507 
                                       f32_4 %509 = OpLoad %508 
                                       f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
                                       f32_3 %511 = OpFAdd %506 %510 
                                                      OpStore %9 %511 
                                       f32_3 %512 = OpLoad %9 
                                       f32_3 %513 = OpLoad %9 
                                         f32 %514 = OpDot %512 %513 
                                                      OpStore %25 %514 
                                         f32 %515 = OpLoad %25 
                                         f32 %517 = OpExtInst %1 40 %515 %516 
                                                      OpStore %25 %517 
                                         f32 %518 = OpLoad %25 
                                         f32 %519 = OpExtInst %1 32 %518 
                                                      OpStore %25 %519 
                                         f32 %520 = OpLoad %25 
                                       f32_3 %521 = OpCompositeConstruct %520 %520 %520 
                                       f32_3 %522 = OpLoad %9 
                                       f32_3 %523 = OpFMul %521 %522 
                                                      OpStore %9 %523 
                                       f32_3 %524 = OpLoad %43 
                              Uniform f32_4* %525 = OpAccessChain %17 %507 
                                       f32_4 %526 = OpLoad %525 
                                       f32_3 %527 = OpVectorShuffle %526 %526 0 1 2 
                                         f32 %528 = OpDot %524 %527 
                                                      OpStore %25 %528 
                                         f32 %529 = OpLoad %25 
                                         f32 %530 = OpExtInst %1 43 %529 %96 %54 
                                                      OpStore %25 %530 
                              Uniform f32_4* %531 = OpAccessChain %17 %507 
                                       f32_4 %532 = OpLoad %531 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
                                       f32_3 %534 = OpLoad %9 
                                         f32 %535 = OpDot %533 %534 
                                Private f32* %536 = OpAccessChain %9 %217 
                                                      OpStore %536 %535 
                                Private f32* %537 = OpAccessChain %9 %217 
                                         f32 %538 = OpLoad %537 
                                         f32 %539 = OpExtInst %1 43 %538 %96 %54 
                                Private f32* %540 = OpAccessChain %9 %217 
                                                      OpStore %540 %539 
                                         f32 %542 = OpLoad %36 
                                         f32 %543 = OpExtInst %1 4 %542 
                                         f32 %544 = OpLoad %25 
                                         f32 %545 = OpFAdd %543 %544 
                                Private f32* %546 = OpAccessChain %541 %217 
                                                      OpStore %546 %545 
                                Private f32* %547 = OpAccessChain %541 %217 
                                         f32 %548 = OpLoad %547 
                                         f32 %550 = OpFAdd %548 %549 
                                Private f32* %551 = OpAccessChain %541 %217 
                                                      OpStore %551 %550 
                                Private f32* %553 = OpAccessChain %541 %217 
                                         f32 %554 = OpLoad %553 
                                         f32 %555 = OpFDiv %552 %554 
                                Private f32* %556 = OpAccessChain %541 %217 
                                                      OpStore %556 %555 
                                         f32 %557 = OpLoad %25 
                                Private f32* %558 = OpAccessChain %541 %217 
                                         f32 %559 = OpLoad %558 
                                         f32 %560 = OpFMul %557 %559 
                                Private f32* %561 = OpAccessChain %541 %217 
                                                      OpStore %561 %560 
                                Private f32* %562 = OpAccessChain %541 %217 
                                         f32 %563 = OpLoad %562 
                                         f32 %565 = OpFMul %563 %564 
                                Private f32* %566 = OpAccessChain %541 %217 
                                                      OpStore %566 %565 
                                       f32_3 %567 = OpLoad %541 
                                       f32_3 %568 = OpVectorShuffle %567 %567 0 0 0 
                              Uniform f32_4* %570 = OpAccessChain %17 %569 
                                       f32_4 %571 = OpLoad %570 
                                       f32_3 %572 = OpVectorShuffle %571 %571 0 1 2 
                                       f32_3 %573 = OpFMul %568 %572 
                                                      OpStore %541 %573 
                                Private f32* %574 = OpAccessChain %9 %217 
                                         f32 %575 = OpLoad %574 
                                         f32 %576 = OpFNegate %575 
                                         f32 %577 = OpFAdd %576 %54 
                                Private f32* %578 = OpAccessChain %9 %217 
                                                      OpStore %578 %577 
                                Private f32* %579 = OpAccessChain %9 %217 
                                         f32 %580 = OpLoad %579 
                                Private f32* %581 = OpAccessChain %9 %217 
                                         f32 %582 = OpLoad %581 
                                         f32 %583 = OpFMul %580 %582 
                                Private f32* %584 = OpAccessChain %31 %217 
                                                      OpStore %584 %583 
                                Private f32* %585 = OpAccessChain %31 %217 
                                         f32 %586 = OpLoad %585 
                                Private f32* %587 = OpAccessChain %31 %217 
                                         f32 %588 = OpLoad %587 
                                         f32 %589 = OpFMul %586 %588 
                                Private f32* %590 = OpAccessChain %31 %217 
                                                      OpStore %590 %589 
                                Private f32* %591 = OpAccessChain %9 %217 
                                         f32 %592 = OpLoad %591 
                                Private f32* %593 = OpAccessChain %31 %217 
                                         f32 %594 = OpLoad %593 
                                         f32 %595 = OpFMul %592 %594 
                                Private f32* %596 = OpAccessChain %9 %217 
                                                      OpStore %596 %595 
                                Private f32* %597 = OpAccessChain %9 %217 
                                         f32 %598 = OpLoad %597 
                                         f32 %600 = OpFMul %598 %599 
                                         f32 %602 = OpFAdd %600 %601 
                                Private f32* %603 = OpAccessChain %9 %217 
                                                      OpStore %603 %602 
                                       f32_3 %604 = OpLoad %176 
                                       f32_3 %606 = OpFMul %604 %605 
                                                      OpStore %31 %606 
                                         f32 %607 = OpLoad %36 
                                         f32 %608 = OpExtInst %1 4 %607 
                                         f32 %609 = OpFNegate %608 
                                         f32 %610 = OpFAdd %609 %54 
                                                      OpStore %36 %610 
                                         f32 %611 = OpLoad %36 
                                         f32 %612 = OpLoad %36 
                                         f32 %613 = OpFMul %611 %612 
                                Private f32* %614 = OpAccessChain %43 %217 
                                                      OpStore %614 %613 
                                Private f32* %615 = OpAccessChain %43 %217 
                                         f32 %616 = OpLoad %615 
                                Private f32* %617 = OpAccessChain %43 %217 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                Private f32* %620 = OpAccessChain %43 %217 
                                                      OpStore %620 %619 
                                         f32 %621 = OpLoad %36 
                                Private f32* %622 = OpAccessChain %43 %217 
                                         f32 %623 = OpLoad %622 
                                         f32 %624 = OpFMul %621 %623 
                                                      OpStore %36 %624 
                                         f32 %625 = OpLoad %36 
                                         f32 %627 = OpFMul %625 %626 
                                         f32 %628 = OpFAdd %627 %601 
                                                      OpStore %36 %628 
                                         f32 %629 = OpLoad %36 
                                       f32_3 %630 = OpCompositeConstruct %629 %629 %629 
                                       f32_3 %631 = OpLoad %31 
                                       f32_3 %632 = OpFMul %630 %631 
                                                      OpStore %31 %632 
                                       f32_3 %633 = OpLoad %541 
                                       f32_3 %634 = OpLoad %9 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 0 0 
                                       f32_3 %636 = OpFMul %633 %635 
                                       f32_3 %637 = OpLoad %31 
                                       f32_3 %638 = OpFAdd %636 %637 
                                                      OpStore %9 %638 
                                       f32_3 %639 = OpLoad %75 
                                       f32_3 %640 = OpLoad %9 
                                       f32_3 %641 = OpFAdd %639 %640 
                                                      OpStore %9 %641 
                                         f32 %643 = OpLoad %642 
                                Uniform f32* %645 = OpAccessChain %17 %644 %105 
                                         f32 %646 = OpLoad %645 
                                         f32 %647 = OpFDiv %643 %646 
                                                      OpStore %25 %647 
                                         f32 %648 = OpLoad %25 
                                         f32 %649 = OpFNegate %648 
                                         f32 %650 = OpFAdd %649 %54 
                                                      OpStore %25 %650 
                                         f32 %651 = OpLoad %25 
                                Uniform f32* %652 = OpAccessChain %17 %644 %243 
                                         f32 %653 = OpLoad %652 
                                         f32 %654 = OpFMul %651 %653 
                                                      OpStore %25 %654 
                                         f32 %655 = OpLoad %25 
                                         f32 %656 = OpExtInst %1 40 %655 %96 
                                                      OpStore %25 %656 
                                         f32 %657 = OpLoad %25 
                                Uniform f32* %659 = OpAccessChain %17 %658 %243 
                                         f32 %660 = OpLoad %659 
                                         f32 %661 = OpFMul %657 %660 
                                Uniform f32* %662 = OpAccessChain %17 %658 %135 
                                         f32 %663 = OpLoad %662 
                                         f32 %664 = OpFAdd %661 %663 
                                                      OpStore %25 %664 
                                         f32 %665 = OpLoad %25 
                                         f32 %666 = OpExtInst %1 43 %665 %96 %54 
                                                      OpStore %25 %666 
                                       f32_3 %667 = OpLoad %9 
                              Uniform f32_4* %669 = OpAccessChain %17 %668 
                                       f32_4 %670 = OpLoad %669 
                                       f32_3 %671 = OpVectorShuffle %670 %670 0 1 2 
                                       f32_3 %672 = OpFNegate %671 
                                       f32_3 %673 = OpFAdd %667 %672 
                                                      OpStore %9 %673 
                                         f32 %674 = OpLoad %25 
                                       f32_3 %675 = OpCompositeConstruct %674 %674 %674 
                                       f32_3 %676 = OpLoad %9 
                                       f32_3 %677 = OpFMul %675 %676 
                              Uniform f32_4* %678 = OpAccessChain %17 %668 
                                       f32_4 %679 = OpLoad %678 
                                       f32_3 %680 = OpVectorShuffle %679 %679 0 1 2 
                                       f32_3 %681 = OpFAdd %677 %680 
                                       f32_4 %682 = OpLoad %129 
                                       f32_4 %683 = OpVectorShuffle %682 %681 4 5 6 3 
                                                      OpStore %129 %683 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 387
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationControl %4 "main" %23 %25 %30 %37 %39 %47 %51 %58 %60 %65 %67 %72 %74 %79 %81 %86 %88 %219 %371 
                                                      OpExecutionMode %4 OutputVertices 4 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %25 BuiltIn WorkgroupSize 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %37 Location 37 
                                                      OpDecorate %39 Location 39 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %51 Location 51 
                                                      OpDecorate %58 Location 58 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate %65 Location 65 
                                                      OpDecorate vs_TEXCOORD1 Location 67 
                                                      OpDecorate %72 Location 72 
                                                      OpDecorate vs_TEXCOORD2 Location 74 
                                                      OpDecorate %79 Location 79 
                                                      OpDecorate vs_TEXCOORD3 Location 81 
                                                      OpDecorate %86 Location 86 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %96 ArrayStride 96 
                                                      OpMemberDecorate %97 0 Offset 97 
                                                      OpMemberDecorate %97 1 Offset 97 
                                                      OpMemberDecorate %97 2 Offset 97 
                                                      OpMemberDecorate %97 3 Offset 97 
                                                      OpDecorate %97 Block 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate %219 Patch 
                                                      OpDecorate %219 BuiltIn 219 
                                                      OpDecorate %371 Patch 
                                                      OpDecorate %371 BuiltIn 371 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %8 = OpTypeInt 32 1 
                                               %9 = OpTypePointer Function %8 
                                              %10 = OpTypeFunction %2 %9 
                                              %17 = OpTypeFloat 32 
                                              %18 = OpTypeVector %17 4 
                                              %19 = OpTypeInt 32 0 
                                          u32 %20 = OpConstant 3 
                                              %21 = OpTypeArray %18 %20 
                                              %22 = OpTypePointer Output %21 
                             Output f32_4[3]* %23 = OpVariable Output 
                                              %24 = OpTypePointer Input %8 
                                   Input i32* %25 = OpVariable Input 
                                          u32 %27 = OpConstant 32 
                                              %28 = OpTypeArray %18 %27 
                                              %29 = OpTypePointer Input %28 
                             Input f32_4[32]* %30 = OpVariable Input 
                                              %32 = OpTypePointer Input %18 
                                              %35 = OpTypePointer Output %18 
                             Output f32_4[3]* %37 = OpVariable Output 
                             Input f32_4[32]* %39 = OpVariable Input 
                                              %44 = OpTypeVector %17 3 
                                              %45 = OpTypeArray %44 %20 
                                              %46 = OpTypePointer Output %45 
                             Output f32_3[3]* %47 = OpVariable Output 
                                              %49 = OpTypeArray %44 %27 
                                              %50 = OpTypePointer Input %49 
                             Input f32_3[32]* %51 = OpVariable Input 
                                              %53 = OpTypePointer Input %44 
                                              %56 = OpTypePointer Output %44 
                             Output f32_4[3]* %58 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD0 = OpVariable Input 
                             Output f32_4[3]* %65 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD1 = OpVariable Input 
                             Output f32_4[3]* %72 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD2 = OpVariable Input 
                             Output f32_4[3]* %79 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD3 = OpVariable Input 
                             Output f32_4[3]* %86 = OpVariable Output 
                             Input f32_4[32]* %88 = OpVariable Input 
                                              %93 = OpTypePointer Private %44 
                               Private f32_3* %94 = OpVariable Private 
                                          u32 %95 = OpConstant 4 
                                              %96 = OpTypeArray %18 %95 
                                              %97 = OpTypeStruct %44 %18 %96 %17 
                                              %98 = OpTypePointer Uniform %97 
Uniform struct {f32_3; f32_4; f32_4[4]; f32;}* %99 = OpVariable Uniform 
                                         i32 %100 = OpConstant 2 
                                         i32 %101 = OpConstant 1 
                                             %102 = OpTypePointer Uniform %18 
                                         i32 %110 = OpConstant 0 
                                         i32 %129 = OpConstant 3 
                              Private f32_3* %139 = OpVariable Private 
                              Private f32_3* %174 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                             %182 = OpTypePointer Uniform %44 
                                             %187 = OpTypePointer Private %17 
                                Private f32* %188 = OpVariable Private 
                                             %195 = OpTypePointer Uniform %17 
                                Private f32* %203 = OpVariable Private 
                                         u32 %210 = OpConstant 1 
                                             %217 = OpTypeArray %17 %95 
                                             %218 = OpTypePointer Output %217 
                              Output f32[4]* %219 = OpVariable Output 
                                         f32 %221 = OpConstant 3.674022E-40 
                                             %223 = OpTypePointer Output %17 
                              Private f32_3* %259 = OpVariable Private 
                                         u32 %285 = OpConstant 0 
                              Private f32_3* %325 = OpVariable Private 
                                         u32 %368 = OpConstant 2 
                                             %369 = OpTypeArray %17 %368 
                                             %370 = OpTypePointer Output %369 
                              Output f32[2]* %371 = OpVariable Output 
                                         f32 %374 = OpConstant 3.674022E-40 
                                             %379 = OpTypeBool 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %383 = OpVariable Function 
                               Function i32* %385 = OpVariable Function 
                                        void %377 = OpFunctionCall %6 
                                                      OpControlBarrier 368 95 285 
                                         i32 %378 = OpLoad %25 
                                        bool %380 = OpIEqual %378 %110 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %380 %381 %382 
                                             %381 = OpLabel 
                                                      OpStore %383 %110 
                                        void %384 = OpFunctionCall %12 %383 
                                                      OpStore %385 %110 
                                        void %386 = OpFunctionCall %15 %385 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
                                          void %6 = OpFunction None %3 
                                               %7 = OpLabel 
                                          i32 %26 = OpLoad %25 
                                          i32 %31 = OpLoad %25 
                                 Input f32_4* %33 = OpAccessChain %30 %31 
                                        f32_4 %34 = OpLoad %33 
                                Output f32_4* %36 = OpAccessChain %23 %26 
                                                      OpStore %36 %34 
                                          i32 %38 = OpLoad %25 
                                          i32 %40 = OpLoad %25 
                                 Input f32_4* %41 = OpAccessChain %39 %40 
                                        f32_4 %42 = OpLoad %41 
                                Output f32_4* %43 = OpAccessChain %37 %38 
                                                      OpStore %43 %42 
                                          i32 %48 = OpLoad %25 
                                          i32 %52 = OpLoad %25 
                                 Input f32_3* %54 = OpAccessChain %51 %52 
                                        f32_3 %55 = OpLoad %54 
                                Output f32_3* %57 = OpAccessChain %47 %48 
                                                      OpStore %57 %55 
                                          i32 %59 = OpLoad %25 
                                          i32 %61 = OpLoad %25 
                                 Input f32_4* %62 = OpAccessChain vs_TEXCOORD0 %61 
                                        f32_4 %63 = OpLoad %62 
                                Output f32_4* %64 = OpAccessChain %58 %59 
                                                      OpStore %64 %63 
                                          i32 %66 = OpLoad %25 
                                          i32 %68 = OpLoad %25 
                                 Input f32_4* %69 = OpAccessChain vs_TEXCOORD1 %68 
                                        f32_4 %70 = OpLoad %69 
                                Output f32_4* %71 = OpAccessChain %65 %66 
                                                      OpStore %71 %70 
                                          i32 %73 = OpLoad %25 
                                          i32 %75 = OpLoad %25 
                                 Input f32_4* %76 = OpAccessChain vs_TEXCOORD2 %75 
                                        f32_4 %77 = OpLoad %76 
                                Output f32_4* %78 = OpAccessChain %72 %73 
                                                      OpStore %78 %77 
                                          i32 %80 = OpLoad %25 
                                          i32 %82 = OpLoad %25 
                                 Input f32_4* %83 = OpAccessChain vs_TEXCOORD3 %82 
                                        f32_4 %84 = OpLoad %83 
                                Output f32_4* %85 = OpAccessChain %79 %80 
                                                      OpStore %85 %84 
                                          i32 %87 = OpLoad %25 
                                          i32 %89 = OpLoad %25 
                                 Input f32_4* %90 = OpAccessChain %88 %89 
                                        f32_4 %91 = OpLoad %90 
                                Output f32_4* %92 = OpAccessChain %86 %87 
                                                      OpStore %92 %91 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %12 = OpFunction None %10 
                                Function i32* %11 = OpFunctionParameter 
                                              %13 = OpLabel 
                              Uniform f32_4* %103 = OpAccessChain %99 %100 %101 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                Input f32_4* %106 = OpAccessChain %30 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 1 1 1 
                                       f32_3 %109 = OpFMul %105 %108 
                                                      OpStore %94 %109 
                              Uniform f32_4* %111 = OpAccessChain %99 %100 %110 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                Input f32_4* %114 = OpAccessChain %30 %101 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %113 %116 
                                       f32_3 %118 = OpLoad %94 
                                       f32_3 %119 = OpFAdd %117 %118 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %99 %100 %100 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                Input f32_4* %123 = OpAccessChain %30 %101 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 2 2 2 
                                       f32_3 %126 = OpFMul %122 %125 
                                       f32_3 %127 = OpLoad %94 
                                       f32_3 %128 = OpFAdd %126 %127 
                                                      OpStore %94 %128 
                              Uniform f32_4* %130 = OpAccessChain %99 %100 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                Input f32_4* %133 = OpAccessChain %30 %101 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 3 3 3 
                                       f32_3 %136 = OpFMul %132 %135 
                                       f32_3 %137 = OpLoad %94 
                                       f32_3 %138 = OpFAdd %136 %137 
                                                      OpStore %94 %138 
                              Uniform f32_4* %140 = OpAccessChain %99 %100 %101 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                Input f32_4* %143 = OpAccessChain %30 %100 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 1 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                                      OpStore %139 %146 
                              Uniform f32_4* %147 = OpAccessChain %99 %100 %110 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                Input f32_4* %150 = OpAccessChain %30 %100 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 0 0 
                                       f32_3 %153 = OpFMul %149 %152 
                                       f32_3 %154 = OpLoad %139 
                                       f32_3 %155 = OpFAdd %153 %154 
                                                      OpStore %139 %155 
                              Uniform f32_4* %156 = OpAccessChain %99 %100 %100 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                Input f32_4* %159 = OpAccessChain %30 %100 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 2 2 2 
                                       f32_3 %162 = OpFMul %158 %161 
                                       f32_3 %163 = OpLoad %139 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %139 %164 
                              Uniform f32_4* %165 = OpAccessChain %99 %100 %129 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                Input f32_4* %168 = OpAccessChain %30 %100 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 3 3 3 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_3 %172 = OpLoad %139 
                                       f32_3 %173 = OpFAdd %171 %172 
                                                      OpStore %139 %173 
                                       f32_3 %175 = OpLoad %94 
                                       f32_3 %176 = OpLoad %139 
                                       f32_3 %177 = OpFAdd %175 %176 
                                                      OpStore %174 %177 
                                       f32_3 %178 = OpLoad %174 
                                       f32_3 %181 = OpFMul %178 %180 
                              Uniform f32_3* %183 = OpAccessChain %99 %110 
                                       f32_3 %184 = OpLoad %183 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpFAdd %181 %185 
                                                      OpStore %174 %186 
                                       f32_3 %189 = OpLoad %174 
                                       f32_3 %190 = OpLoad %174 
                                         f32 %191 = OpDot %189 %190 
                                                      OpStore %188 %191 
                                         f32 %192 = OpLoad %188 
                                         f32 %193 = OpExtInst %1 31 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                Uniform f32* %196 = OpAccessChain %99 %129 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %194 %197 
                                                      OpStore %188 %198 
                                       f32_3 %199 = OpLoad %94 
                                       f32_3 %200 = OpLoad %139 
                                       f32_3 %201 = OpFNegate %200 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore %174 %202 
                                       f32_3 %204 = OpLoad %174 
                                       f32_3 %205 = OpLoad %174 
                                         f32 %206 = OpDot %204 %205 
                                                      OpStore %203 %206 
                                         f32 %207 = OpLoad %203 
                                         f32 %208 = OpExtInst %1 31 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                Uniform f32* %211 = OpAccessChain %99 %101 %210 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %209 %212 
                                                      OpStore %203 %213 
                                         f32 %214 = OpLoad %203 
                                         f32 %215 = OpLoad %188 
                                         f32 %216 = OpFDiv %214 %215 
                                                      OpStore %188 %216 
                                         f32 %220 = OpLoad %188 
                                         f32 %222 = OpExtInst %1 40 %220 %221 
                                 Output f32* %224 = OpAccessChain %219 %110 
                                                      OpStore %224 %222 
                              Uniform f32_4* %225 = OpAccessChain %99 %100 %101 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                Input f32_4* %228 = OpAccessChain %30 %110 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 1 1 1 
                                       f32_3 %231 = OpFMul %227 %230 
                                                      OpStore %174 %231 
                              Uniform f32_4* %232 = OpAccessChain %99 %100 %110 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                Input f32_4* %235 = OpAccessChain %30 %110 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 0 0 
                                       f32_3 %238 = OpFMul %234 %237 
                                       f32_3 %239 = OpLoad %174 
                                       f32_3 %240 = OpFAdd %238 %239 
                                                      OpStore %174 %240 
                              Uniform f32_4* %241 = OpAccessChain %99 %100 %100 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                Input f32_4* %244 = OpAccessChain %30 %110 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 2 2 2 
                                       f32_3 %247 = OpFMul %243 %246 
                                       f32_3 %248 = OpLoad %174 
                                       f32_3 %249 = OpFAdd %247 %248 
                                                      OpStore %174 %249 
                              Uniform f32_4* %250 = OpAccessChain %99 %100 %129 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                Input f32_4* %253 = OpAccessChain %30 %110 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 3 3 3 
                                       f32_3 %256 = OpFMul %252 %255 
                                       f32_3 %257 = OpLoad %174 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore %174 %258 
                                       f32_3 %260 = OpLoad %139 
                                       f32_3 %261 = OpLoad %174 
                                       f32_3 %262 = OpFAdd %260 %261 
                                                      OpStore %259 %262 
                                       f32_3 %263 = OpLoad %139 
                                       f32_3 %264 = OpLoad %174 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_3 %266 = OpFAdd %263 %265 
                                                      OpStore %139 %266 
                                       f32_3 %267 = OpLoad %139 
                                       f32_3 %268 = OpLoad %139 
                                         f32 %269 = OpDot %267 %268 
                                                      OpStore %188 %269 
                                         f32 %270 = OpLoad %188 
                                         f32 %271 = OpExtInst %1 31 %270 
                                                      OpStore %188 %271 
                                         f32 %272 = OpLoad %188 
                                Uniform f32* %273 = OpAccessChain %99 %101 %210 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                                      OpStore %188 %275 
                                       f32_3 %276 = OpLoad %259 
                                       f32_3 %277 = OpFMul %276 %180 
                              Uniform f32_3* %278 = OpAccessChain %99 %110 
                                       f32_3 %279 = OpLoad %278 
                                       f32_3 %280 = OpFNegate %279 
                                       f32_3 %281 = OpFAdd %277 %280 
                                                      OpStore %139 %281 
                                       f32_3 %282 = OpLoad %139 
                                       f32_3 %283 = OpLoad %139 
                                         f32 %284 = OpDot %282 %283 
                                Private f32* %286 = OpAccessChain %139 %285 
                                                      OpStore %286 %284 
                                Private f32* %287 = OpAccessChain %139 %285 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 31 %288 
                                Private f32* %290 = OpAccessChain %139 %285 
                                                      OpStore %290 %289 
                                Private f32* %291 = OpAccessChain %139 %285 
                                         f32 %292 = OpLoad %291 
                                Uniform f32* %293 = OpAccessChain %99 %129 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFMul %292 %294 
                                Private f32* %296 = OpAccessChain %139 %285 
                                                      OpStore %296 %295 
                                         f32 %297 = OpLoad %188 
                                Private f32* %298 = OpAccessChain %139 %285 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFDiv %297 %299 
                                                      OpStore %188 %300 
                                         f32 %301 = OpLoad %188 
                                         f32 %302 = OpExtInst %1 40 %301 %221 
                                 Output f32* %303 = OpAccessChain %219 %101 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %94 
                                       f32_3 %305 = OpLoad %174 
                                       f32_3 %306 = OpFAdd %304 %305 
                                                      OpStore %139 %306 
                                       f32_3 %307 = OpLoad %94 
                                       f32_3 %308 = OpFNegate %307 
                                       f32_3 %309 = OpLoad %174 
                                       f32_3 %310 = OpFAdd %308 %309 
                                                      OpStore %94 %310 
                                       f32_3 %311 = OpLoad %94 
                                       f32_3 %312 = OpLoad %94 
                                         f32 %313 = OpDot %311 %312 
                                Private f32* %314 = OpAccessChain %94 %285 
                                                      OpStore %314 %313 
                                Private f32* %315 = OpAccessChain %94 %285 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpExtInst %1 31 %316 
                                Private f32* %318 = OpAccessChain %94 %285 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %94 %285 
                                         f32 %320 = OpLoad %319 
                                Uniform f32* %321 = OpAccessChain %99 %101 %210 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %320 %322 
                                Private f32* %324 = OpAccessChain %94 %285 
                                                      OpStore %324 %323 
                                       f32_3 %326 = OpLoad %139 
                                       f32_3 %327 = OpFMul %326 %180 
                              Uniform f32_3* %328 = OpAccessChain %99 %110 
                                       f32_3 %329 = OpLoad %328 
                                       f32_3 %330 = OpFNegate %329 
                                       f32_3 %331 = OpFAdd %327 %330 
                                                      OpStore %325 %331 
                                       f32_3 %332 = OpLoad %325 
                                       f32_3 %333 = OpLoad %325 
                                         f32 %334 = OpDot %332 %333 
                                Private f32* %335 = OpAccessChain %325 %285 
                                                      OpStore %335 %334 
                                Private f32* %336 = OpAccessChain %325 %285 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpExtInst %1 31 %337 
                                Private f32* %339 = OpAccessChain %325 %285 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %325 %285 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %99 %129 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFMul %341 %343 
                                Private f32* %345 = OpAccessChain %325 %285 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %94 %285 
                                         f32 %347 = OpLoad %346 
                                Private f32* %348 = OpAccessChain %325 %285 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFDiv %347 %349 
                                Private f32* %351 = OpAccessChain %94 %285 
                                                      OpStore %351 %350 
                                Private f32* %352 = OpAccessChain %94 %285 
                                         f32 %353 = OpLoad %352 
                                         f32 %354 = OpExtInst %1 40 %353 %221 
                                 Output f32* %355 = OpAccessChain %219 %100 
                                                      OpStore %355 %354 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %15 = OpFunction None %10 
                                Function i32* %14 = OpFunctionParameter 
                                              %16 = OpLabel 
                                 Output f32* %356 = OpAccessChain %219 %100 
                                         f32 %357 = OpLoad %356 
                                 Output f32* %358 = OpAccessChain %219 %100 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                Private f32* %361 = OpAccessChain %94 %285 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %94 %285 
                                         f32 %363 = OpLoad %362 
                                 Output f32* %364 = OpAccessChain %219 %100 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFAdd %363 %365 
                                Private f32* %367 = OpAccessChain %94 %285 
                                                      OpStore %367 %366 
                                Private f32* %372 = OpAccessChain %94 %285 
                                         f32 %373 = OpLoad %372 
                                         f32 %375 = OpFMul %373 %374 
                                 Output f32* %376 = OpAccessChain %371 %110 
                                                      OpStore %376 %375 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 403
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationEvaluation %4 "main" %12 %20 %139 %236 %301 %341 %346 %349 %387 
                                                      OpExecutionMode %4 Triangles 
                                                      OpExecutionMode %4 SpacingFractionalOdd 
                                                      OpExecutionMode %4 VertexOrderCw 
                                                      OpDecorate %12 BuiltIn TessLevelInner 
                                                      OpDecorate %20 Location 20 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpMemberDecorate %60 0 Offset 60 
                                                      OpMemberDecorate %60 1 Offset 60 
                                                      OpMemberDecorate %60 2 Offset 60 
                                                      OpMemberDecorate %60 3 Offset 60 
                                                      OpMemberDecorate %60 4 Offset 60 
                                                      OpMemberDecorate %60 5 Offset 60 
                                                      OpMemberDecorate %60 6 Offset 60 
                                                      OpMemberDecorate %60 7 Offset 60 
                                                      OpMemberDecorate %60 8 Offset 60 
                                                      OpMemberDecorate %60 9 Offset 60 
                                                      OpMemberDecorate %60 10 Offset 60 
                                                      OpMemberDecorate %60 11 Offset 60 
                                                      OpMemberDecorate %60 12 Offset 60 
                                                      OpDecorate %60 Block 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpDecorate %96 DescriptorSet 96 
                                                      OpDecorate %96 Binding 96 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate %110 DescriptorSet 110 
                                                      OpDecorate %110 Binding 110 
                                                      OpDecorate %112 DescriptorSet 112 
                                                      OpDecorate %112 Binding 112 
                                                      OpDecorate %139 Location 139 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate %301 Location 301 
                                                      OpMemberDecorate %339 0 BuiltIn 339 
                                                      OpMemberDecorate %339 1 BuiltIn 339 
                                                      OpMemberDecorate %339 2 BuiltIn 339 
                                                      OpDecorate %339 Block 
                                                      OpDecorate %346 Location 346 
                                                      OpDecorate %349 Location 349 
                                                      OpDecorate %387 Location 387 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 32 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypePointer Input %18 
                             Input f32_4[32]* %20 = OpVariable Input 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Input %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %42 = OpConstant 2 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                              %60 = OpTypeStruct %7 %7 %7 %7 %7 %57 %58 %59 %6 %6 %7 %6 %6 
                                              %61 = OpTypePointer Uniform %60 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32; f32;}* %62 = OpVariable Uniform 
                                          i32 %63 = OpConstant 10 
                                              %64 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 8 
                                              %79 = OpTypePointer Uniform %6 
                                          i32 %82 = OpConstant 9 
                                              %92 = OpTypePointer Private %6 
                                 Private f32* %93 = OpVariable Private 
                                              %94 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %95 = OpTypePointer UniformConstant %94 
         UniformConstant read_only Texture2D* %96 = OpVariable UniformConstant 
                                              %98 = OpTypeSampler 
                                              %99 = OpTypePointer UniformConstant %98 
                    UniformConstant sampler* %100 = OpVariable UniformConstant 
                                             %102 = OpTypeSampledImage %94 
                                         f32 %106 = OpConstant 3.674022E-40 
                                         u32 %108 = OpConstant 0 
        UniformConstant read_only Texture2D* %110 = OpVariable UniformConstant 
                    UniformConstant sampler* %112 = OpVariable UniformConstant 
                                         i32 %127 = OpConstant 6 
                              Private f32_4* %134 = OpVariable Private 
                                             %137 = OpTypeArray %10 %17 
                                             %138 = OpTypePointer Input %137 
                            Input f32_3[32]* %139 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         u32 %179 = OpConstant 2 
                                         u32 %187 = OpConstant 1 
                                Private f32* %189 = OpVariable Private 
                                         i32 %202 = OpConstant 11 
                                             %207 = OpTypePointer Private %10 
                              Private f32_3* %208 = OpVariable Private 
                                         f32 %222 = OpConstant 3.674022E-40 
                            Input f32_4[32]* %236 = OpVariable Input 
                                         i32 %256 = OpConstant 12 
                              Private f32_4* %274 = OpVariable Private 
                                         i32 %277 = OpConstant 5 
                                         i32 %296 = OpConstant 3 
                                             %300 = OpTypePointer Output %10 
                               Output f32_3* %301 = OpVariable Output 
                                         i32 %313 = OpConstant 7 
                                             %338 = OpTypeArray %6 %187 
                                             %339 = OpTypeStruct %7 %6 %338 
                                             %340 = OpTypePointer Output %339 
        Output struct {f32_4; f32; f32[1];}* %341 = OpVariable Output 
                                             %343 = OpTypePointer Output %7 
                                             %345 = OpTypePointer Output %6 
                                 Output f32* %346 = OpVariable Output 
                               Output f32_3* %349 = OpVariable Output 
                               Output f32_3* %387 = OpVariable Output 
                                         i32 %388 = OpConstant 4 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 1 1 
                                 Input f32_4* %24 = OpAccessChain %20 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                                        f32_2 %27 = OpFMul %15 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                                 Input f32_4* %31 = OpAccessChain %20 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_3 %34 = OpLoad %12 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 0 
                                        f32_2 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                                        f32_2 %39 = OpFAdd %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                 Input f32_4* %43 = OpAccessChain %20 %42 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_3 %46 = OpLoad %12 
                                        f32_2 %47 = OpVectorShuffle %46 %46 2 2 
                                        f32_2 %48 = OpFMul %45 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                                        f32_2 %51 = OpFAdd %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               Uniform f32_4* %65 = OpAccessChain %62 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_2 %67 = OpVectorShuffle %66 %66 0 1 
                                        f32_2 %68 = OpFMul %55 %67 
                               Uniform f32_4* %69 = OpAccessChain %62 %63 
                                        f32_4 %70 = OpLoad %69 
                                        f32_2 %71 = OpVectorShuffle %70 %70 2 3 
                                        f32_2 %72 = OpFAdd %68 %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %72 4 5 2 3 
                                                      OpStore %9 %74 
                               Uniform f32_4* %75 = OpAccessChain %62 %30 
                                        f32_4 %76 = OpLoad %75 
                                        f32_2 %77 = OpVectorShuffle %76 %76 1 1 
                                 Uniform f32* %80 = OpAccessChain %62 %78 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %83 = OpAccessChain %62 %82 
                                          f32 %84 = OpLoad %83 
                                        f32_2 %85 = OpCompositeConstruct %81 %84 
                                        f32_2 %86 = OpFMul %77 %85 
                                        f32_4 %87 = OpLoad %9 
                                        f32_2 %88 = OpVectorShuffle %87 %87 0 1 
                                        f32_2 %89 = OpFAdd %86 %88 
                                        f32_4 %90 = OpLoad %9 
                                        f32_4 %91 = OpVectorShuffle %90 %89 4 5 2 3 
                                                      OpStore %9 %91 
                          read_only Texture2D %97 = OpLoad %96 
                                     sampler %101 = OpLoad %100 
                  read_only Texture2DSampled %103 = OpSampledImage %97 %101 
                                       f32_4 %104 = OpLoad %9 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_4 %107 = OpImageSampleExplicitLod %103 %105 Lod %7 
                                         f32 %109 = OpCompositeExtract %107 0 
                                                      OpStore %93 %109 
                         read_only Texture2D %111 = OpLoad %110 
                                     sampler %113 = OpLoad %112 
                  read_only Texture2DSampled %114 = OpSampledImage %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
                                       f32_4 %117 = OpImageSampleExplicitLod %114 %116 Lod %7 
                                         f32 %118 = OpCompositeExtract %117 0 
                                Private f32* %119 = OpAccessChain %9 %108 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %9 %108 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpLoad %93 
                                         f32 %123 = OpFMul %121 %122 
                                Private f32* %124 = OpAccessChain %9 %108 
                                                      OpStore %124 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 0 0 
                              Uniform f32_4* %128 = OpAccessChain %62 %127 %22 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %126 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %9 %133 
                                       f32_3 %135 = OpLoad %12 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                                Input f32_3* %140 = OpAccessChain %139 %22 
                                       f32_3 %141 = OpLoad %140 
                                       f32_3 %142 = OpFMul %136 %141 
                                       f32_4 %143 = OpLoad %134 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %134 %144 
                                Input f32_3* %145 = OpAccessChain %139 %30 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpLoad %12 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 0 0 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %134 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %149 %151 
                                       f32_4 %153 = OpLoad %134 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %134 %154 
                                Input f32_3* %155 = OpAccessChain %139 %42 
                                       f32_3 %156 = OpLoad %155 
                                       f32_3 %157 = OpLoad %12 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %134 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %134 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %134 %164 
                                       f32_4 %166 = OpLoad %134 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                              Uniform f32_4* %168 = OpAccessChain %62 %127 %30 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %167 %170 
                                Private f32* %172 = OpAccessChain %165 %108 
                                                      OpStore %172 %171 
                                       f32_4 %173 = OpLoad %134 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                              Uniform f32_4* %175 = OpAccessChain %62 %127 %42 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %165 %179 
                                                      OpStore %180 %178 
                                       f32_4 %181 = OpLoad %134 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                              Uniform f32_4* %183 = OpAccessChain %62 %127 %22 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %182 %185 
                                Private f32* %188 = OpAccessChain %165 %187 
                                                      OpStore %188 %186 
                                       f32_4 %190 = OpLoad %165 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %165 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %191 %193 
                                                      OpStore %189 %194 
                                         f32 %195 = OpLoad %189 
                                         f32 %196 = OpExtInst %1 32 %195 
                                                      OpStore %189 %196 
                                Private f32* %197 = OpAccessChain %165 %187 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFNegate %198 
                                         f32 %200 = OpLoad %189 
                                         f32 %201 = OpFMul %199 %200 
                                Uniform f32* %203 = OpAccessChain %62 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFAdd %201 %204 
                                Private f32* %206 = OpAccessChain %134 %108 
                                                      OpStore %206 %205 
                                         f32 %209 = OpLoad %189 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_4 %211 = OpLoad %165 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFMul %210 %212 
                                                      OpStore %208 %213 
                                Private f32* %214 = OpAccessChain %134 %108 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpExtInst %1 4 %215 
                                Uniform f32* %217 = OpAccessChain %62 %202 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                         f32 %220 = OpFAdd %216 %219 
                                                      OpStore %189 %220 
                                         f32 %221 = OpLoad %189 
                                         f32 %223 = OpExtInst %1 43 %221 %106 %222 
                                                      OpStore %189 %223 
                                         f32 %224 = OpLoad %189 
                                         f32 %225 = OpFNegate %224 
                                         f32 %226 = OpFAdd %225 %222 
                                                      OpStore %189 %226 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                         f32 %229 = OpLoad %189 
                                       f32_3 %230 = OpCompositeConstruct %229 %229 %229 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_3 %234 = OpLoad %12 
                                       f32_4 %235 = OpVectorShuffle %234 %234 1 1 1 1 
                                Input f32_4* %237 = OpAccessChain %236 %22 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpFMul %235 %238 
                                                      OpStore %165 %239 
                                Input f32_4* %240 = OpAccessChain %236 %30 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpLoad %12 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpFMul %241 %243 
                                       f32_4 %245 = OpLoad %165 
                                       f32_4 %246 = OpFAdd %244 %245 
                                                      OpStore %165 %246 
                                Input f32_4* %247 = OpAccessChain %236 %42 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpLoad %12 
                                       f32_4 %250 = OpVectorShuffle %249 %249 2 2 2 2 
                                       f32_4 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %165 
                                       f32_4 %253 = OpFAdd %251 %252 
                                                      OpStore %165 %253 
                                       f32_4 %254 = OpLoad %9 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                Uniform f32* %257 = OpAccessChain %62 %256 
                                         f32 %258 = OpLoad %257 
                                Uniform f32* %259 = OpAccessChain %62 %256 
                                         f32 %260 = OpLoad %259 
                                Uniform f32* %261 = OpAccessChain %62 %256 
                                         f32 %262 = OpLoad %261 
                                       f32_3 %263 = OpCompositeConstruct %258 %260 %262 
                                         f32 %264 = OpCompositeExtract %263 0 
                                         f32 %265 = OpCompositeExtract %263 1 
                                         f32 %266 = OpCompositeExtract %263 2 
                                       f32_3 %267 = OpCompositeConstruct %264 %265 %266 
                                       f32_3 %268 = OpFMul %255 %267 
                                       f32_4 %269 = OpLoad %165 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %9 %273 
                                       f32_4 %275 = OpLoad %9 
                                       f32_4 %276 = OpVectorShuffle %275 %275 1 1 1 1 
                              Uniform f32_4* %278 = OpAccessChain %62 %277 %22 
                                       f32_4 %279 = OpLoad %278 
                                       f32_4 %280 = OpFMul %276 %279 
                                                      OpStore %274 %280 
                              Uniform f32_4* %281 = OpAccessChain %62 %277 %30 
                                       f32_4 %282 = OpLoad %281 
                                       f32_4 %283 = OpLoad %9 
                                       f32_4 %284 = OpVectorShuffle %283 %283 0 0 0 0 
                                       f32_4 %285 = OpFMul %282 %284 
                                       f32_4 %286 = OpLoad %274 
                                       f32_4 %287 = OpFAdd %285 %286 
                                                      OpStore %274 %287 
                              Uniform f32_4* %288 = OpAccessChain %62 %277 %42 
                                       f32_4 %289 = OpLoad %288 
                                       f32_4 %290 = OpLoad %9 
                                       f32_4 %291 = OpVectorShuffle %290 %290 2 2 2 2 
                                       f32_4 %292 = OpFMul %289 %291 
                                       f32_4 %293 = OpLoad %274 
                                       f32_4 %294 = OpFAdd %292 %293 
                                                      OpStore %9 %294 
                                       f32_4 %295 = OpLoad %9 
                              Uniform f32_4* %297 = OpAccessChain %62 %277 %296 
                                       f32_4 %298 = OpLoad %297 
                                       f32_4 %299 = OpFAdd %295 %298 
                                                      OpStore %274 %299 
                              Uniform f32_4* %302 = OpAccessChain %62 %277 %296 
                                       f32_4 %303 = OpLoad %302 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                       f32_4 %305 = OpLoad %165 
                                       f32_3 %306 = OpVectorShuffle %305 %305 3 3 3 
                                       f32_3 %307 = OpFMul %304 %306 
                                       f32_4 %308 = OpLoad %9 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_3 %310 = OpFAdd %307 %309 
                                                      OpStore %301 %310 
                                       f32_4 %311 = OpLoad %274 
                                       f32_4 %312 = OpVectorShuffle %311 %311 1 1 1 1 
                              Uniform f32_4* %314 = OpAccessChain %62 %313 %22 
                                       f32_4 %315 = OpLoad %314 
                                       f32_4 %316 = OpFMul %312 %315 
                                                      OpStore %9 %316 
                              Uniform f32_4* %317 = OpAccessChain %62 %313 %30 
                                       f32_4 %318 = OpLoad %317 
                                       f32_4 %319 = OpLoad %274 
                                       f32_4 %320 = OpVectorShuffle %319 %319 0 0 0 0 
                                       f32_4 %321 = OpFMul %318 %320 
                                       f32_4 %322 = OpLoad %9 
                                       f32_4 %323 = OpFAdd %321 %322 
                                                      OpStore %9 %323 
                              Uniform f32_4* %324 = OpAccessChain %62 %313 %42 
                                       f32_4 %325 = OpLoad %324 
                                       f32_4 %326 = OpLoad %274 
                                       f32_4 %327 = OpVectorShuffle %326 %326 2 2 2 2 
                                       f32_4 %328 = OpFMul %325 %327 
                                       f32_4 %329 = OpLoad %9 
                                       f32_4 %330 = OpFAdd %328 %329 
                                                      OpStore %9 %330 
                              Uniform f32_4* %331 = OpAccessChain %62 %313 %296 
                                       f32_4 %332 = OpLoad %331 
                                       f32_4 %333 = OpLoad %274 
                                       f32_4 %334 = OpVectorShuffle %333 %333 3 3 3 3 
                                       f32_4 %335 = OpFMul %332 %334 
                                       f32_4 %336 = OpLoad %9 
                                       f32_4 %337 = OpFAdd %335 %336 
                                                      OpStore %9 %337 
                                       f32_4 %342 = OpLoad %9 
                               Output f32_4* %344 = OpAccessChain %341 %30 
                                                      OpStore %344 %342 
                                Private f32* %347 = OpAccessChain %9 %179 
                                         f32 %348 = OpLoad %347 
                                                      OpStore %346 %348 
                                       f32_3 %350 = OpLoad %208 
                                                      OpStore %349 %350 
                                Private f32* %351 = OpAccessChain %208 %187 
                                         f32 %352 = OpLoad %351 
                                Private f32* %353 = OpAccessChain %208 %187 
                                         f32 %354 = OpLoad %353 
                                         f32 %355 = OpFMul %352 %354 
                                Private f32* %356 = OpAccessChain %9 %108 
                                                      OpStore %356 %355 
                                Private f32* %357 = OpAccessChain %208 %108 
                                         f32 %358 = OpLoad %357 
                                Private f32* %359 = OpAccessChain %208 %108 
                                         f32 %360 = OpLoad %359 
                                         f32 %361 = OpFMul %358 %360 
                                Private f32* %362 = OpAccessChain %9 %108 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFNegate %363 
                                         f32 %365 = OpFAdd %361 %364 
                                Private f32* %366 = OpAccessChain %9 %108 
                                                      OpStore %366 %365 
                                       f32_3 %367 = OpLoad %208 
                                       f32_4 %368 = OpVectorShuffle %367 %367 1 2 2 0 
                                       f32_3 %369 = OpLoad %208 
                                       f32_4 %370 = OpVectorShuffle %369 %369 0 1 2 2 
                                       f32_4 %371 = OpFMul %368 %370 
                                                      OpStore %134 %371 
                              Uniform f32_4* %372 = OpAccessChain %62 %22 
                                       f32_4 %373 = OpLoad %372 
                                       f32_4 %374 = OpLoad %134 
                                         f32 %375 = OpDot %373 %374 
                                Private f32* %376 = OpAccessChain %165 %108 
                                                      OpStore %376 %375 
                              Uniform f32_4* %377 = OpAccessChain %62 %42 
                                       f32_4 %378 = OpLoad %377 
                                       f32_4 %379 = OpLoad %134 
                                         f32 %380 = OpDot %378 %379 
                                Private f32* %381 = OpAccessChain %165 %187 
                                                      OpStore %381 %380 
                              Uniform f32_4* %382 = OpAccessChain %62 %296 
                                       f32_4 %383 = OpLoad %382 
                                       f32_4 %384 = OpLoad %134 
                                         f32 %385 = OpDot %383 %384 
                                Private f32* %386 = OpAccessChain %165 %179 
                                                      OpStore %386 %385 
                              Uniform f32_4* %389 = OpAccessChain %62 %388 
                                       f32_4 %390 = OpLoad %389 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_4 %392 = OpLoad %9 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 0 0 
                                       f32_3 %394 = OpFMul %391 %393 
                                       f32_4 %395 = OpLoad %165 
                                       f32_3 %396 = OpVectorShuffle %395 %395 0 1 2 
                                       f32_3 %397 = OpFAdd %394 %396 
                                                      OpStore %387 %397 
                                 Output f32* %398 = OpAccessChain %341 %30 %187 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpFNegate %399 
                                 Output f32* %401 = OpAccessChain %341 %30 %187 
                                                      OpStore %401 %400 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 410
#extension GL_ARB_explicit_attrib_location : require

in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
in  vec4 in_TEXCOORD3;
in  vec4 in_COLOR0;
layout(location = 0) out vec4 vs_INTERNALTESSPOS0;
layout(location = 1) out vec4 vs_TANGENT0;
layout(location = 2) out vec3 vs_NORMAL0;
layout(location = 3) out vec4 vs_TEXCOORD0;
layout(location = 4) out vec4 vs_TEXCOORD1;
layout(location = 5) out vec4 vs_TEXCOORD2;
layout(location = 6) out vec4 vs_TEXCOORD3;
layout(location = 7) out vec4 vs_COLOR0;
void main()
{
    vs_INTERNALTESSPOS0 = in_POSITION0;
    vs_TANGENT0 = in_TANGENT0;
    vs_NORMAL0.xyz = in_NORMAL0.xyz;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD3;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 _LightColor0;
uniform 	float _Y_Mask;
uniform 	vec4 _Flamecolor2;
uniform 	vec4 _FlameColor;
uniform 	float _FresnelBias;
uniform 	float _FresnelScale;
uniform 	float _FresnelPower;
uniform 	float _Alpha;
UNITY_LOCATION(0) uniform  samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform  samplerCube unity_SpecCube1;
layout(location = 0) in  vec3 ds_TEXCOORD0;
layout(location = 1) in  float ds_TEXCOORD3;
layout(location = 2) in  vec3 ds_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
bvec3 u_xlatb7;
vec3 u_xlat8;
bvec3 u_xlatb9;
vec3 u_xlat10;
float u_xlat30;
float u_xlat31;
float u_xlat32;
bool u_xlatb32;
float u_xlat33;
bool u_xlatb33;
void main()
{
    u_xlat0.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat31 = dot(ds_TEXCOORD0.xyz, ds_TEXCOORD0.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat2.xyz = vec3(u_xlat31) * ds_TEXCOORD0.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat32 = (-u_xlat31) + 1.0;
    u_xlat32 = log2(u_xlat32);
    u_xlat32 = u_xlat32 * _FresnelPower;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = _FresnelScale * u_xlat32 + _FresnelBias;
    u_xlat3.xyz = (-_Flamecolor2.xyz) + _FlameColor.xyz;
    u_xlat3.xyz = vec3(u_xlat32) * u_xlat3.xyz + _Flamecolor2.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(5.0, 5.0, 5.0));
    u_xlat33 = (-ds_TEXCOORD0.y) + _Y_Mask;
    u_xlat33 = abs(u_xlat33) + (-_Y_Mask);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat32 = u_xlat32 * u_xlat33;
    SV_Target0.w = u_xlat32 * _Alpha;
    u_xlat32 = dot((-u_xlat1.xyz), ds_TEXCOORD0.xyz);
    u_xlat32 = u_xlat32 + u_xlat32;
    u_xlat1.xyz = ds_TEXCOORD0.xyz * (-vec3(u_xlat32)) + (-u_xlat1.xyz);
    u_xlatb32 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb32){
        u_xlat32 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat32 = inversesqrt(u_xlat32);
        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat32);
        u_xlat5.xyz = (-ds_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
        u_xlat6.xyz = (-ds_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat5;
            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
            u_xlat5 = hlslcc_movcTemp;
        }
        u_xlat32 = min(u_xlat5.y, u_xlat5.x);
        u_xlat32 = min(u_xlat5.z, u_xlat32);
        u_xlat5.xyz = ds_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat32) + u_xlat5.xyz;
    } else {
        u_xlat4.xyz = u_xlat1.xyz;
    }
    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, 6.0);
    u_xlat32 = u_xlat4.w + -1.0;
    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat32 + 1.0;
    u_xlat32 = log2(u_xlat32);
    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat32);
    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb33){
        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb33){
            u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat33 = inversesqrt(u_xlat33);
            u_xlat6.xyz = u_xlat1.xyz * vec3(u_xlat33);
            u_xlat7.xyz = (-ds_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
            u_xlat8.xyz = (-ds_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
            {
                vec3 hlslcc_movcTemp = u_xlat7;
                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
                u_xlat7 = hlslcc_movcTemp;
            }
            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
            u_xlat33 = min(u_xlat7.z, u_xlat33);
            u_xlat7.xyz = ds_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
        }
        u_xlat6 = textureLod(unity_SpecCube1, u_xlat1.xyz, 6.0);
        u_xlat1.x = u_xlat6.w + -1.0;
        u_xlat1.x = unity_SpecCube1_HDR.w * u_xlat1.x + 1.0;
        u_xlat1.x = log2(u_xlat1.x);
        u_xlat1.x = u_xlat1.x * unity_SpecCube1_HDR.y;
        u_xlat1.x = exp2(u_xlat1.x);
        u_xlat1.x = u_xlat1.x * unity_SpecCube1_HDR.x;
        u_xlat1.xyz = u_xlat6.xyz * u_xlat1.xxx;
        u_xlat4.xyz = vec3(u_xlat32) * u_xlat4.xyz + (-u_xlat1.xyz);
        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat1.xyz;
    }
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10.x = abs(u_xlat31) + u_xlat30;
    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
    u_xlat10.x = 0.5 / u_xlat10.x;
    u_xlat10.x = u_xlat10.x * 0.999999881;
    u_xlat10.x = u_xlat30 * u_xlat10.x;
    u_xlat10.xyz = u_xlat10.xxx * _LightColor0.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat1.x = u_xlat0.x * u_xlat0.x;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 0.959999979 + 0.0399999991;
    u_xlat1.xyz = u_xlat5.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat31 = -abs(u_xlat31) + 1.0;
    u_xlat2.x = u_xlat31 * u_xlat31;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat31 = u_xlat31 * u_xlat2.x;
    u_xlat31 = u_xlat31 * 2.23517418e-08 + 0.0399999991;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    u_xlat30 = ds_TEXCOORD3 * unity_FogParams.z + unity_FogParams.w;
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
    return;
}

#endif
#ifdef HULL
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(vertices=3) out;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	float _EdgeLength;
layout(location = 0) in vec4 vs_INTERNALTESSPOS0[];
layout(location = 0) out vec4 hs_INTERNALTESSPOS0[];
layout(location = 1) in vec4 vs_TANGENT0[];
layout(location = 1) out vec4 hs_TANGENT0[];
layout(location = 2) in vec3 vs_NORMAL0[];
layout(location = 2) out vec3 hs_NORMAL0[];
layout(location = 3) in vec4 vs_TEXCOORD0[];
layout(location = 3) out vec4 hs_TEXCOORD0[];
layout(location = 4) in vec4 vs_TEXCOORD1[];
layout(location = 4) out vec4 hs_TEXCOORD1[];
layout(location = 5) in vec4 vs_TEXCOORD2[];
layout(location = 5) out vec4 hs_TEXCOORD2[];
layout(location = 6) in vec4 vs_TEXCOORD3[];
layout(location = 6) out vec4 hs_TEXCOORD3[];
layout(location = 7) in vec4 vs_COLOR0[];
layout(location = 7) out vec4 hs_COLOR0[];
void passthrough_ctrl_points()
{
    hs_INTERNALTESSPOS0[gl_InvocationID] = vs_INTERNALTESSPOS0[gl_InvocationID];
    hs_TANGENT0[gl_InvocationID] = vs_TANGENT0[gl_InvocationID];
    hs_NORMAL0[gl_InvocationID] = vs_NORMAL0[gl_InvocationID];
    hs_TEXCOORD0[gl_InvocationID] = vs_TEXCOORD0[gl_InvocationID];
    hs_TEXCOORD1[gl_InvocationID] = vs_TEXCOORD1[gl_InvocationID];
    hs_TEXCOORD2[gl_InvocationID] = vs_TEXCOORD2[gl_InvocationID];
    hs_TEXCOORD3[gl_InvocationID] = vs_TEXCOORD3[gl_InvocationID];
    hs_COLOR0[gl_InvocationID] = vs_COLOR0[gl_InvocationID];
}
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
float u_xlat13;
void fork_phase2(int phaseInstanceID)
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[1].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[1].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[2].www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _EdgeLength;
    u_xlat2.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _ScreenParams.y;
    u_xlat12 = u_xlat13 / u_xlat12;
    gl_TessLevelOuter[0] = max(u_xlat12, 1.0);
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[0].www + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _ScreenParams.y;
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _EdgeLength;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    gl_TessLevelOuter[1] = max(u_xlat12, 1.0);
    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _ScreenParams.y;
    u_xlat4.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _EdgeLength;
    u_xlat0.x = u_xlat0.x / u_xlat4.x;
    gl_TessLevelOuter[2] = max(u_xlat0.x, 1.0);
}
void join_phase3(int phaseInstanceID)
{
    u_xlat0.x = gl_TessLevelOuter[2] + gl_TessLevelOuter[2];
    u_xlat0.x = u_xlat0.x + gl_TessLevelOuter[2];
    gl_TessLevelInner[0] = u_xlat0.x * 0.333333343;
}
void main()
{
    passthrough_ctrl_points();
    barrier();
    if (gl_InvocationID == 0)
    {
        fork_phase2(0);
        join_phase3(0);
    }
}

#endif
#ifdef DOMAIN
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(ccw) in;
layout(fractional_odd_spacing) in;
layout(triangles) in;
uniform 	vec4 _Time;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _u;
uniform 	float _v;
uniform 	vec4 _Flamenoise_ST;
uniform 	float _Y_Mask;
uniform 	float _FlameHeight;
UNITY_LOCATION(2) uniform  sampler2D _FlameWave;
UNITY_LOCATION(3) uniform  sampler2D _Flamenoise;
layout(location = 0) in  vec4 hs_INTERNALTESSPOS0 [];
layout(location = 2) in  vec3 hs_NORMAL0 [];
layout(location = 3) in  vec4 hs_TEXCOORD0 [];
layout(location = 0) out vec3 ds_TEXCOORD0;
layout(location = 1) out float ds_TEXCOORD3;
layout(location = 2) out vec3 ds_TEXCOORD1;
layout(location = 3) out vec3 ds_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat5;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = gl_TessCoord.yy * hs_TEXCOORD0[1].xy;
    u_xlat0.xy = hs_TEXCOORD0[0].xy * gl_TessCoord.xx + u_xlat0.xy;
    u_xlat0.xy = hs_TEXCOORD0[2].xy * gl_TessCoord.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _Flamenoise_ST.xy + _Flamenoise_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_u, _v) + u_xlat0.xy;
    u_xlat8 = textureLod(_FlameWave, u_xlat0.xy, 0.0).x;
    u_xlat0.x = textureLod(_Flamenoise, u_xlat0.xy, 0.0).x;
    u_xlat0.x = u_xlat0.x * u_xlat8;
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat1.xyz = gl_TessCoord.yyy * hs_NORMAL0[1].xyz;
    u_xlat1.xyz = hs_NORMAL0[0].xyz * gl_TessCoord.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hs_NORMAL0[2].xyz * gl_TessCoord.zzz + u_xlat1.xyz;
    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.x = (-u_xlat2.y) * u_xlat12 + _Y_Mask;
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = abs(u_xlat1.x) + (-_Y_Mask);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
    u_xlat2 = gl_TessCoord.yyyy * hs_INTERNALTESSPOS0[1];
    u_xlat2 = hs_INTERNALTESSPOS0[0] * gl_TessCoord.xxxx + u_xlat2;
    u_xlat2 = hs_INTERNALTESSPOS0[2] * gl_TessCoord.zzzz + u_xlat2;
    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_FlameHeight, _FlameHeight, _FlameHeight)) + u_xlat2.xyz;
    u_xlat3 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat3;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat3;
    u_xlat3 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    ds_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat2.www + u_xlat0.xyz;
    u_xlat0 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat3.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat3.wwww + u_xlat0;
    gl_Position = u_xlat0;
    ds_TEXCOORD3 = u_xlat0.z;
    ds_TEXCOORD0.xyz = u_xlat5.xyz;
    u_xlat0.x = u_xlat5.y * u_xlat5.y;
    u_xlat0.x = u_xlat5.x * u_xlat5.x + (-u_xlat0.x);
    u_xlat1 = u_xlat5.yzzx * u_xlat5.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    ds_TEXCOORD2.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 38
; Schema: 0
                               OpCapability Shader 
                        %1 = OpExtInstImport "GLSL.std.450" 
                               OpMemoryModel Logical GLSL450 
                               OpEntryPoint Vertex %4 "main" %9 %11 %13 %14 %18 %20 %22 %23 %25 %26 %28 %29 %31 %32 %34 %35 
                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                               OpDecorate %9 Location 9 
                               OpDecorate %11 Location 11 
                               OpDecorate %13 Location 13 
                               OpDecorate %14 Location 14 
                               OpDecorate %18 Location 18 
                               OpDecorate %20 Location 20 
                               OpDecorate vs_TEXCOORD0 Location 22 
                               OpDecorate %23 Location 23 
                               OpDecorate vs_TEXCOORD1 Location 25 
                               OpDecorate %26 Location 26 
                               OpDecorate vs_TEXCOORD2 Location 28 
                               OpDecorate %29 Location 29 
                               OpDecorate vs_TEXCOORD3 Location 31 
                               OpDecorate %32 Location 32 
                               OpDecorate %34 Location 34 
                               OpDecorate %35 Location 35 
                        %2 = OpTypeVoid 
                        %3 = OpTypeFunction %2 
                        %6 = OpTypeFloat 32 
                        %7 = OpTypeVector %6 4 
                        %8 = OpTypePointer Output %7 
          Output f32_4* %9 = OpVariable Output 
                       %10 = OpTypePointer Input %7 
          Input f32_4* %11 = OpVariable Input 
         Output f32_4* %13 = OpVariable Output 
          Input f32_4* %14 = OpVariable Input 
                       %16 = OpTypeVector %6 3 
                       %17 = OpTypePointer Output %16 
         Output f32_3* %18 = OpVariable Output 
                       %19 = OpTypePointer Input %16 
          Input f32_3* %20 = OpVariable Input 
Output f32_4* vs_TEXCOORD0 = OpVariable Output 
          Input f32_4* %23 = OpVariable Input 
Output f32_4* vs_TEXCOORD1 = OpVariable Output 
          Input f32_4* %26 = OpVariable Input 
Output f32_4* vs_TEXCOORD2 = OpVariable Output 
          Input f32_4* %29 = OpVariable Input 
Output f32_4* vs_TEXCOORD3 = OpVariable Output 
          Input f32_4* %32 = OpVariable Input 
         Output f32_4* %34 = OpVariable Output 
          Input f32_4* %35 = OpVariable Input 
                   void %4 = OpFunction None %3 
                        %5 = OpLabel 
                 f32_4 %12 = OpLoad %11 
                               OpStore %9 %12 
                 f32_4 %15 = OpLoad %14 
                               OpStore %13 %15 
                 f32_3 %21 = OpLoad %20 
                               OpStore %18 %21 
                 f32_4 %24 = OpLoad %23 
                               OpStore vs_TEXCOORD0 %24 
                 f32_4 %27 = OpLoad %26 
                               OpStore vs_TEXCOORD1 %27 
                 f32_4 %30 = OpLoad %29 
                               OpStore vs_TEXCOORD2 %30 
                 f32_4 %33 = OpLoad %32 
                               OpStore vs_TEXCOORD3 %33 
                 f32_4 %36 = OpLoad %35 
                               OpStore %34 %36 
                               OpReturn
                               OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 685
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %37 %129 %642 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpMemberDecorate %15 15 Offset 15 
                                                      OpMemberDecorate %15 16 Offset 15 
                                                      OpMemberDecorate %15 17 Offset 15 
                                                      OpMemberDecorate %15 18 Offset 15 
                                                      OpMemberDecorate %15 19 Offset 15 
                                                      OpMemberDecorate %15 20 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %37 Location 37 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %287 DescriptorSet 287 
                                                      OpDecorate %287 Binding 287 
                                                      OpDecorate %291 DescriptorSet 291 
                                                      OpDecorate %291 Binding 291 
                                                      OpDecorate %442 DescriptorSet 442 
                                                      OpDecorate %442 Binding 442 
                                                      OpDecorate %642 Location 642 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeStruct %7 %14 %14 %14 %14 %14 %14 %14 %14 %14 %14 %14 %14 %14 %6 %14 %14 %6 %6 %6 %6 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32_4; f32_4; f32; f32; f32; f32;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %7 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %25 = OpVariable Private 
                               Private f32_3* %31 = OpVariable Private 
                                 Private f32* %36 = OpVariable Private 
                                 Input f32_3* %37 = OpVariable Input 
                               Private f32_3* %43 = OpVariable Private 
                                 Private f32* %51 = OpVariable Private 
                                          f32 %54 = OpConstant 3.674022E-40 
                                          i32 %59 = OpConstant 19 
                                              %60 = OpTypePointer Uniform %6 
                                          i32 %66 = OpConstant 18 
                                          i32 %71 = OpConstant 17 
                               Private f32_3* %75 = OpVariable Private 
                                          i32 %76 = OpConstant 15 
                                              %77 = OpTypePointer Uniform %14 
                                          i32 %82 = OpConstant 16 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                         f32 %100 = OpConstant 3.674022E-40 
                                       f32_3 %101 = OpConstantComposite %100 %100 %100 
                                Private f32* %103 = OpVariable Private 
                                             %104 = OpTypeInt 32 0 
                                         u32 %105 = OpConstant 1 
                                             %106 = OpTypePointer Input %6 
                                         i32 %110 = OpConstant 14 
                                             %128 = OpTypePointer Output %14 
                               Output f32_4* %129 = OpVariable Output 
                                         i32 %131 = OpConstant 20 
                                         u32 %135 = OpConstant 3 
                                             %136 = OpTypePointer Output %6 
                                             %153 = OpTypeBool 
                                             %154 = OpTypePointer Private %153 
                               Private bool* %155 = OpVariable Private 
                                         i32 %156 = OpConstant 7 
                                             %168 = OpTypePointer Private %14 
                              Private f32_4* %169 = OpVariable Private 
                              Private f32_3* %176 = OpVariable Private 
                                         i32 %179 = OpConstant 5 
                              Private f32_4* %188 = OpVariable Private 
                                         i32 %191 = OpConstant 6 
                                             %205 = OpTypeVector %153 3 
                                             %206 = OpTypePointer Private %205 
                             Private bool_3* %207 = OpVariable Private 
                                       f32_4 %208 = OpConstantComposite %96 %96 %96 %96 
                                             %211 = OpTypeVector %153 4 
                                             %214 = OpTypePointer Function %7 
                                         u32 %217 = OpConstant 0 
                                             %220 = OpTypePointer Function %6 
                                         u32 %243 = OpConstant 2 
                                             %285 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %286 = OpTypePointer UniformConstant %285 
      UniformConstant read_only TextureCube* %287 = OpVariable UniformConstant 
                                             %289 = OpTypeSampler 
                                             %290 = OpTypePointer UniformConstant %289 
                    UniformConstant sampler* %291 = OpVariable UniformConstant 
                                             %293 = OpTypeSampledImage %285 
                                         f32 %297 = OpConstant 3.674022E-40 
                                         f32 %301 = OpConstant 3.674022E-40 
                                         i32 %303 = OpConstant 8 
                               Private bool* %326 = OpVariable Private 
                                         f32 %329 = OpConstant 3.674022E-40 
                                         i32 %334 = OpConstant 11 
                              Private f32_3* %352 = OpVariable Private 
                                         i32 %355 = OpConstant 9 
                              Private f32_3* %364 = OpVariable Private 
                                         i32 %367 = OpConstant 10 
                             Private bool_3* %376 = OpVariable Private 
      UniformConstant read_only TextureCube* %442 = OpVariable UniformConstant 
                                         i32 %452 = OpConstant 12 
                                         i32 %507 = OpConstant 2 
                                         f32 %516 = OpConstant 3.674022E-40 
                              Private f32_3* %541 = OpVariable Private 
                                         f32 %549 = OpConstant 3.674022E-40 
                                         f32 %552 = OpConstant 3.674022E-40 
                                         f32 %564 = OpConstant 3.674022E-40 
                                         i32 %569 = OpConstant 13 
                                         f32 %599 = OpConstant 3.674022E-40 
                                         f32 %601 = OpConstant 3.674022E-40 
                                       f32_3 %605 = OpConstantComposite %552 %552 %552 
                                         f32 %626 = OpConstant 3.674022E-40 
                                  Input f32* %642 = OpVariable Input 
                                         i32 %644 = OpConstant 1 
                                         i32 %658 = OpConstant 4 
                                         i32 %668 = OpConstant 3 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %215 = OpVariable Function 
                               Function f32* %221 = OpVariable Function 
                               Function f32* %233 = OpVariable Function 
                               Function f32* %246 = OpVariable Function 
                             Function f32_3* %381 = OpVariable Function 
                               Function f32* %385 = OpVariable Function 
                               Function f32* %397 = OpVariable Function 
                               Function f32* %409 = OpVariable Function 
                                        f32_3 %12 = OpLoad %11 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %13 %22 
                                                      OpStore %9 %23 
                                        f32_3 %26 = OpLoad %9 
                                        f32_3 %27 = OpLoad %9 
                                          f32 %28 = OpDot %26 %27 
                                                      OpStore %25 %28 
                                          f32 %29 = OpLoad %25 
                                          f32 %30 = OpExtInst %1 32 %29 
                                                      OpStore %25 %30 
                                          f32 %32 = OpLoad %25 
                                        f32_3 %33 = OpCompositeConstruct %32 %32 %32 
                                        f32_3 %34 = OpLoad %9 
                                        f32_3 %35 = OpFMul %33 %34 
                                                      OpStore %31 %35 
                                        f32_3 %38 = OpLoad %37 
                                        f32_3 %39 = OpLoad %37 
                                          f32 %40 = OpDot %38 %39 
                                                      OpStore %36 %40 
                                          f32 %41 = OpLoad %36 
                                          f32 %42 = OpExtInst %1 32 %41 
                                                      OpStore %36 %42 
                                          f32 %44 = OpLoad %36 
                                        f32_3 %45 = OpCompositeConstruct %44 %44 %44 
                                        f32_3 %46 = OpLoad %37 
                                        f32_3 %47 = OpFMul %45 %46 
                                                      OpStore %43 %47 
                                        f32_3 %48 = OpLoad %43 
                                        f32_3 %49 = OpLoad %31 
                                          f32 %50 = OpDot %48 %49 
                                                      OpStore %36 %50 
                                          f32 %52 = OpLoad %36 
                                          f32 %53 = OpFNegate %52 
                                          f32 %55 = OpFAdd %53 %54 
                                                      OpStore %51 %55 
                                          f32 %56 = OpLoad %51 
                                          f32 %57 = OpExtInst %1 30 %56 
                                                      OpStore %51 %57 
                                          f32 %58 = OpLoad %51 
                                 Uniform f32* %61 = OpAccessChain %17 %59 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFMul %58 %62 
                                                      OpStore %51 %63 
                                          f32 %64 = OpLoad %51 
                                          f32 %65 = OpExtInst %1 29 %64 
                                                      OpStore %51 %65 
                                 Uniform f32* %67 = OpAccessChain %17 %66 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpLoad %51 
                                          f32 %70 = OpFMul %68 %69 
                                 Uniform f32* %72 = OpAccessChain %17 %71 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFAdd %70 %73 
                                                      OpStore %51 %74 
                               Uniform f32_4* %78 = OpAccessChain %17 %76 
                                        f32_4 %79 = OpLoad %78 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 1 2 
                                        f32_3 %81 = OpFNegate %80 
                               Uniform f32_4* %83 = OpAccessChain %17 %82 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFAdd %81 %85 
                                                      OpStore %75 %86 
                                          f32 %87 = OpLoad %51 
                                        f32_3 %88 = OpCompositeConstruct %87 %87 %87 
                                        f32_3 %89 = OpLoad %75 
                                        f32_3 %90 = OpFMul %88 %89 
                               Uniform f32_4* %91 = OpAccessChain %17 %76 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFAdd %90 %93 
                                                      OpStore %75 %94 
                                        f32_3 %95 = OpLoad %75 
                                        f32_3 %98 = OpExtInst %1 40 %95 %97 
                                                      OpStore %75 %98 
                                        f32_3 %99 = OpLoad %75 
                                       f32_3 %102 = OpExtInst %1 37 %99 %101 
                                                      OpStore %75 %102 
                                  Input f32* %107 = OpAccessChain %37 %105 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFNegate %108 
                                Uniform f32* %111 = OpAccessChain %17 %110 
                                         f32 %112 = OpLoad %111 
                                         f32 %113 = OpFAdd %109 %112 
                                                      OpStore %103 %113 
                                         f32 %114 = OpLoad %103 
                                         f32 %115 = OpExtInst %1 4 %114 
                                Uniform f32* %116 = OpAccessChain %17 %110 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFNegate %117 
                                         f32 %119 = OpFAdd %115 %118 
                                                      OpStore %103 %119 
                                         f32 %120 = OpLoad %103 
                                         f32 %121 = OpExtInst %1 43 %120 %96 %54 
                                                      OpStore %103 %121 
                                         f32 %122 = OpLoad %103 
                                         f32 %123 = OpFNegate %122 
                                         f32 %124 = OpFAdd %123 %54 
                                                      OpStore %103 %124 
                                         f32 %125 = OpLoad %51 
                                         f32 %126 = OpLoad %103 
                                         f32 %127 = OpFMul %125 %126 
                                                      OpStore %51 %127 
                                         f32 %130 = OpLoad %51 
                                Uniform f32* %132 = OpAccessChain %17 %131 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFMul %130 %133 
                                 Output f32* %137 = OpAccessChain %129 %135 
                                                      OpStore %137 %134 
                                       f32_3 %138 = OpLoad %31 
                                       f32_3 %139 = OpFNegate %138 
                                       f32_3 %140 = OpLoad %37 
                                         f32 %141 = OpDot %139 %140 
                                                      OpStore %51 %141 
                                         f32 %142 = OpLoad %51 
                                         f32 %143 = OpLoad %51 
                                         f32 %144 = OpFAdd %142 %143 
                                                      OpStore %51 %144 
                                       f32_3 %145 = OpLoad %37 
                                         f32 %146 = OpLoad %51 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_3 %148 = OpFNegate %147 
                                       f32_3 %149 = OpFMul %145 %148 
                                       f32_3 %150 = OpLoad %31 
                                       f32_3 %151 = OpFNegate %150 
                                       f32_3 %152 = OpFAdd %149 %151 
                                                      OpStore %31 %152 
                                Uniform f32* %157 = OpAccessChain %17 %156 %135 
                                         f32 %158 = OpLoad %157 
                                        bool %159 = OpFOrdLessThan %96 %158 
                                                      OpStore %155 %159 
                                        bool %160 = OpLoad %155 
                                                      OpSelectionMerge %162 None 
                                                      OpBranchConditional %160 %161 %281 
                                             %161 = OpLabel 
                                       f32_3 %163 = OpLoad %31 
                                       f32_3 %164 = OpLoad %31 
                                         f32 %165 = OpDot %163 %164 
                                                      OpStore %51 %165 
                                         f32 %166 = OpLoad %51 
                                         f32 %167 = OpExtInst %1 32 %166 
                                                      OpStore %51 %167 
                                       f32_3 %170 = OpLoad %31 
                                         f32 %171 = OpLoad %51 
                                       f32_3 %172 = OpCompositeConstruct %171 %171 %171 
                                       f32_3 %173 = OpFMul %170 %172 
                                       f32_4 %174 = OpLoad %169 
                                       f32_4 %175 = OpVectorShuffle %174 %173 4 5 6 3 
                                                      OpStore %169 %175 
                                       f32_3 %177 = OpLoad %11 
                                       f32_3 %178 = OpFNegate %177 
                              Uniform f32_4* %180 = OpAccessChain %17 %179 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFAdd %178 %182 
                                                      OpStore %176 %183 
                                       f32_3 %184 = OpLoad %176 
                                       f32_4 %185 = OpLoad %169 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFDiv %184 %186 
                                                      OpStore %176 %187 
                                       f32_3 %189 = OpLoad %11 
                                       f32_3 %190 = OpFNegate %189 
                              Uniform f32_4* %192 = OpAccessChain %17 %191 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %195 = OpFAdd %190 %194 
                                       f32_4 %196 = OpLoad %188 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
                                                      OpStore %188 %197 
                                       f32_4 %198 = OpLoad %188 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_4 %200 = OpLoad %169 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFDiv %199 %201 
                                       f32_4 %203 = OpLoad %188 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 6 3 
                                                      OpStore %188 %204 
                                       f32_4 %209 = OpLoad %169 
                                       f32_4 %210 = OpVectorShuffle %209 %209 0 1 2 0 
                                      bool_4 %212 = OpFOrdLessThan %208 %210 
                                      bool_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                                      OpStore %207 %213 
                                       f32_3 %216 = OpLoad %176 
                                                      OpStore %215 %216 
                               Private bool* %218 = OpAccessChain %207 %217 
                                        bool %219 = OpLoad %218 
                                                      OpSelectionMerge %223 None 
                                                      OpBranchConditional %219 %222 %226 
                                             %222 = OpLabel 
                                Private f32* %224 = OpAccessChain %176 %217 
                                         f32 %225 = OpLoad %224 
                                                      OpStore %221 %225 
                                                      OpBranch %223 
                                             %226 = OpLabel 
                                Private f32* %227 = OpAccessChain %188 %217 
                                         f32 %228 = OpLoad %227 
                                                      OpStore %221 %228 
                                                      OpBranch %223 
                                             %223 = OpLabel 
                                         f32 %229 = OpLoad %221 
                               Function f32* %230 = OpAccessChain %215 %217 
                                                      OpStore %230 %229 
                               Private bool* %231 = OpAccessChain %207 %105 
                                        bool %232 = OpLoad %231 
                                                      OpSelectionMerge %235 None 
                                                      OpBranchConditional %232 %234 %238 
                                             %234 = OpLabel 
                                Private f32* %236 = OpAccessChain %176 %105 
                                         f32 %237 = OpLoad %236 
                                                      OpStore %233 %237 
                                                      OpBranch %235 
                                             %238 = OpLabel 
                                Private f32* %239 = OpAccessChain %188 %105 
                                         f32 %240 = OpLoad %239 
                                                      OpStore %233 %240 
                                                      OpBranch %235 
                                             %235 = OpLabel 
                                         f32 %241 = OpLoad %233 
                               Function f32* %242 = OpAccessChain %215 %105 
                                                      OpStore %242 %241 
                               Private bool* %244 = OpAccessChain %207 %243 
                                        bool %245 = OpLoad %244 
                                                      OpSelectionMerge %248 None 
                                                      OpBranchConditional %245 %247 %251 
                                             %247 = OpLabel 
                                Private f32* %249 = OpAccessChain %176 %243 
                                         f32 %250 = OpLoad %249 
                                                      OpStore %246 %250 
                                                      OpBranch %248 
                                             %251 = OpLabel 
                                Private f32* %252 = OpAccessChain %188 %243 
                                         f32 %253 = OpLoad %252 
                                                      OpStore %246 %253 
                                                      OpBranch %248 
                                             %248 = OpLabel 
                                         f32 %254 = OpLoad %246 
                               Function f32* %255 = OpAccessChain %215 %243 
                                                      OpStore %255 %254 
                                       f32_3 %256 = OpLoad %215 
                                                      OpStore %176 %256 
                                Private f32* %257 = OpAccessChain %176 %105 
                                         f32 %258 = OpLoad %257 
                                Private f32* %259 = OpAccessChain %176 %217 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpExtInst %1 37 %258 %260 
                                                      OpStore %51 %261 
                                Private f32* %262 = OpAccessChain %176 %243 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpLoad %51 
                                         f32 %265 = OpExtInst %1 37 %263 %264 
                                                      OpStore %51 %265 
                                       f32_3 %266 = OpLoad %11 
                              Uniform f32_4* %267 = OpAccessChain %17 %156 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFNegate %269 
                                       f32_3 %271 = OpFAdd %266 %270 
                                                      OpStore %176 %271 
                                       f32_4 %272 = OpLoad %169 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                         f32 %274 = OpLoad %51 
                                       f32_3 %275 = OpCompositeConstruct %274 %274 %274 
                                       f32_3 %276 = OpFMul %273 %275 
                                       f32_3 %277 = OpLoad %176 
                                       f32_3 %278 = OpFAdd %276 %277 
                                       f32_4 %279 = OpLoad %169 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %169 %280 
                                                      OpBranch %162 
                                             %281 = OpLabel 
                                       f32_3 %282 = OpLoad %31 
                                       f32_4 %283 = OpLoad %169 
                                       f32_4 %284 = OpVectorShuffle %283 %282 4 5 6 3 
                                                      OpStore %169 %284 
                                                      OpBranch %162 
                                             %162 = OpLabel 
                       read_only TextureCube %288 = OpLoad %287 
                                     sampler %292 = OpLoad %291 
                read_only TextureCubeSampled %294 = OpSampledImage %288 %292 
                                       f32_4 %295 = OpLoad %169 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_4 %298 = OpImageSampleExplicitLod %294 %296 Lod %14 
                                                      OpStore %169 %298 
                                Private f32* %299 = OpAccessChain %169 %135 
                                         f32 %300 = OpLoad %299 
                                         f32 %302 = OpFAdd %300 %301 
                                                      OpStore %51 %302 
                                Uniform f32* %304 = OpAccessChain %17 %303 %135 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpLoad %51 
                                         f32 %307 = OpFMul %305 %306 
                                         f32 %308 = OpFAdd %307 %54 
                                                      OpStore %51 %308 
                                         f32 %309 = OpLoad %51 
                                         f32 %310 = OpExtInst %1 30 %309 
                                                      OpStore %51 %310 
                                         f32 %311 = OpLoad %51 
                                Uniform f32* %312 = OpAccessChain %17 %303 %105 
                                         f32 %313 = OpLoad %312 
                                         f32 %314 = OpFMul %311 %313 
                                                      OpStore %51 %314 
                                         f32 %315 = OpLoad %51 
                                         f32 %316 = OpExtInst %1 29 %315 
                                                      OpStore %51 %316 
                                         f32 %317 = OpLoad %51 
                                Uniform f32* %318 = OpAccessChain %17 %303 %217 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFMul %317 %319 
                                                      OpStore %51 %320 
                                       f32_4 %321 = OpLoad %169 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                         f32 %323 = OpLoad %51 
                                       f32_3 %324 = OpCompositeConstruct %323 %323 %323 
                                       f32_3 %325 = OpFMul %322 %324 
                                                      OpStore %176 %325 
                                Uniform f32* %327 = OpAccessChain %17 %191 %135 
                                         f32 %328 = OpLoad %327 
                                        bool %330 = OpFOrdLessThan %328 %329 
                                                      OpStore %326 %330 
                                        bool %331 = OpLoad %326 
                                                      OpSelectionMerge %333 None 
                                                      OpBranchConditional %331 %332 %333 
                                             %332 = OpLabel 
                                Uniform f32* %335 = OpAccessChain %17 %334 %135 
                                         f32 %336 = OpLoad %335 
                                        bool %337 = OpFOrdLessThan %96 %336 
                                                      OpStore %326 %337 
                                        bool %338 = OpLoad %326 
                                                      OpSelectionMerge %340 None 
                                                      OpBranchConditional %338 %339 %340 
                                             %339 = OpLabel 
                                       f32_3 %341 = OpLoad %31 
                                       f32_3 %342 = OpLoad %31 
                                         f32 %343 = OpDot %341 %342 
                                                      OpStore %103 %343 
                                         f32 %344 = OpLoad %103 
                                         f32 %345 = OpExtInst %1 32 %344 
                                                      OpStore %103 %345 
                                       f32_3 %346 = OpLoad %31 
                                         f32 %347 = OpLoad %103 
                                       f32_3 %348 = OpCompositeConstruct %347 %347 %347 
                                       f32_3 %349 = OpFMul %346 %348 
                                       f32_4 %350 = OpLoad %188 
                                       f32_4 %351 = OpVectorShuffle %350 %349 4 5 6 3 
                                                      OpStore %188 %351 
                                       f32_3 %353 = OpLoad %11 
                                       f32_3 %354 = OpFNegate %353 
                              Uniform f32_4* %356 = OpAccessChain %17 %355 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_3 %359 = OpFAdd %354 %358 
                                                      OpStore %352 %359 
                                       f32_3 %360 = OpLoad %352 
                                       f32_4 %361 = OpLoad %188 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                       f32_3 %363 = OpFDiv %360 %362 
                                                      OpStore %352 %363 
                                       f32_3 %365 = OpLoad %11 
                                       f32_3 %366 = OpFNegate %365 
                              Uniform f32_4* %368 = OpAccessChain %17 %367 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_3 %371 = OpFAdd %366 %370 
                                                      OpStore %364 %371 
                                       f32_3 %372 = OpLoad %364 
                                       f32_4 %373 = OpLoad %188 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFDiv %372 %374 
                                                      OpStore %364 %375 
                                       f32_4 %377 = OpLoad %188 
                                       f32_4 %378 = OpVectorShuffle %377 %377 0 1 2 0 
                                      bool_4 %379 = OpFOrdLessThan %208 %378 
                                      bool_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                                      OpStore %376 %380 
                                       f32_3 %382 = OpLoad %352 
                                                      OpStore %381 %382 
                               Private bool* %383 = OpAccessChain %376 %217 
                                        bool %384 = OpLoad %383 
                                                      OpSelectionMerge %387 None 
                                                      OpBranchConditional %384 %386 %390 
                                             %386 = OpLabel 
                                Private f32* %388 = OpAccessChain %352 %217 
                                         f32 %389 = OpLoad %388 
                                                      OpStore %385 %389 
                                                      OpBranch %387 
                                             %390 = OpLabel 
                                Private f32* %391 = OpAccessChain %364 %217 
                                         f32 %392 = OpLoad %391 
                                                      OpStore %385 %392 
                                                      OpBranch %387 
                                             %387 = OpLabel 
                                         f32 %393 = OpLoad %385 
                               Function f32* %394 = OpAccessChain %381 %217 
                                                      OpStore %394 %393 
                               Private bool* %395 = OpAccessChain %376 %105 
                                        bool %396 = OpLoad %395 
                                                      OpSelectionMerge %399 None 
                                                      OpBranchConditional %396 %398 %402 
                                             %398 = OpLabel 
                                Private f32* %400 = OpAccessChain %352 %105 
                                         f32 %401 = OpLoad %400 
                                                      OpStore %397 %401 
                                                      OpBranch %399 
                                             %402 = OpLabel 
                                Private f32* %403 = OpAccessChain %364 %105 
                                         f32 %404 = OpLoad %403 
                                                      OpStore %397 %404 
                                                      OpBranch %399 
                                             %399 = OpLabel 
                                         f32 %405 = OpLoad %397 
                               Function f32* %406 = OpAccessChain %381 %105 
                                                      OpStore %406 %405 
                               Private bool* %407 = OpAccessChain %376 %243 
                                        bool %408 = OpLoad %407 
                                                      OpSelectionMerge %411 None 
                                                      OpBranchConditional %408 %410 %414 
                                             %410 = OpLabel 
                                Private f32* %412 = OpAccessChain %352 %243 
                                         f32 %413 = OpLoad %412 
                                                      OpStore %409 %413 
                                                      OpBranch %411 
                                             %414 = OpLabel 
                                Private f32* %415 = OpAccessChain %364 %243 
                                         f32 %416 = OpLoad %415 
                                                      OpStore %409 %416 
                                                      OpBranch %411 
                                             %411 = OpLabel 
                                         f32 %417 = OpLoad %409 
                               Function f32* %418 = OpAccessChain %381 %243 
                                                      OpStore %418 %417 
                                       f32_3 %419 = OpLoad %381 
                                                      OpStore %352 %419 
                                Private f32* %420 = OpAccessChain %352 %105 
                                         f32 %421 = OpLoad %420 
                                Private f32* %422 = OpAccessChain %352 %217 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpExtInst %1 37 %421 %423 
                                                      OpStore %103 %424 
                                Private f32* %425 = OpAccessChain %352 %243 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpLoad %103 
                                         f32 %428 = OpExtInst %1 37 %426 %427 
                                                      OpStore %103 %428 
                                       f32_3 %429 = OpLoad %11 
                              Uniform f32_4* %430 = OpAccessChain %17 %334 
                                       f32_4 %431 = OpLoad %430 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                       f32_3 %433 = OpFNegate %432 
                                       f32_3 %434 = OpFAdd %429 %433 
                                                      OpStore %352 %434 
                                       f32_4 %435 = OpLoad %188 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
                                         f32 %437 = OpLoad %103 
                                       f32_3 %438 = OpCompositeConstruct %437 %437 %437 
                                       f32_3 %439 = OpFMul %436 %438 
                                       f32_3 %440 = OpLoad %352 
                                       f32_3 %441 = OpFAdd %439 %440 
                                                      OpStore %31 %441 
                                                      OpBranch %340 
                                             %340 = OpLabel 
                       read_only TextureCube %443 = OpLoad %442 
                                     sampler %444 = OpLoad %291 
                read_only TextureCubeSampled %445 = OpSampledImage %443 %444 
                                       f32_3 %446 = OpLoad %31 
                                       f32_4 %447 = OpImageSampleExplicitLod %445 %446 Lod %14 
                                                      OpStore %188 %447 
                                Private f32* %448 = OpAccessChain %188 %135 
                                         f32 %449 = OpLoad %448 
                                         f32 %450 = OpFAdd %449 %301 
                                Private f32* %451 = OpAccessChain %31 %217 
                                                      OpStore %451 %450 
                                Uniform f32* %453 = OpAccessChain %17 %452 %135 
                                         f32 %454 = OpLoad %453 
                                Private f32* %455 = OpAccessChain %31 %217 
                                         f32 %456 = OpLoad %455 
                                         f32 %457 = OpFMul %454 %456 
                                         f32 %458 = OpFAdd %457 %54 
                                Private f32* %459 = OpAccessChain %31 %217 
                                                      OpStore %459 %458 
                                Private f32* %460 = OpAccessChain %31 %217 
                                         f32 %461 = OpLoad %460 
                                         f32 %462 = OpExtInst %1 30 %461 
                                Private f32* %463 = OpAccessChain %31 %217 
                                                      OpStore %463 %462 
                                Private f32* %464 = OpAccessChain %31 %217 
                                         f32 %465 = OpLoad %464 
                                Uniform f32* %466 = OpAccessChain %17 %452 %105 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFMul %465 %467 
                                Private f32* %469 = OpAccessChain %31 %217 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %31 %217 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpExtInst %1 29 %471 
                                Private f32* %473 = OpAccessChain %31 %217 
                                                      OpStore %473 %472 
                                Private f32* %474 = OpAccessChain %31 %217 
                                         f32 %475 = OpLoad %474 
                                Uniform f32* %476 = OpAccessChain %17 %452 %217 
                                         f32 %477 = OpLoad %476 
                                         f32 %478 = OpFMul %475 %477 
                                Private f32* %479 = OpAccessChain %31 %217 
                                                      OpStore %479 %478 
                                       f32_4 %480 = OpLoad %188 
                                       f32_3 %481 = OpVectorShuffle %480 %480 0 1 2 
                                       f32_3 %482 = OpLoad %31 
                                       f32_3 %483 = OpVectorShuffle %482 %482 0 0 0 
                                       f32_3 %484 = OpFMul %481 %483 
                                                      OpStore %31 %484 
                                         f32 %485 = OpLoad %51 
                                       f32_3 %486 = OpCompositeConstruct %485 %485 %485 
                                       f32_4 %487 = OpLoad %169 
                                       f32_3 %488 = OpVectorShuffle %487 %487 0 1 2 
                                       f32_3 %489 = OpFMul %486 %488 
                                       f32_3 %490 = OpLoad %31 
                                       f32_3 %491 = OpFNegate %490 
                                       f32_3 %492 = OpFAdd %489 %491 
                                       f32_4 %493 = OpLoad %169 
                                       f32_4 %494 = OpVectorShuffle %493 %492 4 5 6 3 
                                                      OpStore %169 %494 
                              Uniform f32_4* %495 = OpAccessChain %17 %191 
                                       f32_4 %496 = OpLoad %495 
                                       f32_3 %497 = OpVectorShuffle %496 %496 3 3 3 
                                       f32_4 %498 = OpLoad %169 
                                       f32_3 %499 = OpVectorShuffle %498 %498 0 1 2 
                                       f32_3 %500 = OpFMul %497 %499 
                                       f32_3 %501 = OpLoad %31 
                                       f32_3 %502 = OpFAdd %500 %501 
                                                      OpStore %176 %502 
                                                      OpBranch %333 
                                             %333 = OpLabel 
                                       f32_3 %503 = OpLoad %9 
                                         f32 %504 = OpLoad %25 
                                       f32_3 %505 = OpCompositeConstruct %504 %504 %504 
                                       f32_3 %506 = OpFMul %503 %505 
                              Uniform f32_4* %508 = OpAccessChain %17 %507 
                                       f32_4 %509 = OpLoad %508 
                                       f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
                                       f32_3 %511 = OpFAdd %506 %510 
                                                      OpStore %9 %511 
                                       f32_3 %512 = OpLoad %9 
                                       f32_3 %513 = OpLoad %9 
                                         f32 %514 = OpDot %512 %513 
                                                      OpStore %25 %514 
                                         f32 %515 = OpLoad %25 
                                         f32 %517 = OpExtInst %1 40 %515 %516 
                                                      OpStore %25 %517 
                                         f32 %518 = OpLoad %25 
                                         f32 %519 = OpExtInst %1 32 %518 
                                                      OpStore %25 %519 
                                         f32 %520 = OpLoad %25 
                                       f32_3 %521 = OpCompositeConstruct %520 %520 %520 
                                       f32_3 %522 = OpLoad %9 
                                       f32_3 %523 = OpFMul %521 %522 
                                                      OpStore %9 %523 
                                       f32_3 %524 = OpLoad %43 
                              Uniform f32_4* %525 = OpAccessChain %17 %507 
                                       f32_4 %526 = OpLoad %525 
                                       f32_3 %527 = OpVectorShuffle %526 %526 0 1 2 
                                         f32 %528 = OpDot %524 %527 
                                                      OpStore %25 %528 
                                         f32 %529 = OpLoad %25 
                                         f32 %530 = OpExtInst %1 43 %529 %96 %54 
                                                      OpStore %25 %530 
                              Uniform f32_4* %531 = OpAccessChain %17 %507 
                                       f32_4 %532 = OpLoad %531 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
                                       f32_3 %534 = OpLoad %9 
                                         f32 %535 = OpDot %533 %534 
                                Private f32* %536 = OpAccessChain %9 %217 
                                                      OpStore %536 %535 
                                Private f32* %537 = OpAccessChain %9 %217 
                                         f32 %538 = OpLoad %537 
                                         f32 %539 = OpExtInst %1 43 %538 %96 %54 
                                Private f32* %540 = OpAccessChain %9 %217 
                                                      OpStore %540 %539 
                                         f32 %542 = OpLoad %36 
                                         f32 %543 = OpExtInst %1 4 %542 
                                         f32 %544 = OpLoad %25 
                                         f32 %545 = OpFAdd %543 %544 
                                Private f32* %546 = OpAccessChain %541 %217 
                                                      OpStore %546 %545 
                                Private f32* %547 = OpAccessChain %541 %217 
                                         f32 %548 = OpLoad %547 
                                         f32 %550 = OpFAdd %548 %549 
                                Private f32* %551 = OpAccessChain %541 %217 
                                                      OpStore %551 %550 
                                Private f32* %553 = OpAccessChain %541 %217 
                                         f32 %554 = OpLoad %553 
                                         f32 %555 = OpFDiv %552 %554 
                                Private f32* %556 = OpAccessChain %541 %217 
                                                      OpStore %556 %555 
                                         f32 %557 = OpLoad %25 
                                Private f32* %558 = OpAccessChain %541 %217 
                                         f32 %559 = OpLoad %558 
                                         f32 %560 = OpFMul %557 %559 
                                Private f32* %561 = OpAccessChain %541 %217 
                                                      OpStore %561 %560 
                                Private f32* %562 = OpAccessChain %541 %217 
                                         f32 %563 = OpLoad %562 
                                         f32 %565 = OpFMul %563 %564 
                                Private f32* %566 = OpAccessChain %541 %217 
                                                      OpStore %566 %565 
                                       f32_3 %567 = OpLoad %541 
                                       f32_3 %568 = OpVectorShuffle %567 %567 0 0 0 
                              Uniform f32_4* %570 = OpAccessChain %17 %569 
                                       f32_4 %571 = OpLoad %570 
                                       f32_3 %572 = OpVectorShuffle %571 %571 0 1 2 
                                       f32_3 %573 = OpFMul %568 %572 
                                                      OpStore %541 %573 
                                Private f32* %574 = OpAccessChain %9 %217 
                                         f32 %575 = OpLoad %574 
                                         f32 %576 = OpFNegate %575 
                                         f32 %577 = OpFAdd %576 %54 
                                Private f32* %578 = OpAccessChain %9 %217 
                                                      OpStore %578 %577 
                                Private f32* %579 = OpAccessChain %9 %217 
                                         f32 %580 = OpLoad %579 
                                Private f32* %581 = OpAccessChain %9 %217 
                                         f32 %582 = OpLoad %581 
                                         f32 %583 = OpFMul %580 %582 
                                Private f32* %584 = OpAccessChain %31 %217 
                                                      OpStore %584 %583 
                                Private f32* %585 = OpAccessChain %31 %217 
                                         f32 %586 = OpLoad %585 
                                Private f32* %587 = OpAccessChain %31 %217 
                                         f32 %588 = OpLoad %587 
                                         f32 %589 = OpFMul %586 %588 
                                Private f32* %590 = OpAccessChain %31 %217 
                                                      OpStore %590 %589 
                                Private f32* %591 = OpAccessChain %9 %217 
                                         f32 %592 = OpLoad %591 
                                Private f32* %593 = OpAccessChain %31 %217 
                                         f32 %594 = OpLoad %593 
                                         f32 %595 = OpFMul %592 %594 
                                Private f32* %596 = OpAccessChain %9 %217 
                                                      OpStore %596 %595 
                                Private f32* %597 = OpAccessChain %9 %217 
                                         f32 %598 = OpLoad %597 
                                         f32 %600 = OpFMul %598 %599 
                                         f32 %602 = OpFAdd %600 %601 
                                Private f32* %603 = OpAccessChain %9 %217 
                                                      OpStore %603 %602 
                                       f32_3 %604 = OpLoad %176 
                                       f32_3 %606 = OpFMul %604 %605 
                                                      OpStore %31 %606 
                                         f32 %607 = OpLoad %36 
                                         f32 %608 = OpExtInst %1 4 %607 
                                         f32 %609 = OpFNegate %608 
                                         f32 %610 = OpFAdd %609 %54 
                                                      OpStore %36 %610 
                                         f32 %611 = OpLoad %36 
                                         f32 %612 = OpLoad %36 
                                         f32 %613 = OpFMul %611 %612 
                                Private f32* %614 = OpAccessChain %43 %217 
                                                      OpStore %614 %613 
                                Private f32* %615 = OpAccessChain %43 %217 
                                         f32 %616 = OpLoad %615 
                                Private f32* %617 = OpAccessChain %43 %217 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                Private f32* %620 = OpAccessChain %43 %217 
                                                      OpStore %620 %619 
                                         f32 %621 = OpLoad %36 
                                Private f32* %622 = OpAccessChain %43 %217 
                                         f32 %623 = OpLoad %622 
                                         f32 %624 = OpFMul %621 %623 
                                                      OpStore %36 %624 
                                         f32 %625 = OpLoad %36 
                                         f32 %627 = OpFMul %625 %626 
                                         f32 %628 = OpFAdd %627 %601 
                                                      OpStore %36 %628 
                                         f32 %629 = OpLoad %36 
                                       f32_3 %630 = OpCompositeConstruct %629 %629 %629 
                                       f32_3 %631 = OpLoad %31 
                                       f32_3 %632 = OpFMul %630 %631 
                                                      OpStore %31 %632 
                                       f32_3 %633 = OpLoad %541 
                                       f32_3 %634 = OpLoad %9 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 0 0 
                                       f32_3 %636 = OpFMul %633 %635 
                                       f32_3 %637 = OpLoad %31 
                                       f32_3 %638 = OpFAdd %636 %637 
                                                      OpStore %9 %638 
                                       f32_3 %639 = OpLoad %75 
                                       f32_3 %640 = OpLoad %9 
                                       f32_3 %641 = OpFAdd %639 %640 
                                                      OpStore %9 %641 
                                         f32 %643 = OpLoad %642 
                                Uniform f32* %645 = OpAccessChain %17 %644 %105 
                                         f32 %646 = OpLoad %645 
                                         f32 %647 = OpFDiv %643 %646 
                                                      OpStore %25 %647 
                                         f32 %648 = OpLoad %25 
                                         f32 %649 = OpFNegate %648 
                                         f32 %650 = OpFAdd %649 %54 
                                                      OpStore %25 %650 
                                         f32 %651 = OpLoad %25 
                                Uniform f32* %652 = OpAccessChain %17 %644 %243 
                                         f32 %653 = OpLoad %652 
                                         f32 %654 = OpFMul %651 %653 
                                                      OpStore %25 %654 
                                         f32 %655 = OpLoad %25 
                                         f32 %656 = OpExtInst %1 40 %655 %96 
                                                      OpStore %25 %656 
                                         f32 %657 = OpLoad %25 
                                Uniform f32* %659 = OpAccessChain %17 %658 %243 
                                         f32 %660 = OpLoad %659 
                                         f32 %661 = OpFMul %657 %660 
                                Uniform f32* %662 = OpAccessChain %17 %658 %135 
                                         f32 %663 = OpLoad %662 
                                         f32 %664 = OpFAdd %661 %663 
                                                      OpStore %25 %664 
                                         f32 %665 = OpLoad %25 
                                         f32 %666 = OpExtInst %1 43 %665 %96 %54 
                                                      OpStore %25 %666 
                                       f32_3 %667 = OpLoad %9 
                              Uniform f32_4* %669 = OpAccessChain %17 %668 
                                       f32_4 %670 = OpLoad %669 
                                       f32_3 %671 = OpVectorShuffle %670 %670 0 1 2 
                                       f32_3 %672 = OpFNegate %671 
                                       f32_3 %673 = OpFAdd %667 %672 
                                                      OpStore %9 %673 
                                         f32 %674 = OpLoad %25 
                                       f32_3 %675 = OpCompositeConstruct %674 %674 %674 
                                       f32_3 %676 = OpLoad %9 
                                       f32_3 %677 = OpFMul %675 %676 
                              Uniform f32_4* %678 = OpAccessChain %17 %668 
                                       f32_4 %679 = OpLoad %678 
                                       f32_3 %680 = OpVectorShuffle %679 %679 0 1 2 
                                       f32_3 %681 = OpFAdd %677 %680 
                                       f32_4 %682 = OpLoad %129 
                                       f32_4 %683 = OpVectorShuffle %682 %681 4 5 6 3 
                                                      OpStore %129 %683 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 387
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationControl %4 "main" %23 %25 %30 %37 %39 %47 %51 %58 %60 %65 %67 %72 %74 %79 %81 %86 %88 %219 %371 
                                                      OpExecutionMode %4 OutputVertices 4 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %25 BuiltIn WorkgroupSize 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %37 Location 37 
                                                      OpDecorate %39 Location 39 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %51 Location 51 
                                                      OpDecorate %58 Location 58 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate %65 Location 65 
                                                      OpDecorate vs_TEXCOORD1 Location 67 
                                                      OpDecorate %72 Location 72 
                                                      OpDecorate vs_TEXCOORD2 Location 74 
                                                      OpDecorate %79 Location 79 
                                                      OpDecorate vs_TEXCOORD3 Location 81 
                                                      OpDecorate %86 Location 86 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %96 ArrayStride 96 
                                                      OpMemberDecorate %97 0 Offset 97 
                                                      OpMemberDecorate %97 1 Offset 97 
                                                      OpMemberDecorate %97 2 Offset 97 
                                                      OpMemberDecorate %97 3 Offset 97 
                                                      OpDecorate %97 Block 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate %219 Patch 
                                                      OpDecorate %219 BuiltIn 219 
                                                      OpDecorate %371 Patch 
                                                      OpDecorate %371 BuiltIn 371 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %8 = OpTypeInt 32 1 
                                               %9 = OpTypePointer Function %8 
                                              %10 = OpTypeFunction %2 %9 
                                              %17 = OpTypeFloat 32 
                                              %18 = OpTypeVector %17 4 
                                              %19 = OpTypeInt 32 0 
                                          u32 %20 = OpConstant 3 
                                              %21 = OpTypeArray %18 %20 
                                              %22 = OpTypePointer Output %21 
                             Output f32_4[3]* %23 = OpVariable Output 
                                              %24 = OpTypePointer Input %8 
                                   Input i32* %25 = OpVariable Input 
                                          u32 %27 = OpConstant 32 
                                              %28 = OpTypeArray %18 %27 
                                              %29 = OpTypePointer Input %28 
                             Input f32_4[32]* %30 = OpVariable Input 
                                              %32 = OpTypePointer Input %18 
                                              %35 = OpTypePointer Output %18 
                             Output f32_4[3]* %37 = OpVariable Output 
                             Input f32_4[32]* %39 = OpVariable Input 
                                              %44 = OpTypeVector %17 3 
                                              %45 = OpTypeArray %44 %20 
                                              %46 = OpTypePointer Output %45 
                             Output f32_3[3]* %47 = OpVariable Output 
                                              %49 = OpTypeArray %44 %27 
                                              %50 = OpTypePointer Input %49 
                             Input f32_3[32]* %51 = OpVariable Input 
                                              %53 = OpTypePointer Input %44 
                                              %56 = OpTypePointer Output %44 
                             Output f32_4[3]* %58 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD0 = OpVariable Input 
                             Output f32_4[3]* %65 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD1 = OpVariable Input 
                             Output f32_4[3]* %72 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD2 = OpVariable Input 
                             Output f32_4[3]* %79 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD3 = OpVariable Input 
                             Output f32_4[3]* %86 = OpVariable Output 
                             Input f32_4[32]* %88 = OpVariable Input 
                                              %93 = OpTypePointer Private %44 
                               Private f32_3* %94 = OpVariable Private 
                                          u32 %95 = OpConstant 4 
                                              %96 = OpTypeArray %18 %95 
                                              %97 = OpTypeStruct %44 %18 %96 %17 
                                              %98 = OpTypePointer Uniform %97 
Uniform struct {f32_3; f32_4; f32_4[4]; f32;}* %99 = OpVariable Uniform 
                                         i32 %100 = OpConstant 2 
                                         i32 %101 = OpConstant 1 
                                             %102 = OpTypePointer Uniform %18 
                                         i32 %110 = OpConstant 0 
                                         i32 %129 = OpConstant 3 
                              Private f32_3* %139 = OpVariable Private 
                              Private f32_3* %174 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                             %182 = OpTypePointer Uniform %44 
                                             %187 = OpTypePointer Private %17 
                                Private f32* %188 = OpVariable Private 
                                             %195 = OpTypePointer Uniform %17 
                                Private f32* %203 = OpVariable Private 
                                         u32 %210 = OpConstant 1 
                                             %217 = OpTypeArray %17 %95 
                                             %218 = OpTypePointer Output %217 
                              Output f32[4]* %219 = OpVariable Output 
                                         f32 %221 = OpConstant 3.674022E-40 
                                             %223 = OpTypePointer Output %17 
                              Private f32_3* %259 = OpVariable Private 
                                         u32 %285 = OpConstant 0 
                              Private f32_3* %325 = OpVariable Private 
                                         u32 %368 = OpConstant 2 
                                             %369 = OpTypeArray %17 %368 
                                             %370 = OpTypePointer Output %369 
                              Output f32[2]* %371 = OpVariable Output 
                                         f32 %374 = OpConstant 3.674022E-40 
                                             %379 = OpTypeBool 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %383 = OpVariable Function 
                               Function i32* %385 = OpVariable Function 
                                        void %377 = OpFunctionCall %6 
                                                      OpControlBarrier 368 95 285 
                                         i32 %378 = OpLoad %25 
                                        bool %380 = OpIEqual %378 %110 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %380 %381 %382 
                                             %381 = OpLabel 
                                                      OpStore %383 %110 
                                        void %384 = OpFunctionCall %12 %383 
                                                      OpStore %385 %110 
                                        void %386 = OpFunctionCall %15 %385 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
                                          void %6 = OpFunction None %3 
                                               %7 = OpLabel 
                                          i32 %26 = OpLoad %25 
                                          i32 %31 = OpLoad %25 
                                 Input f32_4* %33 = OpAccessChain %30 %31 
                                        f32_4 %34 = OpLoad %33 
                                Output f32_4* %36 = OpAccessChain %23 %26 
                                                      OpStore %36 %34 
                                          i32 %38 = OpLoad %25 
                                          i32 %40 = OpLoad %25 
                                 Input f32_4* %41 = OpAccessChain %39 %40 
                                        f32_4 %42 = OpLoad %41 
                                Output f32_4* %43 = OpAccessChain %37 %38 
                                                      OpStore %43 %42 
                                          i32 %48 = OpLoad %25 
                                          i32 %52 = OpLoad %25 
                                 Input f32_3* %54 = OpAccessChain %51 %52 
                                        f32_3 %55 = OpLoad %54 
                                Output f32_3* %57 = OpAccessChain %47 %48 
                                                      OpStore %57 %55 
                                          i32 %59 = OpLoad %25 
                                          i32 %61 = OpLoad %25 
                                 Input f32_4* %62 = OpAccessChain vs_TEXCOORD0 %61 
                                        f32_4 %63 = OpLoad %62 
                                Output f32_4* %64 = OpAccessChain %58 %59 
                                                      OpStore %64 %63 
                                          i32 %66 = OpLoad %25 
                                          i32 %68 = OpLoad %25 
                                 Input f32_4* %69 = OpAccessChain vs_TEXCOORD1 %68 
                                        f32_4 %70 = OpLoad %69 
                                Output f32_4* %71 = OpAccessChain %65 %66 
                                                      OpStore %71 %70 
                                          i32 %73 = OpLoad %25 
                                          i32 %75 = OpLoad %25 
                                 Input f32_4* %76 = OpAccessChain vs_TEXCOORD2 %75 
                                        f32_4 %77 = OpLoad %76 
                                Output f32_4* %78 = OpAccessChain %72 %73 
                                                      OpStore %78 %77 
                                          i32 %80 = OpLoad %25 
                                          i32 %82 = OpLoad %25 
                                 Input f32_4* %83 = OpAccessChain vs_TEXCOORD3 %82 
                                        f32_4 %84 = OpLoad %83 
                                Output f32_4* %85 = OpAccessChain %79 %80 
                                                      OpStore %85 %84 
                                          i32 %87 = OpLoad %25 
                                          i32 %89 = OpLoad %25 
                                 Input f32_4* %90 = OpAccessChain %88 %89 
                                        f32_4 %91 = OpLoad %90 
                                Output f32_4* %92 = OpAccessChain %86 %87 
                                                      OpStore %92 %91 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %12 = OpFunction None %10 
                                Function i32* %11 = OpFunctionParameter 
                                              %13 = OpLabel 
                              Uniform f32_4* %103 = OpAccessChain %99 %100 %101 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                Input f32_4* %106 = OpAccessChain %30 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 1 1 1 
                                       f32_3 %109 = OpFMul %105 %108 
                                                      OpStore %94 %109 
                              Uniform f32_4* %111 = OpAccessChain %99 %100 %110 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                Input f32_4* %114 = OpAccessChain %30 %101 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %113 %116 
                                       f32_3 %118 = OpLoad %94 
                                       f32_3 %119 = OpFAdd %117 %118 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %99 %100 %100 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                Input f32_4* %123 = OpAccessChain %30 %101 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 2 2 2 
                                       f32_3 %126 = OpFMul %122 %125 
                                       f32_3 %127 = OpLoad %94 
                                       f32_3 %128 = OpFAdd %126 %127 
                                                      OpStore %94 %128 
                              Uniform f32_4* %130 = OpAccessChain %99 %100 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                Input f32_4* %133 = OpAccessChain %30 %101 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 3 3 3 
                                       f32_3 %136 = OpFMul %132 %135 
                                       f32_3 %137 = OpLoad %94 
                                       f32_3 %138 = OpFAdd %136 %137 
                                                      OpStore %94 %138 
                              Uniform f32_4* %140 = OpAccessChain %99 %100 %101 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                Input f32_4* %143 = OpAccessChain %30 %100 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 1 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                                      OpStore %139 %146 
                              Uniform f32_4* %147 = OpAccessChain %99 %100 %110 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                Input f32_4* %150 = OpAccessChain %30 %100 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 0 0 
                                       f32_3 %153 = OpFMul %149 %152 
                                       f32_3 %154 = OpLoad %139 
                                       f32_3 %155 = OpFAdd %153 %154 
                                                      OpStore %139 %155 
                              Uniform f32_4* %156 = OpAccessChain %99 %100 %100 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                Input f32_4* %159 = OpAccessChain %30 %100 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 2 2 2 
                                       f32_3 %162 = OpFMul %158 %161 
                                       f32_3 %163 = OpLoad %139 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %139 %164 
                              Uniform f32_4* %165 = OpAccessChain %99 %100 %129 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                Input f32_4* %168 = OpAccessChain %30 %100 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 3 3 3 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_3 %172 = OpLoad %139 
                                       f32_3 %173 = OpFAdd %171 %172 
                                                      OpStore %139 %173 
                                       f32_3 %175 = OpLoad %94 
                                       f32_3 %176 = OpLoad %139 
                                       f32_3 %177 = OpFAdd %175 %176 
                                                      OpStore %174 %177 
                                       f32_3 %178 = OpLoad %174 
                                       f32_3 %181 = OpFMul %178 %180 
                              Uniform f32_3* %183 = OpAccessChain %99 %110 
                                       f32_3 %184 = OpLoad %183 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpFAdd %181 %185 
                                                      OpStore %174 %186 
                                       f32_3 %189 = OpLoad %174 
                                       f32_3 %190 = OpLoad %174 
                                         f32 %191 = OpDot %189 %190 
                                                      OpStore %188 %191 
                                         f32 %192 = OpLoad %188 
                                         f32 %193 = OpExtInst %1 31 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                Uniform f32* %196 = OpAccessChain %99 %129 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %194 %197 
                                                      OpStore %188 %198 
                                       f32_3 %199 = OpLoad %94 
                                       f32_3 %200 = OpLoad %139 
                                       f32_3 %201 = OpFNegate %200 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore %174 %202 
                                       f32_3 %204 = OpLoad %174 
                                       f32_3 %205 = OpLoad %174 
                                         f32 %206 = OpDot %204 %205 
                                                      OpStore %203 %206 
                                         f32 %207 = OpLoad %203 
                                         f32 %208 = OpExtInst %1 31 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                Uniform f32* %211 = OpAccessChain %99 %101 %210 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %209 %212 
                                                      OpStore %203 %213 
                                         f32 %214 = OpLoad %203 
                                         f32 %215 = OpLoad %188 
                                         f32 %216 = OpFDiv %214 %215 
                                                      OpStore %188 %216 
                                         f32 %220 = OpLoad %188 
                                         f32 %222 = OpExtInst %1 40 %220 %221 
                                 Output f32* %224 = OpAccessChain %219 %110 
                                                      OpStore %224 %222 
                              Uniform f32_4* %225 = OpAccessChain %99 %100 %101 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                Input f32_4* %228 = OpAccessChain %30 %110 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 1 1 1 
                                       f32_3 %231 = OpFMul %227 %230 
                                                      OpStore %174 %231 
                              Uniform f32_4* %232 = OpAccessChain %99 %100 %110 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                Input f32_4* %235 = OpAccessChain %30 %110 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 0 0 
                                       f32_3 %238 = OpFMul %234 %237 
                                       f32_3 %239 = OpLoad %174 
                                       f32_3 %240 = OpFAdd %238 %239 
                                                      OpStore %174 %240 
                              Uniform f32_4* %241 = OpAccessChain %99 %100 %100 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                Input f32_4* %244 = OpAccessChain %30 %110 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 2 2 2 
                                       f32_3 %247 = OpFMul %243 %246 
                                       f32_3 %248 = OpLoad %174 
                                       f32_3 %249 = OpFAdd %247 %248 
                                                      OpStore %174 %249 
                              Uniform f32_4* %250 = OpAccessChain %99 %100 %129 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                Input f32_4* %253 = OpAccessChain %30 %110 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 3 3 3 
                                       f32_3 %256 = OpFMul %252 %255 
                                       f32_3 %257 = OpLoad %174 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore %174 %258 
                                       f32_3 %260 = OpLoad %139 
                                       f32_3 %261 = OpLoad %174 
                                       f32_3 %262 = OpFAdd %260 %261 
                                                      OpStore %259 %262 
                                       f32_3 %263 = OpLoad %139 
                                       f32_3 %264 = OpLoad %174 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_3 %266 = OpFAdd %263 %265 
                                                      OpStore %139 %266 
                                       f32_3 %267 = OpLoad %139 
                                       f32_3 %268 = OpLoad %139 
                                         f32 %269 = OpDot %267 %268 
                                                      OpStore %188 %269 
                                         f32 %270 = OpLoad %188 
                                         f32 %271 = OpExtInst %1 31 %270 
                                                      OpStore %188 %271 
                                         f32 %272 = OpLoad %188 
                                Uniform f32* %273 = OpAccessChain %99 %101 %210 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                                      OpStore %188 %275 
                                       f32_3 %276 = OpLoad %259 
                                       f32_3 %277 = OpFMul %276 %180 
                              Uniform f32_3* %278 = OpAccessChain %99 %110 
                                       f32_3 %279 = OpLoad %278 
                                       f32_3 %280 = OpFNegate %279 
                                       f32_3 %281 = OpFAdd %277 %280 
                                                      OpStore %139 %281 
                                       f32_3 %282 = OpLoad %139 
                                       f32_3 %283 = OpLoad %139 
                                         f32 %284 = OpDot %282 %283 
                                Private f32* %286 = OpAccessChain %139 %285 
                                                      OpStore %286 %284 
                                Private f32* %287 = OpAccessChain %139 %285 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 31 %288 
                                Private f32* %290 = OpAccessChain %139 %285 
                                                      OpStore %290 %289 
                                Private f32* %291 = OpAccessChain %139 %285 
                                         f32 %292 = OpLoad %291 
                                Uniform f32* %293 = OpAccessChain %99 %129 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFMul %292 %294 
                                Private f32* %296 = OpAccessChain %139 %285 
                                                      OpStore %296 %295 
                                         f32 %297 = OpLoad %188 
                                Private f32* %298 = OpAccessChain %139 %285 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFDiv %297 %299 
                                                      OpStore %188 %300 
                                         f32 %301 = OpLoad %188 
                                         f32 %302 = OpExtInst %1 40 %301 %221 
                                 Output f32* %303 = OpAccessChain %219 %101 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %94 
                                       f32_3 %305 = OpLoad %174 
                                       f32_3 %306 = OpFAdd %304 %305 
                                                      OpStore %139 %306 
                                       f32_3 %307 = OpLoad %94 
                                       f32_3 %308 = OpFNegate %307 
                                       f32_3 %309 = OpLoad %174 
                                       f32_3 %310 = OpFAdd %308 %309 
                                                      OpStore %94 %310 
                                       f32_3 %311 = OpLoad %94 
                                       f32_3 %312 = OpLoad %94 
                                         f32 %313 = OpDot %311 %312 
                                Private f32* %314 = OpAccessChain %94 %285 
                                                      OpStore %314 %313 
                                Private f32* %315 = OpAccessChain %94 %285 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpExtInst %1 31 %316 
                                Private f32* %318 = OpAccessChain %94 %285 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %94 %285 
                                         f32 %320 = OpLoad %319 
                                Uniform f32* %321 = OpAccessChain %99 %101 %210 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %320 %322 
                                Private f32* %324 = OpAccessChain %94 %285 
                                                      OpStore %324 %323 
                                       f32_3 %326 = OpLoad %139 
                                       f32_3 %327 = OpFMul %326 %180 
                              Uniform f32_3* %328 = OpAccessChain %99 %110 
                                       f32_3 %329 = OpLoad %328 
                                       f32_3 %330 = OpFNegate %329 
                                       f32_3 %331 = OpFAdd %327 %330 
                                                      OpStore %325 %331 
                                       f32_3 %332 = OpLoad %325 
                                       f32_3 %333 = OpLoad %325 
                                         f32 %334 = OpDot %332 %333 
                                Private f32* %335 = OpAccessChain %325 %285 
                                                      OpStore %335 %334 
                                Private f32* %336 = OpAccessChain %325 %285 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpExtInst %1 31 %337 
                                Private f32* %339 = OpAccessChain %325 %285 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %325 %285 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %99 %129 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFMul %341 %343 
                                Private f32* %345 = OpAccessChain %325 %285 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %94 %285 
                                         f32 %347 = OpLoad %346 
                                Private f32* %348 = OpAccessChain %325 %285 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFDiv %347 %349 
                                Private f32* %351 = OpAccessChain %94 %285 
                                                      OpStore %351 %350 
                                Private f32* %352 = OpAccessChain %94 %285 
                                         f32 %353 = OpLoad %352 
                                         f32 %354 = OpExtInst %1 40 %353 %221 
                                 Output f32* %355 = OpAccessChain %219 %100 
                                                      OpStore %355 %354 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %15 = OpFunction None %10 
                                Function i32* %14 = OpFunctionParameter 
                                              %16 = OpLabel 
                                 Output f32* %356 = OpAccessChain %219 %100 
                                         f32 %357 = OpLoad %356 
                                 Output f32* %358 = OpAccessChain %219 %100 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                Private f32* %361 = OpAccessChain %94 %285 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %94 %285 
                                         f32 %363 = OpLoad %362 
                                 Output f32* %364 = OpAccessChain %219 %100 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFAdd %363 %365 
                                Private f32* %367 = OpAccessChain %94 %285 
                                                      OpStore %367 %366 
                                Private f32* %372 = OpAccessChain %94 %285 
                                         f32 %373 = OpLoad %372 
                                         f32 %375 = OpFMul %373 %374 
                                 Output f32* %376 = OpAccessChain %371 %110 
                                                      OpStore %376 %375 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 403
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationEvaluation %4 "main" %12 %20 %139 %236 %301 %341 %346 %349 %387 
                                                      OpExecutionMode %4 Triangles 
                                                      OpExecutionMode %4 SpacingFractionalOdd 
                                                      OpExecutionMode %4 VertexOrderCw 
                                                      OpDecorate %12 BuiltIn TessLevelInner 
                                                      OpDecorate %20 Location 20 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpMemberDecorate %60 0 Offset 60 
                                                      OpMemberDecorate %60 1 Offset 60 
                                                      OpMemberDecorate %60 2 Offset 60 
                                                      OpMemberDecorate %60 3 Offset 60 
                                                      OpMemberDecorate %60 4 Offset 60 
                                                      OpMemberDecorate %60 5 Offset 60 
                                                      OpMemberDecorate %60 6 Offset 60 
                                                      OpMemberDecorate %60 7 Offset 60 
                                                      OpMemberDecorate %60 8 Offset 60 
                                                      OpMemberDecorate %60 9 Offset 60 
                                                      OpMemberDecorate %60 10 Offset 60 
                                                      OpMemberDecorate %60 11 Offset 60 
                                                      OpMemberDecorate %60 12 Offset 60 
                                                      OpDecorate %60 Block 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpDecorate %96 DescriptorSet 96 
                                                      OpDecorate %96 Binding 96 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate %110 DescriptorSet 110 
                                                      OpDecorate %110 Binding 110 
                                                      OpDecorate %112 DescriptorSet 112 
                                                      OpDecorate %112 Binding 112 
                                                      OpDecorate %139 Location 139 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate %301 Location 301 
                                                      OpMemberDecorate %339 0 BuiltIn 339 
                                                      OpMemberDecorate %339 1 BuiltIn 339 
                                                      OpMemberDecorate %339 2 BuiltIn 339 
                                                      OpDecorate %339 Block 
                                                      OpDecorate %346 Location 346 
                                                      OpDecorate %349 Location 349 
                                                      OpDecorate %387 Location 387 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 32 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypePointer Input %18 
                             Input f32_4[32]* %20 = OpVariable Input 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Input %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %42 = OpConstant 2 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                              %60 = OpTypeStruct %7 %7 %7 %7 %7 %57 %58 %59 %6 %6 %7 %6 %6 
                                              %61 = OpTypePointer Uniform %60 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32; f32;}* %62 = OpVariable Uniform 
                                          i32 %63 = OpConstant 10 
                                              %64 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 8 
                                              %79 = OpTypePointer Uniform %6 
                                          i32 %82 = OpConstant 9 
                                              %92 = OpTypePointer Private %6 
                                 Private f32* %93 = OpVariable Private 
                                              %94 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %95 = OpTypePointer UniformConstant %94 
         UniformConstant read_only Texture2D* %96 = OpVariable UniformConstant 
                                              %98 = OpTypeSampler 
                                              %99 = OpTypePointer UniformConstant %98 
                    UniformConstant sampler* %100 = OpVariable UniformConstant 
                                             %102 = OpTypeSampledImage %94 
                                         f32 %106 = OpConstant 3.674022E-40 
                                         u32 %108 = OpConstant 0 
        UniformConstant read_only Texture2D* %110 = OpVariable UniformConstant 
                    UniformConstant sampler* %112 = OpVariable UniformConstant 
                                         i32 %127 = OpConstant 6 
                              Private f32_4* %134 = OpVariable Private 
                                             %137 = OpTypeArray %10 %17 
                                             %138 = OpTypePointer Input %137 
                            Input f32_3[32]* %139 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         u32 %179 = OpConstant 2 
                                         u32 %187 = OpConstant 1 
                                Private f32* %189 = OpVariable Private 
                                         i32 %202 = OpConstant 11 
                                             %207 = OpTypePointer Private %10 
                              Private f32_3* %208 = OpVariable Private 
                                         f32 %222 = OpConstant 3.674022E-40 
                            Input f32_4[32]* %236 = OpVariable Input 
                                         i32 %256 = OpConstant 12 
                              Private f32_4* %274 = OpVariable Private 
                                         i32 %277 = OpConstant 5 
                                         i32 %296 = OpConstant 3 
                                             %300 = OpTypePointer Output %10 
                               Output f32_3* %301 = OpVariable Output 
                                         i32 %313 = OpConstant 7 
                                             %338 = OpTypeArray %6 %187 
                                             %339 = OpTypeStruct %7 %6 %338 
                                             %340 = OpTypePointer Output %339 
        Output struct {f32_4; f32; f32[1];}* %341 = OpVariable Output 
                                             %343 = OpTypePointer Output %7 
                                             %345 = OpTypePointer Output %6 
                                 Output f32* %346 = OpVariable Output 
                               Output f32_3* %349 = OpVariable Output 
                               Output f32_3* %387 = OpVariable Output 
                                         i32 %388 = OpConstant 4 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 1 1 
                                 Input f32_4* %24 = OpAccessChain %20 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                                        f32_2 %27 = OpFMul %15 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                                 Input f32_4* %31 = OpAccessChain %20 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_3 %34 = OpLoad %12 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 0 
                                        f32_2 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                                        f32_2 %39 = OpFAdd %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                 Input f32_4* %43 = OpAccessChain %20 %42 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_3 %46 = OpLoad %12 
                                        f32_2 %47 = OpVectorShuffle %46 %46 2 2 
                                        f32_2 %48 = OpFMul %45 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                                        f32_2 %51 = OpFAdd %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               Uniform f32_4* %65 = OpAccessChain %62 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_2 %67 = OpVectorShuffle %66 %66 0 1 
                                        f32_2 %68 = OpFMul %55 %67 
                               Uniform f32_4* %69 = OpAccessChain %62 %63 
                                        f32_4 %70 = OpLoad %69 
                                        f32_2 %71 = OpVectorShuffle %70 %70 2 3 
                                        f32_2 %72 = OpFAdd %68 %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %72 4 5 2 3 
                                                      OpStore %9 %74 
                               Uniform f32_4* %75 = OpAccessChain %62 %30 
                                        f32_4 %76 = OpLoad %75 
                                        f32_2 %77 = OpVectorShuffle %76 %76 1 1 
                                 Uniform f32* %80 = OpAccessChain %62 %78 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %83 = OpAccessChain %62 %82 
                                          f32 %84 = OpLoad %83 
                                        f32_2 %85 = OpCompositeConstruct %81 %84 
                                        f32_2 %86 = OpFMul %77 %85 
                                        f32_4 %87 = OpLoad %9 
                                        f32_2 %88 = OpVectorShuffle %87 %87 0 1 
                                        f32_2 %89 = OpFAdd %86 %88 
                                        f32_4 %90 = OpLoad %9 
                                        f32_4 %91 = OpVectorShuffle %90 %89 4 5 2 3 
                                                      OpStore %9 %91 
                          read_only Texture2D %97 = OpLoad %96 
                                     sampler %101 = OpLoad %100 
                  read_only Texture2DSampled %103 = OpSampledImage %97 %101 
                                       f32_4 %104 = OpLoad %9 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_4 %107 = OpImageSampleExplicitLod %103 %105 Lod %7 
                                         f32 %109 = OpCompositeExtract %107 0 
                                                      OpStore %93 %109 
                         read_only Texture2D %111 = OpLoad %110 
                                     sampler %113 = OpLoad %112 
                  read_only Texture2DSampled %114 = OpSampledImage %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
                                       f32_4 %117 = OpImageSampleExplicitLod %114 %116 Lod %7 
                                         f32 %118 = OpCompositeExtract %117 0 
                                Private f32* %119 = OpAccessChain %9 %108 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %9 %108 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpLoad %93 
                                         f32 %123 = OpFMul %121 %122 
                                Private f32* %124 = OpAccessChain %9 %108 
                                                      OpStore %124 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 0 0 
                              Uniform f32_4* %128 = OpAccessChain %62 %127 %22 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %126 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %9 %133 
                                       f32_3 %135 = OpLoad %12 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                                Input f32_3* %140 = OpAccessChain %139 %22 
                                       f32_3 %141 = OpLoad %140 
                                       f32_3 %142 = OpFMul %136 %141 
                                       f32_4 %143 = OpLoad %134 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %134 %144 
                                Input f32_3* %145 = OpAccessChain %139 %30 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpLoad %12 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 0 0 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %134 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %149 %151 
                                       f32_4 %153 = OpLoad %134 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %134 %154 
                                Input f32_3* %155 = OpAccessChain %139 %42 
                                       f32_3 %156 = OpLoad %155 
                                       f32_3 %157 = OpLoad %12 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %134 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %134 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %134 %164 
                                       f32_4 %166 = OpLoad %134 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                              Uniform f32_4* %168 = OpAccessChain %62 %127 %30 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %167 %170 
                                Private f32* %172 = OpAccessChain %165 %108 
                                                      OpStore %172 %171 
                                       f32_4 %173 = OpLoad %134 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                              Uniform f32_4* %175 = OpAccessChain %62 %127 %42 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %165 %179 
                                                      OpStore %180 %178 
                                       f32_4 %181 = OpLoad %134 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                              Uniform f32_4* %183 = OpAccessChain %62 %127 %22 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %182 %185 
                                Private f32* %188 = OpAccessChain %165 %187 
                                                      OpStore %188 %186 
                                       f32_4 %190 = OpLoad %165 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %165 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %191 %193 
                                                      OpStore %189 %194 
                                         f32 %195 = OpLoad %189 
                                         f32 %196 = OpExtInst %1 32 %195 
                                                      OpStore %189 %196 
                                Private f32* %197 = OpAccessChain %165 %187 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFNegate %198 
                                         f32 %200 = OpLoad %189 
                                         f32 %201 = OpFMul %199 %200 
                                Uniform f32* %203 = OpAccessChain %62 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFAdd %201 %204 
                                Private f32* %206 = OpAccessChain %134 %108 
                                                      OpStore %206 %205 
                                         f32 %209 = OpLoad %189 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_4 %211 = OpLoad %165 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFMul %210 %212 
                                                      OpStore %208 %213 
                                Private f32* %214 = OpAccessChain %134 %108 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpExtInst %1 4 %215 
                                Uniform f32* %217 = OpAccessChain %62 %202 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                         f32 %220 = OpFAdd %216 %219 
                                                      OpStore %189 %220 
                                         f32 %221 = OpLoad %189 
                                         f32 %223 = OpExtInst %1 43 %221 %106 %222 
                                                      OpStore %189 %223 
                                         f32 %224 = OpLoad %189 
                                         f32 %225 = OpFNegate %224 
                                         f32 %226 = OpFAdd %225 %222 
                                                      OpStore %189 %226 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                         f32 %229 = OpLoad %189 
                                       f32_3 %230 = OpCompositeConstruct %229 %229 %229 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_3 %234 = OpLoad %12 
                                       f32_4 %235 = OpVectorShuffle %234 %234 1 1 1 1 
                                Input f32_4* %237 = OpAccessChain %236 %22 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpFMul %235 %238 
                                                      OpStore %165 %239 
                                Input f32_4* %240 = OpAccessChain %236 %30 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpLoad %12 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpFMul %241 %243 
                                       f32_4 %245 = OpLoad %165 
                                       f32_4 %246 = OpFAdd %244 %245 
                                                      OpStore %165 %246 
                                Input f32_4* %247 = OpAccessChain %236 %42 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpLoad %12 
                                       f32_4 %250 = OpVectorShuffle %249 %249 2 2 2 2 
                                       f32_4 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %165 
                                       f32_4 %253 = OpFAdd %251 %252 
                                                      OpStore %165 %253 
                                       f32_4 %254 = OpLoad %9 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                Uniform f32* %257 = OpAccessChain %62 %256 
                                         f32 %258 = OpLoad %257 
                                Uniform f32* %259 = OpAccessChain %62 %256 
                                         f32 %260 = OpLoad %259 
                                Uniform f32* %261 = OpAccessChain %62 %256 
                                         f32 %262 = OpLoad %261 
                                       f32_3 %263 = OpCompositeConstruct %258 %260 %262 
                                         f32 %264 = OpCompositeExtract %263 0 
                                         f32 %265 = OpCompositeExtract %263 1 
                                         f32 %266 = OpCompositeExtract %263 2 
                                       f32_3 %267 = OpCompositeConstruct %264 %265 %266 
                                       f32_3 %268 = OpFMul %255 %267 
                                       f32_4 %269 = OpLoad %165 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %9 %273 
                                       f32_4 %275 = OpLoad %9 
                                       f32_4 %276 = OpVectorShuffle %275 %275 1 1 1 1 
                              Uniform f32_4* %278 = OpAccessChain %62 %277 %22 
                                       f32_4 %279 = OpLoad %278 
                                       f32_4 %280 = OpFMul %276 %279 
                                                      OpStore %274 %280 
                              Uniform f32_4* %281 = OpAccessChain %62 %277 %30 
                                       f32_4 %282 = OpLoad %281 
                                       f32_4 %283 = OpLoad %9 
                                       f32_4 %284 = OpVectorShuffle %283 %283 0 0 0 0 
                                       f32_4 %285 = OpFMul %282 %284 
                                       f32_4 %286 = OpLoad %274 
                                       f32_4 %287 = OpFAdd %285 %286 
                                                      OpStore %274 %287 
                              Uniform f32_4* %288 = OpAccessChain %62 %277 %42 
                                       f32_4 %289 = OpLoad %288 
                                       f32_4 %290 = OpLoad %9 
                                       f32_4 %291 = OpVectorShuffle %290 %290 2 2 2 2 
                                       f32_4 %292 = OpFMul %289 %291 
                                       f32_4 %293 = OpLoad %274 
                                       f32_4 %294 = OpFAdd %292 %293 
                                                      OpStore %9 %294 
                                       f32_4 %295 = OpLoad %9 
                              Uniform f32_4* %297 = OpAccessChain %62 %277 %296 
                                       f32_4 %298 = OpLoad %297 
                                       f32_4 %299 = OpFAdd %295 %298 
                                                      OpStore %274 %299 
                              Uniform f32_4* %302 = OpAccessChain %62 %277 %296 
                                       f32_4 %303 = OpLoad %302 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                       f32_4 %305 = OpLoad %165 
                                       f32_3 %306 = OpVectorShuffle %305 %305 3 3 3 
                                       f32_3 %307 = OpFMul %304 %306 
                                       f32_4 %308 = OpLoad %9 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_3 %310 = OpFAdd %307 %309 
                                                      OpStore %301 %310 
                                       f32_4 %311 = OpLoad %274 
                                       f32_4 %312 = OpVectorShuffle %311 %311 1 1 1 1 
                              Uniform f32_4* %314 = OpAccessChain %62 %313 %22 
                                       f32_4 %315 = OpLoad %314 
                                       f32_4 %316 = OpFMul %312 %315 
                                                      OpStore %9 %316 
                              Uniform f32_4* %317 = OpAccessChain %62 %313 %30 
                                       f32_4 %318 = OpLoad %317 
                                       f32_4 %319 = OpLoad %274 
                                       f32_4 %320 = OpVectorShuffle %319 %319 0 0 0 0 
                                       f32_4 %321 = OpFMul %318 %320 
                                       f32_4 %322 = OpLoad %9 
                                       f32_4 %323 = OpFAdd %321 %322 
                                                      OpStore %9 %323 
                              Uniform f32_4* %324 = OpAccessChain %62 %313 %42 
                                       f32_4 %325 = OpLoad %324 
                                       f32_4 %326 = OpLoad %274 
                                       f32_4 %327 = OpVectorShuffle %326 %326 2 2 2 2 
                                       f32_4 %328 = OpFMul %325 %327 
                                       f32_4 %329 = OpLoad %9 
                                       f32_4 %330 = OpFAdd %328 %329 
                                                      OpStore %9 %330 
                              Uniform f32_4* %331 = OpAccessChain %62 %313 %296 
                                       f32_4 %332 = OpLoad %331 
                                       f32_4 %333 = OpLoad %274 
                                       f32_4 %334 = OpVectorShuffle %333 %333 3 3 3 3 
                                       f32_4 %335 = OpFMul %332 %334 
                                       f32_4 %336 = OpLoad %9 
                                       f32_4 %337 = OpFAdd %335 %336 
                                                      OpStore %9 %337 
                                       f32_4 %342 = OpLoad %9 
                               Output f32_4* %344 = OpAccessChain %341 %30 
                                                      OpStore %344 %342 
                                Private f32* %347 = OpAccessChain %9 %179 
                                         f32 %348 = OpLoad %347 
                                                      OpStore %346 %348 
                                       f32_3 %350 = OpLoad %208 
                                                      OpStore %349 %350 
                                Private f32* %351 = OpAccessChain %208 %187 
                                         f32 %352 = OpLoad %351 
                                Private f32* %353 = OpAccessChain %208 %187 
                                         f32 %354 = OpLoad %353 
                                         f32 %355 = OpFMul %352 %354 
                                Private f32* %356 = OpAccessChain %9 %108 
                                                      OpStore %356 %355 
                                Private f32* %357 = OpAccessChain %208 %108 
                                         f32 %358 = OpLoad %357 
                                Private f32* %359 = OpAccessChain %208 %108 
                                         f32 %360 = OpLoad %359 
                                         f32 %361 = OpFMul %358 %360 
                                Private f32* %362 = OpAccessChain %9 %108 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFNegate %363 
                                         f32 %365 = OpFAdd %361 %364 
                                Private f32* %366 = OpAccessChain %9 %108 
                                                      OpStore %366 %365 
                                       f32_3 %367 = OpLoad %208 
                                       f32_4 %368 = OpVectorShuffle %367 %367 1 2 2 0 
                                       f32_3 %369 = OpLoad %208 
                                       f32_4 %370 = OpVectorShuffle %369 %369 0 1 2 2 
                                       f32_4 %371 = OpFMul %368 %370 
                                                      OpStore %134 %371 
                              Uniform f32_4* %372 = OpAccessChain %62 %22 
                                       f32_4 %373 = OpLoad %372 
                                       f32_4 %374 = OpLoad %134 
                                         f32 %375 = OpDot %373 %374 
                                Private f32* %376 = OpAccessChain %165 %108 
                                                      OpStore %376 %375 
                              Uniform f32_4* %377 = OpAccessChain %62 %42 
                                       f32_4 %378 = OpLoad %377 
                                       f32_4 %379 = OpLoad %134 
                                         f32 %380 = OpDot %378 %379 
                                Private f32* %381 = OpAccessChain %165 %187 
                                                      OpStore %381 %380 
                              Uniform f32_4* %382 = OpAccessChain %62 %296 
                                       f32_4 %383 = OpLoad %382 
                                       f32_4 %384 = OpLoad %134 
                                         f32 %385 = OpDot %383 %384 
                                Private f32* %386 = OpAccessChain %165 %179 
                                                      OpStore %386 %385 
                              Uniform f32_4* %389 = OpAccessChain %62 %388 
                                       f32_4 %390 = OpLoad %389 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_4 %392 = OpLoad %9 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 0 0 
                                       f32_3 %394 = OpFMul %391 %393 
                                       f32_4 %395 = OpLoad %165 
                                       f32_3 %396 = OpVectorShuffle %395 %395 0 1 2 
                                       f32_3 %397 = OpFAdd %394 %396 
                                                      OpStore %387 %397 
                                 Output f32* %398 = OpAccessChain %341 %30 %187 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpFNegate %399 
                                 Output f32* %401 = OpAccessChain %341 %30 %187 
                                                      OpStore %401 %400 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
""
}
}
Program "hp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
""
}
}
Program "dp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
""
}
}
}
 Pass {
  Name "FORWARD"
  Tags { "IGNOREPROJECTOR" = "true" "IsEmissive" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent+100" "RenderType" = "Transparent" }
  Blend SrcAlpha One, SrcAlpha One
  ColorMask RGB 0
  ZWrite Off
  Cull Front
  GpuProgramID 89988
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"#ifdef VERTEX
#version 410
#extension GL_ARB_explicit_attrib_location : require

in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
in  vec4 in_TEXCOORD3;
in  vec4 in_COLOR0;
layout(location = 0) out vec4 vs_INTERNALTESSPOS0;
layout(location = 1) out vec4 vs_TANGENT0;
layout(location = 2) out vec3 vs_NORMAL0;
layout(location = 3) out vec4 vs_TEXCOORD0;
layout(location = 4) out vec4 vs_TEXCOORD1;
layout(location = 5) out vec4 vs_TEXCOORD2;
layout(location = 6) out vec4 vs_TEXCOORD3;
layout(location = 7) out vec4 vs_COLOR0;
void main()
{
    vs_INTERNALTESSPOS0 = in_POSITION0;
    vs_TANGENT0 = in_TANGENT0;
    vs_NORMAL0.xyz = in_NORMAL0.xyz;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD3;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Y_Mask;
uniform 	float _FresnelBias;
uniform 	float _FresnelScale;
uniform 	float _FresnelPower;
uniform 	float _Alpha;
UNITY_LOCATION(0) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(1) uniform  samplerCube _LightTexture0;
layout(location = 0) in  vec3 ds_TEXCOORD0;
layout(location = 1) in  float ds_TEXCOORD3;
layout(location = 2) in  vec3 ds_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat6;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlat0.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = max(u_xlat9, 0.00100000005);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat10 = u_xlat9 * u_xlat9;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat9 = u_xlat9 * u_xlat10;
    u_xlat9 = u_xlat9 * 0.959999979 + 0.0399999991;
    u_xlat10 = dot(ds_TEXCOORD0.xyz, ds_TEXCOORD0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat2.xyz = vec3(u_xlat10) * ds_TEXCOORD0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat3.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat6 = abs(u_xlat0.x) + u_xlat3.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = _FresnelScale * u_xlat0.x + _FresnelBias;
    u_xlat6 = u_xlat6 + 9.99999975e-06;
    u_xlat6 = 0.5 / u_xlat6;
    u_xlat6 = u_xlat6 * 0.999999881;
    u_xlat3.x = u_xlat3.x * u_xlat6;
    u_xlat1.xyz = ds_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * ds_TEXCOORD1.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * ds_TEXCOORD1.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
    u_xlat6 = texture(_LightTextureB0, vec2(u_xlat6)).x;
    u_xlat6 = u_xlat1.x * u_xlat6;
    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat1.x = ds_TEXCOORD3 * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xxx;
    u_xlat3.x = (-ds_TEXCOORD0.y) + _Y_Mask;
    u_xlat3.x = abs(u_xlat3.x) + (-_Y_Mask);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    SV_Target0.w = u_xlat0.x * _Alpha;
    return;
}

#endif
#ifdef HULL
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(vertices=3) out;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	float _EdgeLength;
layout(location = 0) in vec4 vs_INTERNALTESSPOS0[];
layout(location = 0) out vec4 hs_INTERNALTESSPOS0[];
layout(location = 1) in vec4 vs_TANGENT0[];
layout(location = 1) out vec4 hs_TANGENT0[];
layout(location = 2) in vec3 vs_NORMAL0[];
layout(location = 2) out vec3 hs_NORMAL0[];
layout(location = 3) in vec4 vs_TEXCOORD0[];
layout(location = 3) out vec4 hs_TEXCOORD0[];
layout(location = 4) in vec4 vs_TEXCOORD1[];
layout(location = 4) out vec4 hs_TEXCOORD1[];
layout(location = 5) in vec4 vs_TEXCOORD2[];
layout(location = 5) out vec4 hs_TEXCOORD2[];
layout(location = 6) in vec4 vs_TEXCOORD3[];
layout(location = 6) out vec4 hs_TEXCOORD3[];
layout(location = 7) in vec4 vs_COLOR0[];
layout(location = 7) out vec4 hs_COLOR0[];
void passthrough_ctrl_points()
{
    hs_INTERNALTESSPOS0[gl_InvocationID] = vs_INTERNALTESSPOS0[gl_InvocationID];
    hs_TANGENT0[gl_InvocationID] = vs_TANGENT0[gl_InvocationID];
    hs_NORMAL0[gl_InvocationID] = vs_NORMAL0[gl_InvocationID];
    hs_TEXCOORD0[gl_InvocationID] = vs_TEXCOORD0[gl_InvocationID];
    hs_TEXCOORD1[gl_InvocationID] = vs_TEXCOORD1[gl_InvocationID];
    hs_TEXCOORD2[gl_InvocationID] = vs_TEXCOORD2[gl_InvocationID];
    hs_TEXCOORD3[gl_InvocationID] = vs_TEXCOORD3[gl_InvocationID];
    hs_COLOR0[gl_InvocationID] = vs_COLOR0[gl_InvocationID];
}
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
float u_xlat13;
void fork_phase2(int phaseInstanceID)
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[1].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[1].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[2].www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _EdgeLength;
    u_xlat2.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _ScreenParams.y;
    u_xlat12 = u_xlat13 / u_xlat12;
    gl_TessLevelOuter[0] = max(u_xlat12, 1.0);
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[0].www + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _ScreenParams.y;
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _EdgeLength;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    gl_TessLevelOuter[1] = max(u_xlat12, 1.0);
    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _ScreenParams.y;
    u_xlat4.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _EdgeLength;
    u_xlat0.x = u_xlat0.x / u_xlat4.x;
    gl_TessLevelOuter[2] = max(u_xlat0.x, 1.0);
}
void join_phase3(int phaseInstanceID)
{
    u_xlat0.x = gl_TessLevelOuter[2] + gl_TessLevelOuter[2];
    u_xlat0.x = u_xlat0.x + gl_TessLevelOuter[2];
    gl_TessLevelInner[0] = u_xlat0.x * 0.333333343;
}
void main()
{
    passthrough_ctrl_points();
    barrier();
    if (gl_InvocationID == 0)
    {
        fork_phase2(0);
        join_phase3(0);
    }
}

#endif
#ifdef DOMAIN
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(ccw) in;
layout(fractional_odd_spacing) in;
layout(triangles) in;
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _u;
uniform 	float _v;
uniform 	vec4 _Flamenoise_ST;
uniform 	float _Y_Mask;
uniform 	float _FlameHeight;
UNITY_LOCATION(2) uniform  sampler2D _FlameWave;
UNITY_LOCATION(3) uniform  sampler2D _Flamenoise;
layout(location = 0) in  vec4 hs_INTERNALTESSPOS0 [];
layout(location = 2) in  vec3 hs_NORMAL0 [];
layout(location = 3) in  vec4 hs_TEXCOORD0 [];
layout(location = 0) out vec3 ds_TEXCOORD0;
layout(location = 1) out float ds_TEXCOORD3;
layout(location = 2) out vec3 ds_TEXCOORD1;
layout(location = 3) out vec3 ds_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = gl_TessCoord.yy * hs_TEXCOORD0[1].xy;
    u_xlat0.xy = hs_TEXCOORD0[0].xy * gl_TessCoord.xx + u_xlat0.xy;
    u_xlat0.xy = hs_TEXCOORD0[2].xy * gl_TessCoord.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _Flamenoise_ST.xy + _Flamenoise_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_u, _v) + u_xlat0.xy;
    u_xlat8 = textureLod(_FlameWave, u_xlat0.xy, 0.0).x;
    u_xlat0.x = textureLod(_Flamenoise, u_xlat0.xy, 0.0).x;
    u_xlat0.x = u_xlat0.x * u_xlat8;
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat1.xyz = gl_TessCoord.yyy * hs_NORMAL0[1].xyz;
    u_xlat1.xyz = hs_NORMAL0[0].xyz * gl_TessCoord.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hs_NORMAL0[2].xyz * gl_TessCoord.zzz + u_xlat1.xyz;
    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.x = (-u_xlat2.y) * u_xlat12 + _Y_Mask;
    ds_TEXCOORD0.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = abs(u_xlat1.x) + (-_Y_Mask);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
    u_xlat1 = gl_TessCoord.yyyy * hs_INTERNALTESSPOS0[1];
    u_xlat1 = hs_INTERNALTESSPOS0[0] * gl_TessCoord.xxxx + u_xlat1;
    u_xlat1 = hs_INTERNALTESSPOS0[2] * gl_TessCoord.zzzz + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_FlameHeight, _FlameHeight, _FlameHeight)) + u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    ds_TEXCOORD3 = u_xlat2.z;
    ds_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    ds_TEXCOORD2.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 38
; Schema: 0
                               OpCapability Shader 
                        %1 = OpExtInstImport "GLSL.std.450" 
                               OpMemoryModel Logical GLSL450 
                               OpEntryPoint Vertex %4 "main" %9 %11 %13 %14 %18 %20 %22 %23 %25 %26 %28 %29 %31 %32 %34 %35 
                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                               OpDecorate %9 Location 9 
                               OpDecorate %11 Location 11 
                               OpDecorate %13 Location 13 
                               OpDecorate %14 Location 14 
                               OpDecorate %18 Location 18 
                               OpDecorate %20 Location 20 
                               OpDecorate vs_TEXCOORD0 Location 22 
                               OpDecorate %23 Location 23 
                               OpDecorate vs_TEXCOORD1 Location 25 
                               OpDecorate %26 Location 26 
                               OpDecorate vs_TEXCOORD2 Location 28 
                               OpDecorate %29 Location 29 
                               OpDecorate vs_TEXCOORD3 Location 31 
                               OpDecorate %32 Location 32 
                               OpDecorate %34 Location 34 
                               OpDecorate %35 Location 35 
                        %2 = OpTypeVoid 
                        %3 = OpTypeFunction %2 
                        %6 = OpTypeFloat 32 
                        %7 = OpTypeVector %6 4 
                        %8 = OpTypePointer Output %7 
          Output f32_4* %9 = OpVariable Output 
                       %10 = OpTypePointer Input %7 
          Input f32_4* %11 = OpVariable Input 
         Output f32_4* %13 = OpVariable Output 
          Input f32_4* %14 = OpVariable Input 
                       %16 = OpTypeVector %6 3 
                       %17 = OpTypePointer Output %16 
         Output f32_3* %18 = OpVariable Output 
                       %19 = OpTypePointer Input %16 
          Input f32_3* %20 = OpVariable Input 
Output f32_4* vs_TEXCOORD0 = OpVariable Output 
          Input f32_4* %23 = OpVariable Input 
Output f32_4* vs_TEXCOORD1 = OpVariable Output 
          Input f32_4* %26 = OpVariable Input 
Output f32_4* vs_TEXCOORD2 = OpVariable Output 
          Input f32_4* %29 = OpVariable Input 
Output f32_4* vs_TEXCOORD3 = OpVariable Output 
          Input f32_4* %32 = OpVariable Input 
         Output f32_4* %34 = OpVariable Output 
          Input f32_4* %35 = OpVariable Input 
                   void %4 = OpFunction None %3 
                        %5 = OpLabel 
                 f32_4 %12 = OpLoad %11 
                               OpStore %9 %12 
                 f32_4 %15 = OpLoad %14 
                               OpStore %13 %15 
                 f32_3 %21 = OpLoad %20 
                               OpStore %18 %21 
                 f32_4 %24 = OpLoad %23 
                               OpStore vs_TEXCOORD0 %24 
                 f32_4 %27 = OpLoad %26 
                               OpStore vs_TEXCOORD1 %27 
                 f32_4 %30 = OpLoad %29 
                               OpStore vs_TEXCOORD2 %30 
                 f32_4 %33 = OpLoad %32 
                               OpStore vs_TEXCOORD3 %33 
                 f32_4 %36 = OpLoad %35 
                               OpStore %34 %36 
                               OpReturn
                               OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 344
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %260 %297 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpMemberDecorate %18 10 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %214 DescriptorSet 214 
                                                      OpDecorate %214 Binding 214 
                                                      OpDecorate %218 DescriptorSet 218 
                                                      OpDecorate %218 Binding 218 
                                                      OpDecorate %229 DescriptorSet 229 
                                                      OpDecorate %229 Binding 229 
                                                      OpDecorate %231 DescriptorSet 231 
                                                      OpDecorate %231 Binding 231 
                                                      OpDecorate %260 Location 260 
                                                      OpDecorate %297 Location 297 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %7 %14 %14 %14 %14 %17 %6 %6 %6 %6 %6 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32; f32; f32; f32; f32;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %7 
                                              %27 = OpTypePointer Private %6 
                                 Private f32* %28 = OpVariable Private 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 2 
                                              %42 = OpTypePointer Uniform %14 
                               Private f32_3* %52 = OpVariable Private 
                                          f32 %67 = OpConstant 3.674022E-40 
                                          f32 %79 = OpConstant 3.674022E-40 
                                          f32 %80 = OpConstant 3.674022E-40 
                                 Private f32* %85 = OpVariable Private 
                                          f32 %96 = OpConstant 3.674022E-40 
                                          f32 %98 = OpConstant 3.674022E-40 
                                Input f32_3* %100 = OpVariable Input 
                                         u32 %113 = OpConstant 0 
                              Private f32_3* %115 = OpVariable Private 
                                Private f32* %124 = OpVariable Private 
                                         i32 %142 = OpConstant 9 
                                             %143 = OpTypePointer Uniform %6 
                                         i32 %152 = OpConstant 8 
                                         i32 %158 = OpConstant 7 
                                         f32 %164 = OpConstant 3.674022E-40 
                                         f32 %166 = OpConstant 3.674022E-40 
                                         f32 %176 = OpConstant 3.674022E-40 
                                         i32 %181 = OpConstant 5 
                                         i32 %182 = OpConstant 1 
                                         i32 %204 = OpConstant 3 
                                             %212 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %213 = OpTypePointer UniformConstant %212 
      UniformConstant read_only TextureCube* %214 = OpVariable UniformConstant 
                                             %216 = OpTypeSampler 
                                             %217 = OpTypePointer UniformConstant %216 
                    UniformConstant sampler* %218 = OpVariable UniformConstant 
                                             %220 = OpTypeSampledImage %212 
                                         u32 %224 = OpConstant 3 
                                             %227 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %228 = OpTypePointer UniformConstant %227 
        UniformConstant read_only Texture2D* %229 = OpVariable UniformConstant 
                    UniformConstant sampler* %231 = OpVariable UniformConstant 
                                             %233 = OpTypeSampledImage %227 
                                             %236 = OpTypeVector %6 2 
                                         i32 %246 = OpConstant 4 
                                             %259 = OpTypePointer Input %6 
                                  Input f32* %260 = OpVariable Input 
                                         u32 %262 = OpConstant 1 
                                         u32 %274 = OpConstant 2 
                                             %296 = OpTypePointer Output %14 
                               Output f32_4* %297 = OpVariable Output 
                                         i32 %307 = OpConstant 6 
                                         i32 %337 = OpConstant 10 
                                             %341 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad %11 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %13 %25 
                                                      OpStore %9 %26 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpLoad %9 
                                          f32 %31 = OpDot %29 %30 
                                                      OpStore %28 %31 
                                          f32 %32 = OpLoad %28 
                                          f32 %33 = OpExtInst %1 32 %32 
                                                      OpStore %28 %33 
                                          f32 %34 = OpLoad %28 
                                        f32_3 %35 = OpCompositeConstruct %34 %34 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpFMul %35 %36 
                                                      OpStore %9 %37 
                                        f32_3 %39 = OpLoad %11 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_4* %43 = OpAccessChain %20 %41 
                                        f32_4 %44 = OpLoad %43 
                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                                        f32_3 %46 = OpFAdd %40 %45 
                                                      OpStore %38 %46 
                                        f32_3 %47 = OpLoad %38 
                                        f32_3 %48 = OpLoad %38 
                                          f32 %49 = OpDot %47 %48 
                                                      OpStore %28 %49 
                                          f32 %50 = OpLoad %28 
                                          f32 %51 = OpExtInst %1 32 %50 
                                                      OpStore %28 %51 
                                        f32_3 %53 = OpLoad %38 
                                          f32 %54 = OpLoad %28 
                                        f32_3 %55 = OpCompositeConstruct %54 %54 %54 
                                        f32_3 %56 = OpFMul %53 %55 
                                        f32_3 %57 = OpLoad %9 
                                        f32_3 %58 = OpFAdd %56 %57 
                                                      OpStore %52 %58 
                                          f32 %59 = OpLoad %28 
                                        f32_3 %60 = OpCompositeConstruct %59 %59 %59 
                                        f32_3 %61 = OpLoad %38 
                                        f32_3 %62 = OpFMul %60 %61 
                                                      OpStore %38 %62 
                                        f32_3 %63 = OpLoad %52 
                                        f32_3 %64 = OpLoad %52 
                                          f32 %65 = OpDot %63 %64 
                                                      OpStore %28 %65 
                                          f32 %66 = OpLoad %28 
                                          f32 %68 = OpExtInst %1 40 %66 %67 
                                                      OpStore %28 %68 
                                          f32 %69 = OpLoad %28 
                                          f32 %70 = OpExtInst %1 32 %69 
                                                      OpStore %28 %70 
                                          f32 %71 = OpLoad %28 
                                        f32_3 %72 = OpCompositeConstruct %71 %71 %71 
                                        f32_3 %73 = OpLoad %52 
                                        f32_3 %74 = OpFMul %72 %73 
                                                      OpStore %52 %74 
                                        f32_3 %75 = OpLoad %38 
                                        f32_3 %76 = OpLoad %52 
                                          f32 %77 = OpDot %75 %76 
                                                      OpStore %28 %77 
                                          f32 %78 = OpLoad %28 
                                          f32 %81 = OpExtInst %1 43 %78 %79 %80 
                                                      OpStore %28 %81 
                                          f32 %82 = OpLoad %28 
                                          f32 %83 = OpFNegate %82 
                                          f32 %84 = OpFAdd %83 %80 
                                                      OpStore %28 %84 
                                          f32 %86 = OpLoad %28 
                                          f32 %87 = OpLoad %28 
                                          f32 %88 = OpFMul %86 %87 
                                                      OpStore %85 %88 
                                          f32 %89 = OpLoad %85 
                                          f32 %90 = OpLoad %85 
                                          f32 %91 = OpFMul %89 %90 
                                                      OpStore %85 %91 
                                          f32 %92 = OpLoad %28 
                                          f32 %93 = OpLoad %85 
                                          f32 %94 = OpFMul %92 %93 
                                                      OpStore %28 %94 
                                          f32 %95 = OpLoad %28 
                                          f32 %97 = OpFMul %95 %96 
                                          f32 %99 = OpFAdd %97 %98 
                                                      OpStore %28 %99 
                                       f32_3 %101 = OpLoad %100 
                                       f32_3 %102 = OpLoad %100 
                                         f32 %103 = OpDot %101 %102 
                                                      OpStore %85 %103 
                                         f32 %104 = OpLoad %85 
                                         f32 %105 = OpExtInst %1 32 %104 
                                                      OpStore %85 %105 
                                         f32 %106 = OpLoad %85 
                                       f32_3 %107 = OpCompositeConstruct %106 %106 %106 
                                       f32_3 %108 = OpLoad %100 
                                       f32_3 %109 = OpFMul %107 %108 
                                                      OpStore %52 %109 
                                       f32_3 %110 = OpLoad %52 
                                       f32_3 %111 = OpLoad %9 
                                         f32 %112 = OpDot %110 %111 
                                Private f32* %114 = OpAccessChain %9 %113 
                                                      OpStore %114 %112 
                                       f32_3 %116 = OpLoad %52 
                                       f32_3 %117 = OpLoad %38 
                                         f32 %118 = OpDot %116 %117 
                                Private f32* %119 = OpAccessChain %115 %113 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %115 %113 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpExtInst %1 43 %121 %79 %80 
                                Private f32* %123 = OpAccessChain %115 %113 
                                                      OpStore %123 %122 
                                Private f32* %125 = OpAccessChain %9 %113 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpExtInst %1 4 %126 
                                Private f32* %128 = OpAccessChain %115 %113 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpFAdd %127 %129 
                                                      OpStore %124 %130 
                                Private f32* %131 = OpAccessChain %9 %113 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpFNegate %132 
                                         f32 %134 = OpFAdd %133 %80 
                                Private f32* %135 = OpAccessChain %9 %113 
                                                      OpStore %135 %134 
                                Private f32* %136 = OpAccessChain %9 %113 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpExtInst %1 30 %137 
                                Private f32* %139 = OpAccessChain %9 %113 
                                                      OpStore %139 %138 
                                Private f32* %140 = OpAccessChain %9 %113 
                                         f32 %141 = OpLoad %140 
                                Uniform f32* %144 = OpAccessChain %20 %142 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpFMul %141 %145 
                                Private f32* %147 = OpAccessChain %9 %113 
                                                      OpStore %147 %146 
                                Private f32* %148 = OpAccessChain %9 %113 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpExtInst %1 29 %149 
                                Private f32* %151 = OpAccessChain %9 %113 
                                                      OpStore %151 %150 
                                Uniform f32* %153 = OpAccessChain %20 %152 
                                         f32 %154 = OpLoad %153 
                                Private f32* %155 = OpAccessChain %9 %113 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFMul %154 %156 
                                Uniform f32* %159 = OpAccessChain %20 %158 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFAdd %157 %160 
                                Private f32* %162 = OpAccessChain %9 %113 
                                                      OpStore %162 %161 
                                         f32 %163 = OpLoad %124 
                                         f32 %165 = OpFAdd %163 %164 
                                                      OpStore %124 %165 
                                         f32 %167 = OpLoad %124 
                                         f32 %168 = OpFDiv %166 %167 
                                                      OpStore %124 %168 
                                Private f32* %169 = OpAccessChain %115 %113 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpLoad %124 
                                         f32 %172 = OpFMul %170 %171 
                                Private f32* %173 = OpAccessChain %115 %113 
                                                      OpStore %173 %172 
                                Private f32* %174 = OpAccessChain %115 %113 
                                         f32 %175 = OpLoad %174 
                                         f32 %177 = OpFMul %175 %176 
                                Private f32* %178 = OpAccessChain %115 %113 
                                                      OpStore %178 %177 
                                       f32_3 %179 = OpLoad %11 
                                       f32_3 %180 = OpVectorShuffle %179 %179 1 1 1 
                              Uniform f32_4* %183 = OpAccessChain %20 %181 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %180 %185 
                                                      OpStore %38 %186 
                              Uniform f32_4* %187 = OpAccessChain %20 %181 %22 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpLoad %11 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 0 0 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_3 %193 = OpLoad %38 
                                       f32_3 %194 = OpFAdd %192 %193 
                                                      OpStore %38 %194 
                              Uniform f32_4* %195 = OpAccessChain %20 %181 %41 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_3 %198 = OpLoad %11 
                                       f32_3 %199 = OpVectorShuffle %198 %198 2 2 2 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_3 %201 = OpLoad %38 
                                       f32_3 %202 = OpFAdd %200 %201 
                                                      OpStore %38 %202 
                                       f32_3 %203 = OpLoad %38 
                              Uniform f32_4* %205 = OpAccessChain %20 %181 %204 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFAdd %203 %207 
                                                      OpStore %38 %208 
                                       f32_3 %209 = OpLoad %38 
                                       f32_3 %210 = OpLoad %38 
                                         f32 %211 = OpDot %209 %210 
                                                      OpStore %124 %211 
                       read_only TextureCube %215 = OpLoad %214 
                                     sampler %219 = OpLoad %218 
                read_only TextureCubeSampled %221 = OpSampledImage %215 %219 
                                       f32_3 %222 = OpLoad %38 
                                       f32_4 %223 = OpImageSampleImplicitLod %221 %222 
                                         f32 %225 = OpCompositeExtract %223 3 
                                Private f32* %226 = OpAccessChain %38 %113 
                                                      OpStore %226 %225 
                         read_only Texture2D %230 = OpLoad %229 
                                     sampler %232 = OpLoad %231 
                  read_only Texture2DSampled %234 = OpSampledImage %230 %232 
                                         f32 %235 = OpLoad %124 
                                       f32_2 %237 = OpCompositeConstruct %235 %235 
                                       f32_4 %238 = OpImageSampleImplicitLod %234 %237 
                                         f32 %239 = OpCompositeExtract %238 0 
                                                      OpStore %124 %239 
                                Private f32* %240 = OpAccessChain %38 %113 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpLoad %124 
                                         f32 %243 = OpFMul %241 %242 
                                                      OpStore %124 %243 
                                         f32 %244 = OpLoad %124 
                                       f32_3 %245 = OpCompositeConstruct %244 %244 %244 
                              Uniform f32_4* %247 = OpAccessChain %20 %246 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %250 = OpFMul %245 %249 
                                                      OpStore %38 %250 
                                       f32_3 %251 = OpLoad %115 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 0 0 
                                       f32_3 %253 = OpLoad %38 
                                       f32_3 %254 = OpFMul %252 %253 
                                                      OpStore %38 %254 
                                         f32 %255 = OpLoad %28 
                                       f32_3 %256 = OpCompositeConstruct %255 %255 %255 
                                       f32_3 %257 = OpLoad %38 
                                       f32_3 %258 = OpFMul %256 %257 
                                                      OpStore %115 %258 
                                         f32 %261 = OpLoad %260 
                                Uniform f32* %263 = OpAccessChain %20 %182 %262 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFDiv %261 %264 
                                Private f32* %266 = OpAccessChain %38 %113 
                                                      OpStore %266 %265 
                                Private f32* %267 = OpAccessChain %38 %113 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                         f32 %270 = OpFAdd %269 %80 
                                Private f32* %271 = OpAccessChain %38 %113 
                                                      OpStore %271 %270 
                                Private f32* %272 = OpAccessChain %38 %113 
                                         f32 %273 = OpLoad %272 
                                Uniform f32* %275 = OpAccessChain %20 %182 %274 
                                         f32 %276 = OpLoad %275 
                                         f32 %277 = OpFMul %273 %276 
                                Private f32* %278 = OpAccessChain %38 %113 
                                                      OpStore %278 %277 
                                Private f32* %279 = OpAccessChain %38 %113 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpExtInst %1 40 %280 %79 
                                Private f32* %282 = OpAccessChain %38 %113 
                                                      OpStore %282 %281 
                                Private f32* %283 = OpAccessChain %38 %113 
                                         f32 %284 = OpLoad %283 
                                Uniform f32* %285 = OpAccessChain %20 %204 %274 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFMul %284 %286 
                                Uniform f32* %288 = OpAccessChain %20 %204 %224 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFAdd %287 %289 
                                Private f32* %291 = OpAccessChain %38 %113 
                                                      OpStore %291 %290 
                                Private f32* %292 = OpAccessChain %38 %113 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpExtInst %1 43 %293 %79 %80 
                                Private f32* %295 = OpAccessChain %38 %113 
                                                      OpStore %295 %294 
                                       f32_3 %298 = OpLoad %115 
                                       f32_3 %299 = OpLoad %38 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 0 0 
                                       f32_3 %301 = OpFMul %298 %300 
                                       f32_4 %302 = OpLoad %297 
                                       f32_4 %303 = OpVectorShuffle %302 %301 4 5 6 3 
                                                      OpStore %297 %303 
                                  Input f32* %304 = OpAccessChain %100 %262 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFNegate %305 
                                Uniform f32* %308 = OpAccessChain %20 %307 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpFAdd %306 %309 
                                Private f32* %311 = OpAccessChain %115 %113 
                                                      OpStore %311 %310 
                                Private f32* %312 = OpAccessChain %115 %113 
                                         f32 %313 = OpLoad %312 
                                         f32 %314 = OpExtInst %1 4 %313 
                                Uniform f32* %315 = OpAccessChain %20 %307 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpFNegate %316 
                                         f32 %318 = OpFAdd %314 %317 
                                Private f32* %319 = OpAccessChain %115 %113 
                                                      OpStore %319 %318 
                                Private f32* %320 = OpAccessChain %115 %113 
                                         f32 %321 = OpLoad %320 
                                         f32 %322 = OpExtInst %1 43 %321 %79 %80 
                                Private f32* %323 = OpAccessChain %115 %113 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %115 %113 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFNegate %325 
                                         f32 %327 = OpFAdd %326 %80 
                                Private f32* %328 = OpAccessChain %115 %113 
                                                      OpStore %328 %327 
                                Private f32* %329 = OpAccessChain %115 %113 
                                         f32 %330 = OpLoad %329 
                                Private f32* %331 = OpAccessChain %9 %113 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpFMul %330 %332 
                                Private f32* %334 = OpAccessChain %9 %113 
                                                      OpStore %334 %333 
                                Private f32* %335 = OpAccessChain %9 %113 
                                         f32 %336 = OpLoad %335 
                                Uniform f32* %338 = OpAccessChain %20 %337 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %336 %339 
                                 Output f32* %342 = OpAccessChain %297 %224 
                                                      OpStore %342 %340 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 387
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationControl %4 "main" %23 %25 %30 %37 %39 %47 %51 %58 %60 %65 %67 %72 %74 %79 %81 %86 %88 %219 %371 
                                                      OpExecutionMode %4 OutputVertices 4 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %25 BuiltIn WorkgroupSize 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %37 Location 37 
                                                      OpDecorate %39 Location 39 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %51 Location 51 
                                                      OpDecorate %58 Location 58 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate %65 Location 65 
                                                      OpDecorate vs_TEXCOORD1 Location 67 
                                                      OpDecorate %72 Location 72 
                                                      OpDecorate vs_TEXCOORD2 Location 74 
                                                      OpDecorate %79 Location 79 
                                                      OpDecorate vs_TEXCOORD3 Location 81 
                                                      OpDecorate %86 Location 86 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %96 ArrayStride 96 
                                                      OpMemberDecorate %97 0 Offset 97 
                                                      OpMemberDecorate %97 1 Offset 97 
                                                      OpMemberDecorate %97 2 Offset 97 
                                                      OpMemberDecorate %97 3 Offset 97 
                                                      OpDecorate %97 Block 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate %219 Patch 
                                                      OpDecorate %219 BuiltIn 219 
                                                      OpDecorate %371 Patch 
                                                      OpDecorate %371 BuiltIn 371 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %8 = OpTypeInt 32 1 
                                               %9 = OpTypePointer Function %8 
                                              %10 = OpTypeFunction %2 %9 
                                              %17 = OpTypeFloat 32 
                                              %18 = OpTypeVector %17 4 
                                              %19 = OpTypeInt 32 0 
                                          u32 %20 = OpConstant 3 
                                              %21 = OpTypeArray %18 %20 
                                              %22 = OpTypePointer Output %21 
                             Output f32_4[3]* %23 = OpVariable Output 
                                              %24 = OpTypePointer Input %8 
                                   Input i32* %25 = OpVariable Input 
                                          u32 %27 = OpConstant 32 
                                              %28 = OpTypeArray %18 %27 
                                              %29 = OpTypePointer Input %28 
                             Input f32_4[32]* %30 = OpVariable Input 
                                              %32 = OpTypePointer Input %18 
                                              %35 = OpTypePointer Output %18 
                             Output f32_4[3]* %37 = OpVariable Output 
                             Input f32_4[32]* %39 = OpVariable Input 
                                              %44 = OpTypeVector %17 3 
                                              %45 = OpTypeArray %44 %20 
                                              %46 = OpTypePointer Output %45 
                             Output f32_3[3]* %47 = OpVariable Output 
                                              %49 = OpTypeArray %44 %27 
                                              %50 = OpTypePointer Input %49 
                             Input f32_3[32]* %51 = OpVariable Input 
                                              %53 = OpTypePointer Input %44 
                                              %56 = OpTypePointer Output %44 
                             Output f32_4[3]* %58 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD0 = OpVariable Input 
                             Output f32_4[3]* %65 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD1 = OpVariable Input 
                             Output f32_4[3]* %72 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD2 = OpVariable Input 
                             Output f32_4[3]* %79 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD3 = OpVariable Input 
                             Output f32_4[3]* %86 = OpVariable Output 
                             Input f32_4[32]* %88 = OpVariable Input 
                                              %93 = OpTypePointer Private %44 
                               Private f32_3* %94 = OpVariable Private 
                                          u32 %95 = OpConstant 4 
                                              %96 = OpTypeArray %18 %95 
                                              %97 = OpTypeStruct %44 %18 %96 %17 
                                              %98 = OpTypePointer Uniform %97 
Uniform struct {f32_3; f32_4; f32_4[4]; f32;}* %99 = OpVariable Uniform 
                                         i32 %100 = OpConstant 2 
                                         i32 %101 = OpConstant 1 
                                             %102 = OpTypePointer Uniform %18 
                                         i32 %110 = OpConstant 0 
                                         i32 %129 = OpConstant 3 
                              Private f32_3* %139 = OpVariable Private 
                              Private f32_3* %174 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                             %182 = OpTypePointer Uniform %44 
                                             %187 = OpTypePointer Private %17 
                                Private f32* %188 = OpVariable Private 
                                             %195 = OpTypePointer Uniform %17 
                                Private f32* %203 = OpVariable Private 
                                         u32 %210 = OpConstant 1 
                                             %217 = OpTypeArray %17 %95 
                                             %218 = OpTypePointer Output %217 
                              Output f32[4]* %219 = OpVariable Output 
                                         f32 %221 = OpConstant 3.674022E-40 
                                             %223 = OpTypePointer Output %17 
                              Private f32_3* %259 = OpVariable Private 
                                         u32 %285 = OpConstant 0 
                              Private f32_3* %325 = OpVariable Private 
                                         u32 %368 = OpConstant 2 
                                             %369 = OpTypeArray %17 %368 
                                             %370 = OpTypePointer Output %369 
                              Output f32[2]* %371 = OpVariable Output 
                                         f32 %374 = OpConstant 3.674022E-40 
                                             %379 = OpTypeBool 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %383 = OpVariable Function 
                               Function i32* %385 = OpVariable Function 
                                        void %377 = OpFunctionCall %6 
                                                      OpControlBarrier 368 95 285 
                                         i32 %378 = OpLoad %25 
                                        bool %380 = OpIEqual %378 %110 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %380 %381 %382 
                                             %381 = OpLabel 
                                                      OpStore %383 %110 
                                        void %384 = OpFunctionCall %12 %383 
                                                      OpStore %385 %110 
                                        void %386 = OpFunctionCall %15 %385 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
                                          void %6 = OpFunction None %3 
                                               %7 = OpLabel 
                                          i32 %26 = OpLoad %25 
                                          i32 %31 = OpLoad %25 
                                 Input f32_4* %33 = OpAccessChain %30 %31 
                                        f32_4 %34 = OpLoad %33 
                                Output f32_4* %36 = OpAccessChain %23 %26 
                                                      OpStore %36 %34 
                                          i32 %38 = OpLoad %25 
                                          i32 %40 = OpLoad %25 
                                 Input f32_4* %41 = OpAccessChain %39 %40 
                                        f32_4 %42 = OpLoad %41 
                                Output f32_4* %43 = OpAccessChain %37 %38 
                                                      OpStore %43 %42 
                                          i32 %48 = OpLoad %25 
                                          i32 %52 = OpLoad %25 
                                 Input f32_3* %54 = OpAccessChain %51 %52 
                                        f32_3 %55 = OpLoad %54 
                                Output f32_3* %57 = OpAccessChain %47 %48 
                                                      OpStore %57 %55 
                                          i32 %59 = OpLoad %25 
                                          i32 %61 = OpLoad %25 
                                 Input f32_4* %62 = OpAccessChain vs_TEXCOORD0 %61 
                                        f32_4 %63 = OpLoad %62 
                                Output f32_4* %64 = OpAccessChain %58 %59 
                                                      OpStore %64 %63 
                                          i32 %66 = OpLoad %25 
                                          i32 %68 = OpLoad %25 
                                 Input f32_4* %69 = OpAccessChain vs_TEXCOORD1 %68 
                                        f32_4 %70 = OpLoad %69 
                                Output f32_4* %71 = OpAccessChain %65 %66 
                                                      OpStore %71 %70 
                                          i32 %73 = OpLoad %25 
                                          i32 %75 = OpLoad %25 
                                 Input f32_4* %76 = OpAccessChain vs_TEXCOORD2 %75 
                                        f32_4 %77 = OpLoad %76 
                                Output f32_4* %78 = OpAccessChain %72 %73 
                                                      OpStore %78 %77 
                                          i32 %80 = OpLoad %25 
                                          i32 %82 = OpLoad %25 
                                 Input f32_4* %83 = OpAccessChain vs_TEXCOORD3 %82 
                                        f32_4 %84 = OpLoad %83 
                                Output f32_4* %85 = OpAccessChain %79 %80 
                                                      OpStore %85 %84 
                                          i32 %87 = OpLoad %25 
                                          i32 %89 = OpLoad %25 
                                 Input f32_4* %90 = OpAccessChain %88 %89 
                                        f32_4 %91 = OpLoad %90 
                                Output f32_4* %92 = OpAccessChain %86 %87 
                                                      OpStore %92 %91 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %12 = OpFunction None %10 
                                Function i32* %11 = OpFunctionParameter 
                                              %13 = OpLabel 
                              Uniform f32_4* %103 = OpAccessChain %99 %100 %101 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                Input f32_4* %106 = OpAccessChain %30 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 1 1 1 
                                       f32_3 %109 = OpFMul %105 %108 
                                                      OpStore %94 %109 
                              Uniform f32_4* %111 = OpAccessChain %99 %100 %110 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                Input f32_4* %114 = OpAccessChain %30 %101 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %113 %116 
                                       f32_3 %118 = OpLoad %94 
                                       f32_3 %119 = OpFAdd %117 %118 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %99 %100 %100 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                Input f32_4* %123 = OpAccessChain %30 %101 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 2 2 2 
                                       f32_3 %126 = OpFMul %122 %125 
                                       f32_3 %127 = OpLoad %94 
                                       f32_3 %128 = OpFAdd %126 %127 
                                                      OpStore %94 %128 
                              Uniform f32_4* %130 = OpAccessChain %99 %100 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                Input f32_4* %133 = OpAccessChain %30 %101 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 3 3 3 
                                       f32_3 %136 = OpFMul %132 %135 
                                       f32_3 %137 = OpLoad %94 
                                       f32_3 %138 = OpFAdd %136 %137 
                                                      OpStore %94 %138 
                              Uniform f32_4* %140 = OpAccessChain %99 %100 %101 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                Input f32_4* %143 = OpAccessChain %30 %100 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 1 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                                      OpStore %139 %146 
                              Uniform f32_4* %147 = OpAccessChain %99 %100 %110 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                Input f32_4* %150 = OpAccessChain %30 %100 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 0 0 
                                       f32_3 %153 = OpFMul %149 %152 
                                       f32_3 %154 = OpLoad %139 
                                       f32_3 %155 = OpFAdd %153 %154 
                                                      OpStore %139 %155 
                              Uniform f32_4* %156 = OpAccessChain %99 %100 %100 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                Input f32_4* %159 = OpAccessChain %30 %100 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 2 2 2 
                                       f32_3 %162 = OpFMul %158 %161 
                                       f32_3 %163 = OpLoad %139 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %139 %164 
                              Uniform f32_4* %165 = OpAccessChain %99 %100 %129 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                Input f32_4* %168 = OpAccessChain %30 %100 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 3 3 3 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_3 %172 = OpLoad %139 
                                       f32_3 %173 = OpFAdd %171 %172 
                                                      OpStore %139 %173 
                                       f32_3 %175 = OpLoad %94 
                                       f32_3 %176 = OpLoad %139 
                                       f32_3 %177 = OpFAdd %175 %176 
                                                      OpStore %174 %177 
                                       f32_3 %178 = OpLoad %174 
                                       f32_3 %181 = OpFMul %178 %180 
                              Uniform f32_3* %183 = OpAccessChain %99 %110 
                                       f32_3 %184 = OpLoad %183 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpFAdd %181 %185 
                                                      OpStore %174 %186 
                                       f32_3 %189 = OpLoad %174 
                                       f32_3 %190 = OpLoad %174 
                                         f32 %191 = OpDot %189 %190 
                                                      OpStore %188 %191 
                                         f32 %192 = OpLoad %188 
                                         f32 %193 = OpExtInst %1 31 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                Uniform f32* %196 = OpAccessChain %99 %129 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %194 %197 
                                                      OpStore %188 %198 
                                       f32_3 %199 = OpLoad %94 
                                       f32_3 %200 = OpLoad %139 
                                       f32_3 %201 = OpFNegate %200 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore %174 %202 
                                       f32_3 %204 = OpLoad %174 
                                       f32_3 %205 = OpLoad %174 
                                         f32 %206 = OpDot %204 %205 
                                                      OpStore %203 %206 
                                         f32 %207 = OpLoad %203 
                                         f32 %208 = OpExtInst %1 31 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                Uniform f32* %211 = OpAccessChain %99 %101 %210 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %209 %212 
                                                      OpStore %203 %213 
                                         f32 %214 = OpLoad %203 
                                         f32 %215 = OpLoad %188 
                                         f32 %216 = OpFDiv %214 %215 
                                                      OpStore %188 %216 
                                         f32 %220 = OpLoad %188 
                                         f32 %222 = OpExtInst %1 40 %220 %221 
                                 Output f32* %224 = OpAccessChain %219 %110 
                                                      OpStore %224 %222 
                              Uniform f32_4* %225 = OpAccessChain %99 %100 %101 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                Input f32_4* %228 = OpAccessChain %30 %110 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 1 1 1 
                                       f32_3 %231 = OpFMul %227 %230 
                                                      OpStore %174 %231 
                              Uniform f32_4* %232 = OpAccessChain %99 %100 %110 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                Input f32_4* %235 = OpAccessChain %30 %110 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 0 0 
                                       f32_3 %238 = OpFMul %234 %237 
                                       f32_3 %239 = OpLoad %174 
                                       f32_3 %240 = OpFAdd %238 %239 
                                                      OpStore %174 %240 
                              Uniform f32_4* %241 = OpAccessChain %99 %100 %100 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                Input f32_4* %244 = OpAccessChain %30 %110 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 2 2 2 
                                       f32_3 %247 = OpFMul %243 %246 
                                       f32_3 %248 = OpLoad %174 
                                       f32_3 %249 = OpFAdd %247 %248 
                                                      OpStore %174 %249 
                              Uniform f32_4* %250 = OpAccessChain %99 %100 %129 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                Input f32_4* %253 = OpAccessChain %30 %110 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 3 3 3 
                                       f32_3 %256 = OpFMul %252 %255 
                                       f32_3 %257 = OpLoad %174 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore %174 %258 
                                       f32_3 %260 = OpLoad %139 
                                       f32_3 %261 = OpLoad %174 
                                       f32_3 %262 = OpFAdd %260 %261 
                                                      OpStore %259 %262 
                                       f32_3 %263 = OpLoad %139 
                                       f32_3 %264 = OpLoad %174 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_3 %266 = OpFAdd %263 %265 
                                                      OpStore %139 %266 
                                       f32_3 %267 = OpLoad %139 
                                       f32_3 %268 = OpLoad %139 
                                         f32 %269 = OpDot %267 %268 
                                                      OpStore %188 %269 
                                         f32 %270 = OpLoad %188 
                                         f32 %271 = OpExtInst %1 31 %270 
                                                      OpStore %188 %271 
                                         f32 %272 = OpLoad %188 
                                Uniform f32* %273 = OpAccessChain %99 %101 %210 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                                      OpStore %188 %275 
                                       f32_3 %276 = OpLoad %259 
                                       f32_3 %277 = OpFMul %276 %180 
                              Uniform f32_3* %278 = OpAccessChain %99 %110 
                                       f32_3 %279 = OpLoad %278 
                                       f32_3 %280 = OpFNegate %279 
                                       f32_3 %281 = OpFAdd %277 %280 
                                                      OpStore %139 %281 
                                       f32_3 %282 = OpLoad %139 
                                       f32_3 %283 = OpLoad %139 
                                         f32 %284 = OpDot %282 %283 
                                Private f32* %286 = OpAccessChain %139 %285 
                                                      OpStore %286 %284 
                                Private f32* %287 = OpAccessChain %139 %285 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 31 %288 
                                Private f32* %290 = OpAccessChain %139 %285 
                                                      OpStore %290 %289 
                                Private f32* %291 = OpAccessChain %139 %285 
                                         f32 %292 = OpLoad %291 
                                Uniform f32* %293 = OpAccessChain %99 %129 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFMul %292 %294 
                                Private f32* %296 = OpAccessChain %139 %285 
                                                      OpStore %296 %295 
                                         f32 %297 = OpLoad %188 
                                Private f32* %298 = OpAccessChain %139 %285 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFDiv %297 %299 
                                                      OpStore %188 %300 
                                         f32 %301 = OpLoad %188 
                                         f32 %302 = OpExtInst %1 40 %301 %221 
                                 Output f32* %303 = OpAccessChain %219 %101 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %94 
                                       f32_3 %305 = OpLoad %174 
                                       f32_3 %306 = OpFAdd %304 %305 
                                                      OpStore %139 %306 
                                       f32_3 %307 = OpLoad %94 
                                       f32_3 %308 = OpFNegate %307 
                                       f32_3 %309 = OpLoad %174 
                                       f32_3 %310 = OpFAdd %308 %309 
                                                      OpStore %94 %310 
                                       f32_3 %311 = OpLoad %94 
                                       f32_3 %312 = OpLoad %94 
                                         f32 %313 = OpDot %311 %312 
                                Private f32* %314 = OpAccessChain %94 %285 
                                                      OpStore %314 %313 
                                Private f32* %315 = OpAccessChain %94 %285 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpExtInst %1 31 %316 
                                Private f32* %318 = OpAccessChain %94 %285 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %94 %285 
                                         f32 %320 = OpLoad %319 
                                Uniform f32* %321 = OpAccessChain %99 %101 %210 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %320 %322 
                                Private f32* %324 = OpAccessChain %94 %285 
                                                      OpStore %324 %323 
                                       f32_3 %326 = OpLoad %139 
                                       f32_3 %327 = OpFMul %326 %180 
                              Uniform f32_3* %328 = OpAccessChain %99 %110 
                                       f32_3 %329 = OpLoad %328 
                                       f32_3 %330 = OpFNegate %329 
                                       f32_3 %331 = OpFAdd %327 %330 
                                                      OpStore %325 %331 
                                       f32_3 %332 = OpLoad %325 
                                       f32_3 %333 = OpLoad %325 
                                         f32 %334 = OpDot %332 %333 
                                Private f32* %335 = OpAccessChain %325 %285 
                                                      OpStore %335 %334 
                                Private f32* %336 = OpAccessChain %325 %285 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpExtInst %1 31 %337 
                                Private f32* %339 = OpAccessChain %325 %285 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %325 %285 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %99 %129 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFMul %341 %343 
                                Private f32* %345 = OpAccessChain %325 %285 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %94 %285 
                                         f32 %347 = OpLoad %346 
                                Private f32* %348 = OpAccessChain %325 %285 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFDiv %347 %349 
                                Private f32* %351 = OpAccessChain %94 %285 
                                                      OpStore %351 %350 
                                Private f32* %352 = OpAccessChain %94 %285 
                                         f32 %353 = OpLoad %352 
                                         f32 %354 = OpExtInst %1 40 %353 %221 
                                 Output f32* %355 = OpAccessChain %219 %100 
                                                      OpStore %355 %354 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %15 = OpFunction None %10 
                                Function i32* %14 = OpFunctionParameter 
                                              %16 = OpLabel 
                                 Output f32* %356 = OpAccessChain %219 %100 
                                         f32 %357 = OpLoad %356 
                                 Output f32* %358 = OpAccessChain %219 %100 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                Private f32* %361 = OpAccessChain %94 %285 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %94 %285 
                                         f32 %363 = OpLoad %362 
                                 Output f32* %364 = OpAccessChain %219 %100 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFAdd %363 %365 
                                Private f32* %367 = OpAccessChain %94 %285 
                                                      OpStore %367 %366 
                                Private f32* %372 = OpAccessChain %94 %285 
                                         f32 %373 = OpLoad %372 
                                         f32 %375 = OpFMul %373 %374 
                                 Output f32* %376 = OpAccessChain %371 %110 
                                                      OpStore %376 %375 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 399
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationEvaluation %4 "main" %12 %20 %139 %208 %236 %328 %333 %336 %384 
                                                      OpExecutionMode %4 Triangles 
                                                      OpExecutionMode %4 SpacingFractionalOdd 
                                                      OpExecutionMode %4 VertexOrderCw 
                                                      OpDecorate %12 BuiltIn TessLevelInner 
                                                      OpDecorate %20 Location 20 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpMemberDecorate %61 5 Offset 61 
                                                      OpMemberDecorate %61 6 Offset 61 
                                                      OpMemberDecorate %61 7 Offset 61 
                                                      OpMemberDecorate %61 8 Offset 61 
                                                      OpMemberDecorate %61 9 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %97 DescriptorSet 97 
                                                      OpDecorate %97 Binding 97 
                                                      OpDecorate %101 DescriptorSet 101 
                                                      OpDecorate %101 Binding 101 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %113 DescriptorSet 113 
                                                      OpDecorate %113 Binding 113 
                                                      OpDecorate %139 Location 139 
                                                      OpDecorate %208 Location 208 
                                                      OpDecorate %236 Location 236 
                                                      OpMemberDecorate %326 0 BuiltIn 326 
                                                      OpMemberDecorate %326 1 BuiltIn 326 
                                                      OpMemberDecorate %326 2 BuiltIn 326 
                                                      OpDecorate %326 Block 
                                                      OpDecorate %333 Location 333 
                                                      OpDecorate %336 Location 336 
                                                      OpDecorate %384 Location 384 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 32 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypePointer Input %18 
                             Input f32_4[32]* %20 = OpVariable Input 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Input %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %42 = OpConstant 2 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                              %60 = OpTypeArray %7 %56 
                                              %61 = OpTypeStruct %7 %57 %58 %59 %60 %6 %6 %7 %6 %6 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32; f32;}* %63 = OpVariable Uniform 
                                          i32 %64 = OpConstant 7 
                                              %65 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 5 
                                              %80 = OpTypePointer Uniform %6 
                                          i32 %83 = OpConstant 6 
                                              %93 = OpTypePointer Private %6 
                                 Private f32* %94 = OpVariable Private 
                                              %95 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %96 = OpTypePointer UniformConstant %95 
         UniformConstant read_only Texture2D* %97 = OpVariable UniformConstant 
                                              %99 = OpTypeSampler 
                                             %100 = OpTypePointer UniformConstant %99 
                    UniformConstant sampler* %101 = OpVariable UniformConstant 
                                             %103 = OpTypeSampledImage %95 
                                         f32 %107 = OpConstant 3.674022E-40 
                                         u32 %109 = OpConstant 0 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                    UniformConstant sampler* %113 = OpVariable UniformConstant 
                              Private f32_4* %134 = OpVariable Private 
                                             %137 = OpTypeArray %10 %17 
                                             %138 = OpTypePointer Input %137 
                            Input f32_3[32]* %139 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         u32 %179 = OpConstant 2 
                                         u32 %187 = OpConstant 1 
                                Private f32* %189 = OpVariable Private 
                                         i32 %202 = OpConstant 8 
                                             %207 = OpTypePointer Output %10 
                               Output f32_3* %208 = OpVariable Output 
                                         f32 %222 = OpConstant 3.674022E-40 
                            Input f32_4[32]* %236 = OpVariable Input 
                                         i32 %256 = OpConstant 9 
                                         i32 %294 = OpConstant 3 
                              Private f32_4* %298 = OpVariable Private 
                                             %325 = OpTypeArray %6 %187 
                                             %326 = OpTypeStruct %7 %6 %325 
                                             %327 = OpTypePointer Output %326 
        Output struct {f32_4; f32; f32[1];}* %328 = OpVariable Output 
                                             %330 = OpTypePointer Output %7 
                                             %332 = OpTypePointer Output %6 
                                 Output f32* %333 = OpVariable Output 
                               Output f32_3* %336 = OpVariable Output 
                                         i32 %355 = OpConstant 4 
                               Output f32_3* %384 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 1 1 
                                 Input f32_4* %24 = OpAccessChain %20 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                                        f32_2 %27 = OpFMul %15 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                                 Input f32_4* %31 = OpAccessChain %20 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_3 %34 = OpLoad %12 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 0 
                                        f32_2 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                                        f32_2 %39 = OpFAdd %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                 Input f32_4* %43 = OpAccessChain %20 %42 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_3 %46 = OpLoad %12 
                                        f32_2 %47 = OpVectorShuffle %46 %46 2 2 
                                        f32_2 %48 = OpFMul %45 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                                        f32_2 %51 = OpFAdd %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               Uniform f32_4* %66 = OpAccessChain %63 %64 
                                        f32_4 %67 = OpLoad %66 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                        f32_2 %69 = OpFMul %55 %68 
                               Uniform f32_4* %70 = OpAccessChain %63 %64 
                                        f32_4 %71 = OpLoad %70 
                                        f32_2 %72 = OpVectorShuffle %71 %71 2 3 
                                        f32_2 %73 = OpFAdd %69 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %73 4 5 2 3 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %63 %30 
                                        f32_4 %77 = OpLoad %76 
                                        f32_2 %78 = OpVectorShuffle %77 %77 1 1 
                                 Uniform f32* %81 = OpAccessChain %63 %79 
                                          f32 %82 = OpLoad %81 
                                 Uniform f32* %84 = OpAccessChain %63 %83 
                                          f32 %85 = OpLoad %84 
                                        f32_2 %86 = OpCompositeConstruct %82 %85 
                                        f32_2 %87 = OpFMul %78 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_2 %90 = OpFAdd %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 2 3 
                                                      OpStore %9 %92 
                          read_only Texture2D %98 = OpLoad %97 
                                     sampler %102 = OpLoad %101 
                  read_only Texture2DSampled %104 = OpSampledImage %98 %102 
                                       f32_4 %105 = OpLoad %9 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %108 = OpImageSampleExplicitLod %104 %106 Lod %7 
                                         f32 %110 = OpCompositeExtract %108 0 
                                                      OpStore %94 %110 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %114 = OpLoad %113 
                  read_only Texture2DSampled %115 = OpSampledImage %112 %114 
                                       f32_4 %116 = OpLoad %9 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpImageSampleExplicitLod %115 %117 Lod %7 
                                         f32 %119 = OpCompositeExtract %118 0 
                                Private f32* %120 = OpAccessChain %9 %109 
                                                      OpStore %120 %119 
                                Private f32* %121 = OpAccessChain %9 %109 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpLoad %94 
                                         f32 %124 = OpFMul %122 %123 
                                Private f32* %125 = OpAccessChain %9 %109 
                                                      OpStore %125 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                              Uniform f32_4* %128 = OpAccessChain %63 %42 %22 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %127 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %9 %133 
                                       f32_3 %135 = OpLoad %12 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                                Input f32_3* %140 = OpAccessChain %139 %22 
                                       f32_3 %141 = OpLoad %140 
                                       f32_3 %142 = OpFMul %136 %141 
                                       f32_4 %143 = OpLoad %134 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %134 %144 
                                Input f32_3* %145 = OpAccessChain %139 %30 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpLoad %12 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 0 0 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %134 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %149 %151 
                                       f32_4 %153 = OpLoad %134 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %134 %154 
                                Input f32_3* %155 = OpAccessChain %139 %42 
                                       f32_3 %156 = OpLoad %155 
                                       f32_3 %157 = OpLoad %12 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %134 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %134 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %134 %164 
                                       f32_4 %166 = OpLoad %134 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                              Uniform f32_4* %168 = OpAccessChain %63 %42 %30 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %167 %170 
                                Private f32* %172 = OpAccessChain %165 %109 
                                                      OpStore %172 %171 
                                       f32_4 %173 = OpLoad %134 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                              Uniform f32_4* %175 = OpAccessChain %63 %42 %42 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %165 %179 
                                                      OpStore %180 %178 
                                       f32_4 %181 = OpLoad %134 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                              Uniform f32_4* %183 = OpAccessChain %63 %42 %22 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %182 %185 
                                Private f32* %188 = OpAccessChain %165 %187 
                                                      OpStore %188 %186 
                                       f32_4 %190 = OpLoad %165 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %165 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %191 %193 
                                                      OpStore %189 %194 
                                         f32 %195 = OpLoad %189 
                                         f32 %196 = OpExtInst %1 32 %195 
                                                      OpStore %189 %196 
                                Private f32* %197 = OpAccessChain %165 %187 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFNegate %198 
                                         f32 %200 = OpLoad %189 
                                         f32 %201 = OpFMul %199 %200 
                                Uniform f32* %203 = OpAccessChain %63 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFAdd %201 %204 
                                Private f32* %206 = OpAccessChain %134 %109 
                                                      OpStore %206 %205 
                                         f32 %209 = OpLoad %189 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_4 %211 = OpLoad %165 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFMul %210 %212 
                                                      OpStore %208 %213 
                                Private f32* %214 = OpAccessChain %134 %109 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpExtInst %1 4 %215 
                                Uniform f32* %217 = OpAccessChain %63 %202 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                         f32 %220 = OpFAdd %216 %219 
                                                      OpStore %189 %220 
                                         f32 %221 = OpLoad %189 
                                         f32 %223 = OpExtInst %1 43 %221 %107 %222 
                                                      OpStore %189 %223 
                                         f32 %224 = OpLoad %189 
                                         f32 %225 = OpFNegate %224 
                                         f32 %226 = OpFAdd %225 %222 
                                                      OpStore %189 %226 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                         f32 %229 = OpLoad %189 
                                       f32_3 %230 = OpCompositeConstruct %229 %229 %229 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_3 %234 = OpLoad %12 
                                       f32_4 %235 = OpVectorShuffle %234 %234 1 1 1 1 
                                Input f32_4* %237 = OpAccessChain %236 %22 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpFMul %235 %238 
                                                      OpStore %134 %239 
                                Input f32_4* %240 = OpAccessChain %236 %30 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpLoad %12 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpFMul %241 %243 
                                       f32_4 %245 = OpLoad %134 
                                       f32_4 %246 = OpFAdd %244 %245 
                                                      OpStore %134 %246 
                                Input f32_4* %247 = OpAccessChain %236 %42 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpLoad %12 
                                       f32_4 %250 = OpVectorShuffle %249 %249 2 2 2 2 
                                       f32_4 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %134 
                                       f32_4 %253 = OpFAdd %251 %252 
                                                      OpStore %134 %253 
                                       f32_4 %254 = OpLoad %9 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                Uniform f32* %257 = OpAccessChain %63 %256 
                                         f32 %258 = OpLoad %257 
                                Uniform f32* %259 = OpAccessChain %63 %256 
                                         f32 %260 = OpLoad %259 
                                Uniform f32* %261 = OpAccessChain %63 %256 
                                         f32 %262 = OpLoad %261 
                                       f32_3 %263 = OpCompositeConstruct %258 %260 %262 
                                         f32 %264 = OpCompositeExtract %263 0 
                                         f32 %265 = OpCompositeExtract %263 1 
                                         f32 %266 = OpCompositeExtract %263 2 
                                       f32_3 %267 = OpCompositeConstruct %264 %265 %266 
                                       f32_3 %268 = OpFMul %255 %267 
                                       f32_4 %269 = OpLoad %134 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %9 %273 
                                       f32_4 %274 = OpLoad %9 
                                       f32_4 %275 = OpVectorShuffle %274 %274 1 1 1 1 
                              Uniform f32_4* %276 = OpAccessChain %63 %22 %22 
                                       f32_4 %277 = OpLoad %276 
                                       f32_4 %278 = OpFMul %275 %277 
                                                      OpStore %165 %278 
                              Uniform f32_4* %279 = OpAccessChain %63 %22 %30 
                                       f32_4 %280 = OpLoad %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %281 0 0 0 0 
                                       f32_4 %283 = OpFMul %280 %282 
                                       f32_4 %284 = OpLoad %165 
                                       f32_4 %285 = OpFAdd %283 %284 
                                                      OpStore %165 %285 
                              Uniform f32_4* %286 = OpAccessChain %63 %22 %42 
                                       f32_4 %287 = OpLoad %286 
                                       f32_4 %288 = OpLoad %9 
                                       f32_4 %289 = OpVectorShuffle %288 %288 2 2 2 2 
                                       f32_4 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %165 
                                       f32_4 %292 = OpFAdd %290 %291 
                                                      OpStore %9 %292 
                                       f32_4 %293 = OpLoad %9 
                              Uniform f32_4* %295 = OpAccessChain %63 %22 %294 
                                       f32_4 %296 = OpLoad %295 
                                       f32_4 %297 = OpFAdd %293 %296 
                                                      OpStore %165 %297 
                                       f32_4 %299 = OpLoad %165 
                                       f32_4 %300 = OpVectorShuffle %299 %299 1 1 1 1 
                              Uniform f32_4* %301 = OpAccessChain %63 %294 %22 
                                       f32_4 %302 = OpLoad %301 
                                       f32_4 %303 = OpFMul %300 %302 
                                                      OpStore %298 %303 
                              Uniform f32_4* %304 = OpAccessChain %63 %294 %30 
                                       f32_4 %305 = OpLoad %304 
                                       f32_4 %306 = OpLoad %165 
                                       f32_4 %307 = OpVectorShuffle %306 %306 0 0 0 0 
                                       f32_4 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %298 
                                       f32_4 %310 = OpFAdd %308 %309 
                                                      OpStore %298 %310 
                              Uniform f32_4* %311 = OpAccessChain %63 %294 %42 
                                       f32_4 %312 = OpLoad %311 
                                       f32_4 %313 = OpLoad %165 
                                       f32_4 %314 = OpVectorShuffle %313 %313 2 2 2 2 
                                       f32_4 %315 = OpFMul %312 %314 
                                       f32_4 %316 = OpLoad %298 
                                       f32_4 %317 = OpFAdd %315 %316 
                                                      OpStore %298 %317 
                              Uniform f32_4* %318 = OpAccessChain %63 %294 %294 
                                       f32_4 %319 = OpLoad %318 
                                       f32_4 %320 = OpLoad %165 
                                       f32_4 %321 = OpVectorShuffle %320 %320 3 3 3 3 
                                       f32_4 %322 = OpFMul %319 %321 
                                       f32_4 %323 = OpLoad %298 
                                       f32_4 %324 = OpFAdd %322 %323 
                                                      OpStore %165 %324 
                                       f32_4 %329 = OpLoad %165 
                               Output f32_4* %331 = OpAccessChain %328 %30 
                                                      OpStore %331 %329 
                                Private f32* %334 = OpAccessChain %165 %179 
                                         f32 %335 = OpLoad %334 
                                                      OpStore %333 %335 
                              Uniform f32_4* %337 = OpAccessChain %63 %22 %294 
                                       f32_4 %338 = OpLoad %337 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_4 %340 = OpLoad %134 
                                       f32_3 %341 = OpVectorShuffle %340 %340 3 3 3 
                                       f32_3 %342 = OpFMul %339 %341 
                                       f32_4 %343 = OpLoad %9 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFAdd %342 %344 
                                                      OpStore %336 %345 
                              Uniform f32_4* %346 = OpAccessChain %63 %22 %294 
                                       f32_4 %347 = OpLoad %346 
                                       f32_4 %348 = OpLoad %134 
                                       f32_4 %349 = OpVectorShuffle %348 %348 3 3 3 3 
                                       f32_4 %350 = OpFMul %347 %349 
                                       f32_4 %351 = OpLoad %9 
                                       f32_4 %352 = OpFAdd %350 %351 
                                                      OpStore %9 %352 
                                       f32_4 %353 = OpLoad %9 
                                       f32_3 %354 = OpVectorShuffle %353 %353 1 1 1 
                              Uniform f32_4* %356 = OpAccessChain %63 %355 %22 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_3 %359 = OpFMul %354 %358 
                                       f32_4 %360 = OpLoad %134 
                                       f32_4 %361 = OpVectorShuffle %360 %359 4 5 6 3 
                                                      OpStore %134 %361 
                              Uniform f32_4* %362 = OpAccessChain %63 %355 %30 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_4 %365 = OpLoad %9 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 0 0 
                                       f32_3 %367 = OpFMul %364 %366 
                                       f32_4 %368 = OpLoad %134 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_3 %370 = OpFAdd %367 %369 
                                       f32_4 %371 = OpLoad %134 
                                       f32_4 %372 = OpVectorShuffle %371 %370 4 5 6 3 
                                                      OpStore %134 %372 
                              Uniform f32_4* %373 = OpAccessChain %63 %355 %42 
                                       f32_4 %374 = OpLoad %373 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_4 %376 = OpLoad %9 
                                       f32_3 %377 = OpVectorShuffle %376 %376 2 2 2 
                                       f32_3 %378 = OpFMul %375 %377 
                                       f32_4 %379 = OpLoad %134 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFAdd %378 %380 
                                       f32_4 %382 = OpLoad %9 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %9 %383 
                              Uniform f32_4* %385 = OpAccessChain %63 %355 %294 
                                       f32_4 %386 = OpLoad %385 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                                       f32_4 %388 = OpLoad %9 
                                       f32_3 %389 = OpVectorShuffle %388 %388 3 3 3 
                                       f32_3 %390 = OpFMul %387 %389 
                                       f32_4 %391 = OpLoad %9 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                       f32_3 %393 = OpFAdd %390 %392 
                                                      OpStore %384 %393 
                                 Output f32* %394 = OpAccessChain %328 %30 %187 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFNegate %395 
                                 Output f32* %397 = OpAccessChain %328 %30 %187 
                                                      OpStore %397 %396 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 410
#extension GL_ARB_explicit_attrib_location : require

in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
in  vec4 in_TEXCOORD3;
in  vec4 in_COLOR0;
layout(location = 0) out vec4 vs_INTERNALTESSPOS0;
layout(location = 1) out vec4 vs_TANGENT0;
layout(location = 2) out vec3 vs_NORMAL0;
layout(location = 3) out vec4 vs_TEXCOORD0;
layout(location = 4) out vec4 vs_TEXCOORD1;
layout(location = 5) out vec4 vs_TEXCOORD2;
layout(location = 6) out vec4 vs_TEXCOORD3;
layout(location = 7) out vec4 vs_COLOR0;
void main()
{
    vs_INTERNALTESSPOS0 = in_POSITION0;
    vs_TANGENT0 = in_TANGENT0;
    vs_NORMAL0.xyz = in_NORMAL0.xyz;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD3;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Y_Mask;
uniform 	float _FresnelBias;
uniform 	float _FresnelScale;
uniform 	float _FresnelPower;
uniform 	float _Alpha;
UNITY_LOCATION(0) uniform  sampler2D _LightTexture0;
layout(location = 0) in  vec3 ds_TEXCOORD0;
layout(location = 1) in  vec3 ds_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
float u_xlat3;
float u_xlat6;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlat0.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = max(u_xlat9, 0.00100000005);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat10 = u_xlat9 * u_xlat9;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat9 = u_xlat9 * u_xlat10;
    u_xlat9 = u_xlat9 * 0.959999979 + 0.0399999991;
    u_xlat10 = dot(ds_TEXCOORD0.xyz, ds_TEXCOORD0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat2.xyz = vec3(u_xlat10) * ds_TEXCOORD0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat3 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat6 = abs(u_xlat0.x) + u_xlat3;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = _FresnelScale * u_xlat0.x + _FresnelBias;
    u_xlat6 = u_xlat6 + 9.99999975e-06;
    u_xlat6 = 0.5 / u_xlat6;
    u_xlat6 = u_xlat6 * 0.999999881;
    u_xlat3 = u_xlat3 * u_xlat6;
    u_xlat1.xyz = ds_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * ds_TEXCOORD1.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * ds_TEXCOORD1.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = texture(_LightTexture0, vec2(u_xlat6)).x;
    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
    u_xlat1.xyz = vec3(u_xlat3) * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat3 = (-ds_TEXCOORD0.y) + _Y_Mask;
    u_xlat3 = abs(u_xlat3) + (-_Y_Mask);
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = (-u_xlat3) + 1.0;
    u_xlat0.x = u_xlat3 * u_xlat0.x;
    SV_Target0.w = u_xlat0.x * _Alpha;
    return;
}

#endif
#ifdef HULL
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(vertices=3) out;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	float _EdgeLength;
layout(location = 0) in vec4 vs_INTERNALTESSPOS0[];
layout(location = 0) out vec4 hs_INTERNALTESSPOS0[];
layout(location = 1) in vec4 vs_TANGENT0[];
layout(location = 1) out vec4 hs_TANGENT0[];
layout(location = 2) in vec3 vs_NORMAL0[];
layout(location = 2) out vec3 hs_NORMAL0[];
layout(location = 3) in vec4 vs_TEXCOORD0[];
layout(location = 3) out vec4 hs_TEXCOORD0[];
layout(location = 4) in vec4 vs_TEXCOORD1[];
layout(location = 4) out vec4 hs_TEXCOORD1[];
layout(location = 5) in vec4 vs_TEXCOORD2[];
layout(location = 5) out vec4 hs_TEXCOORD2[];
layout(location = 6) in vec4 vs_TEXCOORD3[];
layout(location = 6) out vec4 hs_TEXCOORD3[];
layout(location = 7) in vec4 vs_COLOR0[];
layout(location = 7) out vec4 hs_COLOR0[];
void passthrough_ctrl_points()
{
    hs_INTERNALTESSPOS0[gl_InvocationID] = vs_INTERNALTESSPOS0[gl_InvocationID];
    hs_TANGENT0[gl_InvocationID] = vs_TANGENT0[gl_InvocationID];
    hs_NORMAL0[gl_InvocationID] = vs_NORMAL0[gl_InvocationID];
    hs_TEXCOORD0[gl_InvocationID] = vs_TEXCOORD0[gl_InvocationID];
    hs_TEXCOORD1[gl_InvocationID] = vs_TEXCOORD1[gl_InvocationID];
    hs_TEXCOORD2[gl_InvocationID] = vs_TEXCOORD2[gl_InvocationID];
    hs_TEXCOORD3[gl_InvocationID] = vs_TEXCOORD3[gl_InvocationID];
    hs_COLOR0[gl_InvocationID] = vs_COLOR0[gl_InvocationID];
}
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
float u_xlat13;
void fork_phase2(int phaseInstanceID)
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[1].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[1].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[2].www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _EdgeLength;
    u_xlat2.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _ScreenParams.y;
    u_xlat12 = u_xlat13 / u_xlat12;
    gl_TessLevelOuter[0] = max(u_xlat12, 1.0);
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[0].www + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _ScreenParams.y;
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _EdgeLength;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    gl_TessLevelOuter[1] = max(u_xlat12, 1.0);
    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _ScreenParams.y;
    u_xlat4.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _EdgeLength;
    u_xlat0.x = u_xlat0.x / u_xlat4.x;
    gl_TessLevelOuter[2] = max(u_xlat0.x, 1.0);
}
void join_phase3(int phaseInstanceID)
{
    u_xlat0.x = gl_TessLevelOuter[2] + gl_TessLevelOuter[2];
    u_xlat0.x = u_xlat0.x + gl_TessLevelOuter[2];
    gl_TessLevelInner[0] = u_xlat0.x * 0.333333343;
}
void main()
{
    passthrough_ctrl_points();
    barrier();
    if (gl_InvocationID == 0)
    {
        fork_phase2(0);
        join_phase3(0);
    }
}

#endif
#ifdef DOMAIN
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(ccw) in;
layout(fractional_odd_spacing) in;
layout(triangles) in;
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _u;
uniform 	float _v;
uniform 	vec4 _Flamenoise_ST;
uniform 	float _Y_Mask;
uniform 	float _FlameHeight;
UNITY_LOCATION(1) uniform  sampler2D _FlameWave;
UNITY_LOCATION(2) uniform  sampler2D _Flamenoise;
layout(location = 0) in  vec4 hs_INTERNALTESSPOS0 [];
layout(location = 2) in  vec3 hs_NORMAL0 [];
layout(location = 3) in  vec4 hs_TEXCOORD0 [];
layout(location = 0) out vec3 ds_TEXCOORD0;
layout(location = 1) out vec3 ds_TEXCOORD1;
layout(location = 2) out vec3 ds_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = gl_TessCoord.yy * hs_TEXCOORD0[1].xy;
    u_xlat0.xy = hs_TEXCOORD0[0].xy * gl_TessCoord.xx + u_xlat0.xy;
    u_xlat0.xy = hs_TEXCOORD0[2].xy * gl_TessCoord.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _Flamenoise_ST.xy + _Flamenoise_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_u, _v) + u_xlat0.xy;
    u_xlat8 = textureLod(_FlameWave, u_xlat0.xy, 0.0).x;
    u_xlat0.x = textureLod(_Flamenoise, u_xlat0.xy, 0.0).x;
    u_xlat0.x = u_xlat0.x * u_xlat8;
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat1.xyz = gl_TessCoord.yyy * hs_NORMAL0[1].xyz;
    u_xlat1.xyz = hs_NORMAL0[0].xyz * gl_TessCoord.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hs_NORMAL0[2].xyz * gl_TessCoord.zzz + u_xlat1.xyz;
    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.x = (-u_xlat2.y) * u_xlat12 + _Y_Mask;
    ds_TEXCOORD0.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = abs(u_xlat1.x) + (-_Y_Mask);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
    u_xlat1 = gl_TessCoord.yyyy * hs_INTERNALTESSPOS0[1];
    u_xlat1 = hs_INTERNALTESSPOS0[0] * gl_TessCoord.xxxx + u_xlat1;
    u_xlat1 = hs_INTERNALTESSPOS0[2] * gl_TessCoord.zzzz + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_FlameHeight, _FlameHeight, _FlameHeight)) + u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    ds_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    ds_TEXCOORD2.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 38
; Schema: 0
                               OpCapability Shader 
                        %1 = OpExtInstImport "GLSL.std.450" 
                               OpMemoryModel Logical GLSL450 
                               OpEntryPoint Vertex %4 "main" %9 %11 %13 %14 %18 %20 %22 %23 %25 %26 %28 %29 %31 %32 %34 %35 
                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                               OpDecorate %9 Location 9 
                               OpDecorate %11 Location 11 
                               OpDecorate %13 Location 13 
                               OpDecorate %14 Location 14 
                               OpDecorate %18 Location 18 
                               OpDecorate %20 Location 20 
                               OpDecorate vs_TEXCOORD0 Location 22 
                               OpDecorate %23 Location 23 
                               OpDecorate vs_TEXCOORD1 Location 25 
                               OpDecorate %26 Location 26 
                               OpDecorate vs_TEXCOORD2 Location 28 
                               OpDecorate %29 Location 29 
                               OpDecorate vs_TEXCOORD3 Location 31 
                               OpDecorate %32 Location 32 
                               OpDecorate %34 Location 34 
                               OpDecorate %35 Location 35 
                        %2 = OpTypeVoid 
                        %3 = OpTypeFunction %2 
                        %6 = OpTypeFloat 32 
                        %7 = OpTypeVector %6 4 
                        %8 = OpTypePointer Output %7 
          Output f32_4* %9 = OpVariable Output 
                       %10 = OpTypePointer Input %7 
          Input f32_4* %11 = OpVariable Input 
         Output f32_4* %13 = OpVariable Output 
          Input f32_4* %14 = OpVariable Input 
                       %16 = OpTypeVector %6 3 
                       %17 = OpTypePointer Output %16 
         Output f32_3* %18 = OpVariable Output 
                       %19 = OpTypePointer Input %16 
          Input f32_3* %20 = OpVariable Input 
Output f32_4* vs_TEXCOORD0 = OpVariable Output 
          Input f32_4* %23 = OpVariable Input 
Output f32_4* vs_TEXCOORD1 = OpVariable Output 
          Input f32_4* %26 = OpVariable Input 
Output f32_4* vs_TEXCOORD2 = OpVariable Output 
          Input f32_4* %29 = OpVariable Input 
Output f32_4* vs_TEXCOORD3 = OpVariable Output 
          Input f32_4* %32 = OpVariable Input 
         Output f32_4* %34 = OpVariable Output 
          Input f32_4* %35 = OpVariable Input 
                   void %4 = OpFunction None %3 
                        %5 = OpLabel 
                 f32_4 %12 = OpLoad %11 
                               OpStore %9 %12 
                 f32_4 %15 = OpLoad %14 
                               OpStore %13 %15 
                 f32_3 %21 = OpLoad %20 
                               OpStore %18 %21 
                 f32_4 %24 = OpLoad %23 
                               OpStore vs_TEXCOORD0 %24 
                 f32_4 %27 = OpLoad %26 
                               OpStore vs_TEXCOORD1 %27 
                 f32_4 %30 = OpLoad %29 
                               OpStore vs_TEXCOORD2 %30 
                 f32_4 %33 = OpLoad %32 
                               OpStore vs_TEXCOORD3 %33 
                 f32_4 %36 = OpLoad %35 
                               OpStore %34 %36 
                               OpReturn
                               OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 271
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %229 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %205 DescriptorSet 205 
                                                      OpDecorate %205 Binding 205 
                                                      OpDecorate %209 DescriptorSet 209 
                                                      OpDecorate %209 Binding 209 
                                                      OpDecorate %229 Location 229 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %7 %14 %14 %17 %6 %6 %6 %6 %6 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32; f32; f32; f32; f32;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %7 
                                              %27 = OpTypePointer Private %6 
                                 Private f32* %28 = OpVariable Private 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 1 
                                              %42 = OpTypePointer Uniform %14 
                               Private f32_3* %52 = OpVariable Private 
                                          f32 %67 = OpConstant 3.674022E-40 
                                          f32 %79 = OpConstant 3.674022E-40 
                                          f32 %80 = OpConstant 3.674022E-40 
                                 Private f32* %85 = OpVariable Private 
                                          f32 %96 = OpConstant 3.674022E-40 
                                          f32 %98 = OpConstant 3.674022E-40 
                                Input f32_3* %100 = OpVariable Input 
                                         u32 %113 = OpConstant 0 
                                Private f32* %115 = OpVariable Private 
                                Private f32* %121 = OpVariable Private 
                                         i32 %138 = OpConstant 7 
                                             %139 = OpTypePointer Uniform %6 
                                         i32 %148 = OpConstant 6 
                                         i32 %154 = OpConstant 5 
                                         f32 %160 = OpConstant 3.674022E-40 
                                         f32 %162 = OpConstant 3.674022E-40 
                                         f32 %169 = OpConstant 3.674022E-40 
                                         i32 %173 = OpConstant 3 
                                         i32 %186 = OpConstant 2 
                                             %203 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %204 = OpTypePointer UniformConstant %203 
        UniformConstant read_only Texture2D* %205 = OpVariable UniformConstant 
                                             %207 = OpTypeSampler 
                                             %208 = OpTypePointer UniformConstant %207 
                    UniformConstant sampler* %209 = OpVariable UniformConstant 
                                             %211 = OpTypeSampledImage %203 
                                             %214 = OpTypeVector %6 2 
                                             %228 = OpTypePointer Output %14 
                               Output f32_4* %229 = OpVariable Output 
                                         u32 %236 = OpConstant 1 
                                             %237 = OpTypePointer Input %6 
                                         i32 %241 = OpConstant 4 
                                         i32 %263 = OpConstant 8 
                                         u32 %267 = OpConstant 3 
                                             %268 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad %11 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %13 %25 
                                                      OpStore %9 %26 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpLoad %9 
                                          f32 %31 = OpDot %29 %30 
                                                      OpStore %28 %31 
                                          f32 %32 = OpLoad %28 
                                          f32 %33 = OpExtInst %1 32 %32 
                                                      OpStore %28 %33 
                                          f32 %34 = OpLoad %28 
                                        f32_3 %35 = OpCompositeConstruct %34 %34 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpFMul %35 %36 
                                                      OpStore %9 %37 
                                        f32_3 %39 = OpLoad %11 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_4* %43 = OpAccessChain %20 %41 
                                        f32_4 %44 = OpLoad %43 
                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                                        f32_3 %46 = OpFAdd %40 %45 
                                                      OpStore %38 %46 
                                        f32_3 %47 = OpLoad %38 
                                        f32_3 %48 = OpLoad %38 
                                          f32 %49 = OpDot %47 %48 
                                                      OpStore %28 %49 
                                          f32 %50 = OpLoad %28 
                                          f32 %51 = OpExtInst %1 32 %50 
                                                      OpStore %28 %51 
                                        f32_3 %53 = OpLoad %38 
                                          f32 %54 = OpLoad %28 
                                        f32_3 %55 = OpCompositeConstruct %54 %54 %54 
                                        f32_3 %56 = OpFMul %53 %55 
                                        f32_3 %57 = OpLoad %9 
                                        f32_3 %58 = OpFAdd %56 %57 
                                                      OpStore %52 %58 
                                          f32 %59 = OpLoad %28 
                                        f32_3 %60 = OpCompositeConstruct %59 %59 %59 
                                        f32_3 %61 = OpLoad %38 
                                        f32_3 %62 = OpFMul %60 %61 
                                                      OpStore %38 %62 
                                        f32_3 %63 = OpLoad %52 
                                        f32_3 %64 = OpLoad %52 
                                          f32 %65 = OpDot %63 %64 
                                                      OpStore %28 %65 
                                          f32 %66 = OpLoad %28 
                                          f32 %68 = OpExtInst %1 40 %66 %67 
                                                      OpStore %28 %68 
                                          f32 %69 = OpLoad %28 
                                          f32 %70 = OpExtInst %1 32 %69 
                                                      OpStore %28 %70 
                                          f32 %71 = OpLoad %28 
                                        f32_3 %72 = OpCompositeConstruct %71 %71 %71 
                                        f32_3 %73 = OpLoad %52 
                                        f32_3 %74 = OpFMul %72 %73 
                                                      OpStore %52 %74 
                                        f32_3 %75 = OpLoad %38 
                                        f32_3 %76 = OpLoad %52 
                                          f32 %77 = OpDot %75 %76 
                                                      OpStore %28 %77 
                                          f32 %78 = OpLoad %28 
                                          f32 %81 = OpExtInst %1 43 %78 %79 %80 
                                                      OpStore %28 %81 
                                          f32 %82 = OpLoad %28 
                                          f32 %83 = OpFNegate %82 
                                          f32 %84 = OpFAdd %83 %80 
                                                      OpStore %28 %84 
                                          f32 %86 = OpLoad %28 
                                          f32 %87 = OpLoad %28 
                                          f32 %88 = OpFMul %86 %87 
                                                      OpStore %85 %88 
                                          f32 %89 = OpLoad %85 
                                          f32 %90 = OpLoad %85 
                                          f32 %91 = OpFMul %89 %90 
                                                      OpStore %85 %91 
                                          f32 %92 = OpLoad %28 
                                          f32 %93 = OpLoad %85 
                                          f32 %94 = OpFMul %92 %93 
                                                      OpStore %28 %94 
                                          f32 %95 = OpLoad %28 
                                          f32 %97 = OpFMul %95 %96 
                                          f32 %99 = OpFAdd %97 %98 
                                                      OpStore %28 %99 
                                       f32_3 %101 = OpLoad %100 
                                       f32_3 %102 = OpLoad %100 
                                         f32 %103 = OpDot %101 %102 
                                                      OpStore %85 %103 
                                         f32 %104 = OpLoad %85 
                                         f32 %105 = OpExtInst %1 32 %104 
                                                      OpStore %85 %105 
                                         f32 %106 = OpLoad %85 
                                       f32_3 %107 = OpCompositeConstruct %106 %106 %106 
                                       f32_3 %108 = OpLoad %100 
                                       f32_3 %109 = OpFMul %107 %108 
                                                      OpStore %52 %109 
                                       f32_3 %110 = OpLoad %52 
                                       f32_3 %111 = OpLoad %9 
                                         f32 %112 = OpDot %110 %111 
                                Private f32* %114 = OpAccessChain %9 %113 
                                                      OpStore %114 %112 
                                       f32_3 %116 = OpLoad %52 
                                       f32_3 %117 = OpLoad %38 
                                         f32 %118 = OpDot %116 %117 
                                                      OpStore %115 %118 
                                         f32 %119 = OpLoad %115 
                                         f32 %120 = OpExtInst %1 43 %119 %79 %80 
                                                      OpStore %115 %120 
                                Private f32* %122 = OpAccessChain %9 %113 
                                         f32 %123 = OpLoad %122 
                                         f32 %124 = OpExtInst %1 4 %123 
                                         f32 %125 = OpLoad %115 
                                         f32 %126 = OpFAdd %124 %125 
                                                      OpStore %121 %126 
                                Private f32* %127 = OpAccessChain %9 %113 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFNegate %128 
                                         f32 %130 = OpFAdd %129 %80 
                                Private f32* %131 = OpAccessChain %9 %113 
                                                      OpStore %131 %130 
                                Private f32* %132 = OpAccessChain %9 %113 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpExtInst %1 30 %133 
                                Private f32* %135 = OpAccessChain %9 %113 
                                                      OpStore %135 %134 
                                Private f32* %136 = OpAccessChain %9 %113 
                                         f32 %137 = OpLoad %136 
                                Uniform f32* %140 = OpAccessChain %20 %138 
                                         f32 %141 = OpLoad %140 
                                         f32 %142 = OpFMul %137 %141 
                                Private f32* %143 = OpAccessChain %9 %113 
                                                      OpStore %143 %142 
                                Private f32* %144 = OpAccessChain %9 %113 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpExtInst %1 29 %145 
                                Private f32* %147 = OpAccessChain %9 %113 
                                                      OpStore %147 %146 
                                Uniform f32* %149 = OpAccessChain %20 %148 
                                         f32 %150 = OpLoad %149 
                                Private f32* %151 = OpAccessChain %9 %113 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %150 %152 
                                Uniform f32* %155 = OpAccessChain %20 %154 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFAdd %153 %156 
                                Private f32* %158 = OpAccessChain %9 %113 
                                                      OpStore %158 %157 
                                         f32 %159 = OpLoad %121 
                                         f32 %161 = OpFAdd %159 %160 
                                                      OpStore %121 %161 
                                         f32 %163 = OpLoad %121 
                                         f32 %164 = OpFDiv %162 %163 
                                                      OpStore %121 %164 
                                         f32 %165 = OpLoad %115 
                                         f32 %166 = OpLoad %121 
                                         f32 %167 = OpFMul %165 %166 
                                                      OpStore %115 %167 
                                         f32 %168 = OpLoad %115 
                                         f32 %170 = OpFMul %168 %169 
                                                      OpStore %115 %170 
                                       f32_3 %171 = OpLoad %11 
                                       f32_3 %172 = OpVectorShuffle %171 %171 1 1 1 
                              Uniform f32_4* %174 = OpAccessChain %20 %173 %41 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpFMul %172 %176 
                                                      OpStore %38 %177 
                              Uniform f32_4* %178 = OpAccessChain %20 %173 %22 
                                       f32_4 %179 = OpLoad %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpLoad %11 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 0 0 
                                       f32_3 %183 = OpFMul %180 %182 
                                       f32_3 %184 = OpLoad %38 
                                       f32_3 %185 = OpFAdd %183 %184 
                                                      OpStore %38 %185 
                              Uniform f32_4* %187 = OpAccessChain %20 %173 %186 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpLoad %11 
                                       f32_3 %191 = OpVectorShuffle %190 %190 2 2 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_3 %193 = OpLoad %38 
                                       f32_3 %194 = OpFAdd %192 %193 
                                                      OpStore %38 %194 
                                       f32_3 %195 = OpLoad %38 
                              Uniform f32_4* %196 = OpAccessChain %20 %173 %173 
                                       f32_4 %197 = OpLoad %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFAdd %195 %198 
                                                      OpStore %38 %199 
                                       f32_3 %200 = OpLoad %38 
                                       f32_3 %201 = OpLoad %38 
                                         f32 %202 = OpDot %200 %201 
                                                      OpStore %121 %202 
                         read_only Texture2D %206 = OpLoad %205 
                                     sampler %210 = OpLoad %209 
                  read_only Texture2DSampled %212 = OpSampledImage %206 %210 
                                         f32 %213 = OpLoad %121 
                                       f32_2 %215 = OpCompositeConstruct %213 %213 
                                       f32_4 %216 = OpImageSampleImplicitLod %212 %215 
                                         f32 %217 = OpCompositeExtract %216 0 
                                                      OpStore %121 %217 
                                         f32 %218 = OpLoad %121 
                                       f32_3 %219 = OpCompositeConstruct %218 %218 %218 
                              Uniform f32_4* %220 = OpAccessChain %20 %186 
                                       f32_4 %221 = OpLoad %220 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_3 %223 = OpFMul %219 %222 
                                                      OpStore %38 %223 
                                         f32 %224 = OpLoad %115 
                                       f32_3 %225 = OpCompositeConstruct %224 %224 %224 
                                       f32_3 %226 = OpLoad %38 
                                       f32_3 %227 = OpFMul %225 %226 
                                                      OpStore %38 %227 
                                         f32 %230 = OpLoad %28 
                                       f32_3 %231 = OpCompositeConstruct %230 %230 %230 
                                       f32_3 %232 = OpLoad %38 
                                       f32_3 %233 = OpFMul %231 %232 
                                       f32_4 %234 = OpLoad %229 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 6 3 
                                                      OpStore %229 %235 
                                  Input f32* %238 = OpAccessChain %100 %236 
                                         f32 %239 = OpLoad %238 
                                         f32 %240 = OpFNegate %239 
                                Uniform f32* %242 = OpAccessChain %20 %241 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFAdd %240 %243 
                                                      OpStore %115 %244 
                                         f32 %245 = OpLoad %115 
                                         f32 %246 = OpExtInst %1 4 %245 
                                Uniform f32* %247 = OpAccessChain %20 %241 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFNegate %248 
                                         f32 %250 = OpFAdd %246 %249 
                                                      OpStore %115 %250 
                                         f32 %251 = OpLoad %115 
                                         f32 %252 = OpExtInst %1 43 %251 %79 %80 
                                                      OpStore %115 %252 
                                         f32 %253 = OpLoad %115 
                                         f32 %254 = OpFNegate %253 
                                         f32 %255 = OpFAdd %254 %80 
                                                      OpStore %115 %255 
                                         f32 %256 = OpLoad %115 
                                Private f32* %257 = OpAccessChain %9 %113 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFMul %256 %258 
                                Private f32* %260 = OpAccessChain %9 %113 
                                                      OpStore %260 %259 
                                Private f32* %261 = OpAccessChain %9 %113 
                                         f32 %262 = OpLoad %261 
                                Uniform f32* %264 = OpAccessChain %20 %263 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFMul %262 %265 
                                 Output f32* %269 = OpAccessChain %229 %267 
                                                      OpStore %269 %266 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 387
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationControl %4 "main" %23 %25 %30 %37 %39 %47 %51 %58 %60 %65 %67 %72 %74 %79 %81 %86 %88 %219 %371 
                                                      OpExecutionMode %4 OutputVertices 4 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %25 BuiltIn WorkgroupSize 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %37 Location 37 
                                                      OpDecorate %39 Location 39 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %51 Location 51 
                                                      OpDecorate %58 Location 58 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate %65 Location 65 
                                                      OpDecorate vs_TEXCOORD1 Location 67 
                                                      OpDecorate %72 Location 72 
                                                      OpDecorate vs_TEXCOORD2 Location 74 
                                                      OpDecorate %79 Location 79 
                                                      OpDecorate vs_TEXCOORD3 Location 81 
                                                      OpDecorate %86 Location 86 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %96 ArrayStride 96 
                                                      OpMemberDecorate %97 0 Offset 97 
                                                      OpMemberDecorate %97 1 Offset 97 
                                                      OpMemberDecorate %97 2 Offset 97 
                                                      OpMemberDecorate %97 3 Offset 97 
                                                      OpDecorate %97 Block 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate %219 Patch 
                                                      OpDecorate %219 BuiltIn 219 
                                                      OpDecorate %371 Patch 
                                                      OpDecorate %371 BuiltIn 371 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %8 = OpTypeInt 32 1 
                                               %9 = OpTypePointer Function %8 
                                              %10 = OpTypeFunction %2 %9 
                                              %17 = OpTypeFloat 32 
                                              %18 = OpTypeVector %17 4 
                                              %19 = OpTypeInt 32 0 
                                          u32 %20 = OpConstant 3 
                                              %21 = OpTypeArray %18 %20 
                                              %22 = OpTypePointer Output %21 
                             Output f32_4[3]* %23 = OpVariable Output 
                                              %24 = OpTypePointer Input %8 
                                   Input i32* %25 = OpVariable Input 
                                          u32 %27 = OpConstant 32 
                                              %28 = OpTypeArray %18 %27 
                                              %29 = OpTypePointer Input %28 
                             Input f32_4[32]* %30 = OpVariable Input 
                                              %32 = OpTypePointer Input %18 
                                              %35 = OpTypePointer Output %18 
                             Output f32_4[3]* %37 = OpVariable Output 
                             Input f32_4[32]* %39 = OpVariable Input 
                                              %44 = OpTypeVector %17 3 
                                              %45 = OpTypeArray %44 %20 
                                              %46 = OpTypePointer Output %45 
                             Output f32_3[3]* %47 = OpVariable Output 
                                              %49 = OpTypeArray %44 %27 
                                              %50 = OpTypePointer Input %49 
                             Input f32_3[32]* %51 = OpVariable Input 
                                              %53 = OpTypePointer Input %44 
                                              %56 = OpTypePointer Output %44 
                             Output f32_4[3]* %58 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD0 = OpVariable Input 
                             Output f32_4[3]* %65 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD1 = OpVariable Input 
                             Output f32_4[3]* %72 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD2 = OpVariable Input 
                             Output f32_4[3]* %79 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD3 = OpVariable Input 
                             Output f32_4[3]* %86 = OpVariable Output 
                             Input f32_4[32]* %88 = OpVariable Input 
                                              %93 = OpTypePointer Private %44 
                               Private f32_3* %94 = OpVariable Private 
                                          u32 %95 = OpConstant 4 
                                              %96 = OpTypeArray %18 %95 
                                              %97 = OpTypeStruct %44 %18 %96 %17 
                                              %98 = OpTypePointer Uniform %97 
Uniform struct {f32_3; f32_4; f32_4[4]; f32;}* %99 = OpVariable Uniform 
                                         i32 %100 = OpConstant 2 
                                         i32 %101 = OpConstant 1 
                                             %102 = OpTypePointer Uniform %18 
                                         i32 %110 = OpConstant 0 
                                         i32 %129 = OpConstant 3 
                              Private f32_3* %139 = OpVariable Private 
                              Private f32_3* %174 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                             %182 = OpTypePointer Uniform %44 
                                             %187 = OpTypePointer Private %17 
                                Private f32* %188 = OpVariable Private 
                                             %195 = OpTypePointer Uniform %17 
                                Private f32* %203 = OpVariable Private 
                                         u32 %210 = OpConstant 1 
                                             %217 = OpTypeArray %17 %95 
                                             %218 = OpTypePointer Output %217 
                              Output f32[4]* %219 = OpVariable Output 
                                         f32 %221 = OpConstant 3.674022E-40 
                                             %223 = OpTypePointer Output %17 
                              Private f32_3* %259 = OpVariable Private 
                                         u32 %285 = OpConstant 0 
                              Private f32_3* %325 = OpVariable Private 
                                         u32 %368 = OpConstant 2 
                                             %369 = OpTypeArray %17 %368 
                                             %370 = OpTypePointer Output %369 
                              Output f32[2]* %371 = OpVariable Output 
                                         f32 %374 = OpConstant 3.674022E-40 
                                             %379 = OpTypeBool 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %383 = OpVariable Function 
                               Function i32* %385 = OpVariable Function 
                                        void %377 = OpFunctionCall %6 
                                                      OpControlBarrier 368 95 285 
                                         i32 %378 = OpLoad %25 
                                        bool %380 = OpIEqual %378 %110 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %380 %381 %382 
                                             %381 = OpLabel 
                                                      OpStore %383 %110 
                                        void %384 = OpFunctionCall %12 %383 
                                                      OpStore %385 %110 
                                        void %386 = OpFunctionCall %15 %385 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
                                          void %6 = OpFunction None %3 
                                               %7 = OpLabel 
                                          i32 %26 = OpLoad %25 
                                          i32 %31 = OpLoad %25 
                                 Input f32_4* %33 = OpAccessChain %30 %31 
                                        f32_4 %34 = OpLoad %33 
                                Output f32_4* %36 = OpAccessChain %23 %26 
                                                      OpStore %36 %34 
                                          i32 %38 = OpLoad %25 
                                          i32 %40 = OpLoad %25 
                                 Input f32_4* %41 = OpAccessChain %39 %40 
                                        f32_4 %42 = OpLoad %41 
                                Output f32_4* %43 = OpAccessChain %37 %38 
                                                      OpStore %43 %42 
                                          i32 %48 = OpLoad %25 
                                          i32 %52 = OpLoad %25 
                                 Input f32_3* %54 = OpAccessChain %51 %52 
                                        f32_3 %55 = OpLoad %54 
                                Output f32_3* %57 = OpAccessChain %47 %48 
                                                      OpStore %57 %55 
                                          i32 %59 = OpLoad %25 
                                          i32 %61 = OpLoad %25 
                                 Input f32_4* %62 = OpAccessChain vs_TEXCOORD0 %61 
                                        f32_4 %63 = OpLoad %62 
                                Output f32_4* %64 = OpAccessChain %58 %59 
                                                      OpStore %64 %63 
                                          i32 %66 = OpLoad %25 
                                          i32 %68 = OpLoad %25 
                                 Input f32_4* %69 = OpAccessChain vs_TEXCOORD1 %68 
                                        f32_4 %70 = OpLoad %69 
                                Output f32_4* %71 = OpAccessChain %65 %66 
                                                      OpStore %71 %70 
                                          i32 %73 = OpLoad %25 
                                          i32 %75 = OpLoad %25 
                                 Input f32_4* %76 = OpAccessChain vs_TEXCOORD2 %75 
                                        f32_4 %77 = OpLoad %76 
                                Output f32_4* %78 = OpAccessChain %72 %73 
                                                      OpStore %78 %77 
                                          i32 %80 = OpLoad %25 
                                          i32 %82 = OpLoad %25 
                                 Input f32_4* %83 = OpAccessChain vs_TEXCOORD3 %82 
                                        f32_4 %84 = OpLoad %83 
                                Output f32_4* %85 = OpAccessChain %79 %80 
                                                      OpStore %85 %84 
                                          i32 %87 = OpLoad %25 
                                          i32 %89 = OpLoad %25 
                                 Input f32_4* %90 = OpAccessChain %88 %89 
                                        f32_4 %91 = OpLoad %90 
                                Output f32_4* %92 = OpAccessChain %86 %87 
                                                      OpStore %92 %91 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %12 = OpFunction None %10 
                                Function i32* %11 = OpFunctionParameter 
                                              %13 = OpLabel 
                              Uniform f32_4* %103 = OpAccessChain %99 %100 %101 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                Input f32_4* %106 = OpAccessChain %30 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 1 1 1 
                                       f32_3 %109 = OpFMul %105 %108 
                                                      OpStore %94 %109 
                              Uniform f32_4* %111 = OpAccessChain %99 %100 %110 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                Input f32_4* %114 = OpAccessChain %30 %101 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %113 %116 
                                       f32_3 %118 = OpLoad %94 
                                       f32_3 %119 = OpFAdd %117 %118 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %99 %100 %100 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                Input f32_4* %123 = OpAccessChain %30 %101 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 2 2 2 
                                       f32_3 %126 = OpFMul %122 %125 
                                       f32_3 %127 = OpLoad %94 
                                       f32_3 %128 = OpFAdd %126 %127 
                                                      OpStore %94 %128 
                              Uniform f32_4* %130 = OpAccessChain %99 %100 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                Input f32_4* %133 = OpAccessChain %30 %101 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 3 3 3 
                                       f32_3 %136 = OpFMul %132 %135 
                                       f32_3 %137 = OpLoad %94 
                                       f32_3 %138 = OpFAdd %136 %137 
                                                      OpStore %94 %138 
                              Uniform f32_4* %140 = OpAccessChain %99 %100 %101 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                Input f32_4* %143 = OpAccessChain %30 %100 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 1 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                                      OpStore %139 %146 
                              Uniform f32_4* %147 = OpAccessChain %99 %100 %110 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                Input f32_4* %150 = OpAccessChain %30 %100 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 0 0 
                                       f32_3 %153 = OpFMul %149 %152 
                                       f32_3 %154 = OpLoad %139 
                                       f32_3 %155 = OpFAdd %153 %154 
                                                      OpStore %139 %155 
                              Uniform f32_4* %156 = OpAccessChain %99 %100 %100 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                Input f32_4* %159 = OpAccessChain %30 %100 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 2 2 2 
                                       f32_3 %162 = OpFMul %158 %161 
                                       f32_3 %163 = OpLoad %139 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %139 %164 
                              Uniform f32_4* %165 = OpAccessChain %99 %100 %129 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                Input f32_4* %168 = OpAccessChain %30 %100 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 3 3 3 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_3 %172 = OpLoad %139 
                                       f32_3 %173 = OpFAdd %171 %172 
                                                      OpStore %139 %173 
                                       f32_3 %175 = OpLoad %94 
                                       f32_3 %176 = OpLoad %139 
                                       f32_3 %177 = OpFAdd %175 %176 
                                                      OpStore %174 %177 
                                       f32_3 %178 = OpLoad %174 
                                       f32_3 %181 = OpFMul %178 %180 
                              Uniform f32_3* %183 = OpAccessChain %99 %110 
                                       f32_3 %184 = OpLoad %183 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpFAdd %181 %185 
                                                      OpStore %174 %186 
                                       f32_3 %189 = OpLoad %174 
                                       f32_3 %190 = OpLoad %174 
                                         f32 %191 = OpDot %189 %190 
                                                      OpStore %188 %191 
                                         f32 %192 = OpLoad %188 
                                         f32 %193 = OpExtInst %1 31 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                Uniform f32* %196 = OpAccessChain %99 %129 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %194 %197 
                                                      OpStore %188 %198 
                                       f32_3 %199 = OpLoad %94 
                                       f32_3 %200 = OpLoad %139 
                                       f32_3 %201 = OpFNegate %200 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore %174 %202 
                                       f32_3 %204 = OpLoad %174 
                                       f32_3 %205 = OpLoad %174 
                                         f32 %206 = OpDot %204 %205 
                                                      OpStore %203 %206 
                                         f32 %207 = OpLoad %203 
                                         f32 %208 = OpExtInst %1 31 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                Uniform f32* %211 = OpAccessChain %99 %101 %210 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %209 %212 
                                                      OpStore %203 %213 
                                         f32 %214 = OpLoad %203 
                                         f32 %215 = OpLoad %188 
                                         f32 %216 = OpFDiv %214 %215 
                                                      OpStore %188 %216 
                                         f32 %220 = OpLoad %188 
                                         f32 %222 = OpExtInst %1 40 %220 %221 
                                 Output f32* %224 = OpAccessChain %219 %110 
                                                      OpStore %224 %222 
                              Uniform f32_4* %225 = OpAccessChain %99 %100 %101 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                Input f32_4* %228 = OpAccessChain %30 %110 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 1 1 1 
                                       f32_3 %231 = OpFMul %227 %230 
                                                      OpStore %174 %231 
                              Uniform f32_4* %232 = OpAccessChain %99 %100 %110 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                Input f32_4* %235 = OpAccessChain %30 %110 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 0 0 
                                       f32_3 %238 = OpFMul %234 %237 
                                       f32_3 %239 = OpLoad %174 
                                       f32_3 %240 = OpFAdd %238 %239 
                                                      OpStore %174 %240 
                              Uniform f32_4* %241 = OpAccessChain %99 %100 %100 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                Input f32_4* %244 = OpAccessChain %30 %110 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 2 2 2 
                                       f32_3 %247 = OpFMul %243 %246 
                                       f32_3 %248 = OpLoad %174 
                                       f32_3 %249 = OpFAdd %247 %248 
                                                      OpStore %174 %249 
                              Uniform f32_4* %250 = OpAccessChain %99 %100 %129 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                Input f32_4* %253 = OpAccessChain %30 %110 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 3 3 3 
                                       f32_3 %256 = OpFMul %252 %255 
                                       f32_3 %257 = OpLoad %174 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore %174 %258 
                                       f32_3 %260 = OpLoad %139 
                                       f32_3 %261 = OpLoad %174 
                                       f32_3 %262 = OpFAdd %260 %261 
                                                      OpStore %259 %262 
                                       f32_3 %263 = OpLoad %139 
                                       f32_3 %264 = OpLoad %174 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_3 %266 = OpFAdd %263 %265 
                                                      OpStore %139 %266 
                                       f32_3 %267 = OpLoad %139 
                                       f32_3 %268 = OpLoad %139 
                                         f32 %269 = OpDot %267 %268 
                                                      OpStore %188 %269 
                                         f32 %270 = OpLoad %188 
                                         f32 %271 = OpExtInst %1 31 %270 
                                                      OpStore %188 %271 
                                         f32 %272 = OpLoad %188 
                                Uniform f32* %273 = OpAccessChain %99 %101 %210 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                                      OpStore %188 %275 
                                       f32_3 %276 = OpLoad %259 
                                       f32_3 %277 = OpFMul %276 %180 
                              Uniform f32_3* %278 = OpAccessChain %99 %110 
                                       f32_3 %279 = OpLoad %278 
                                       f32_3 %280 = OpFNegate %279 
                                       f32_3 %281 = OpFAdd %277 %280 
                                                      OpStore %139 %281 
                                       f32_3 %282 = OpLoad %139 
                                       f32_3 %283 = OpLoad %139 
                                         f32 %284 = OpDot %282 %283 
                                Private f32* %286 = OpAccessChain %139 %285 
                                                      OpStore %286 %284 
                                Private f32* %287 = OpAccessChain %139 %285 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 31 %288 
                                Private f32* %290 = OpAccessChain %139 %285 
                                                      OpStore %290 %289 
                                Private f32* %291 = OpAccessChain %139 %285 
                                         f32 %292 = OpLoad %291 
                                Uniform f32* %293 = OpAccessChain %99 %129 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFMul %292 %294 
                                Private f32* %296 = OpAccessChain %139 %285 
                                                      OpStore %296 %295 
                                         f32 %297 = OpLoad %188 
                                Private f32* %298 = OpAccessChain %139 %285 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFDiv %297 %299 
                                                      OpStore %188 %300 
                                         f32 %301 = OpLoad %188 
                                         f32 %302 = OpExtInst %1 40 %301 %221 
                                 Output f32* %303 = OpAccessChain %219 %101 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %94 
                                       f32_3 %305 = OpLoad %174 
                                       f32_3 %306 = OpFAdd %304 %305 
                                                      OpStore %139 %306 
                                       f32_3 %307 = OpLoad %94 
                                       f32_3 %308 = OpFNegate %307 
                                       f32_3 %309 = OpLoad %174 
                                       f32_3 %310 = OpFAdd %308 %309 
                                                      OpStore %94 %310 
                                       f32_3 %311 = OpLoad %94 
                                       f32_3 %312 = OpLoad %94 
                                         f32 %313 = OpDot %311 %312 
                                Private f32* %314 = OpAccessChain %94 %285 
                                                      OpStore %314 %313 
                                Private f32* %315 = OpAccessChain %94 %285 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpExtInst %1 31 %316 
                                Private f32* %318 = OpAccessChain %94 %285 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %94 %285 
                                         f32 %320 = OpLoad %319 
                                Uniform f32* %321 = OpAccessChain %99 %101 %210 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %320 %322 
                                Private f32* %324 = OpAccessChain %94 %285 
                                                      OpStore %324 %323 
                                       f32_3 %326 = OpLoad %139 
                                       f32_3 %327 = OpFMul %326 %180 
                              Uniform f32_3* %328 = OpAccessChain %99 %110 
                                       f32_3 %329 = OpLoad %328 
                                       f32_3 %330 = OpFNegate %329 
                                       f32_3 %331 = OpFAdd %327 %330 
                                                      OpStore %325 %331 
                                       f32_3 %332 = OpLoad %325 
                                       f32_3 %333 = OpLoad %325 
                                         f32 %334 = OpDot %332 %333 
                                Private f32* %335 = OpAccessChain %325 %285 
                                                      OpStore %335 %334 
                                Private f32* %336 = OpAccessChain %325 %285 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpExtInst %1 31 %337 
                                Private f32* %339 = OpAccessChain %325 %285 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %325 %285 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %99 %129 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFMul %341 %343 
                                Private f32* %345 = OpAccessChain %325 %285 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %94 %285 
                                         f32 %347 = OpLoad %346 
                                Private f32* %348 = OpAccessChain %325 %285 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFDiv %347 %349 
                                Private f32* %351 = OpAccessChain %94 %285 
                                                      OpStore %351 %350 
                                Private f32* %352 = OpAccessChain %94 %285 
                                         f32 %353 = OpLoad %352 
                                         f32 %354 = OpExtInst %1 40 %353 %221 
                                 Output f32* %355 = OpAccessChain %219 %100 
                                                      OpStore %355 %354 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %15 = OpFunction None %10 
                                Function i32* %14 = OpFunctionParameter 
                                              %16 = OpLabel 
                                 Output f32* %356 = OpAccessChain %219 %100 
                                         f32 %357 = OpLoad %356 
                                 Output f32* %358 = OpAccessChain %219 %100 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                Private f32* %361 = OpAccessChain %94 %285 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %94 %285 
                                         f32 %363 = OpLoad %362 
                                 Output f32* %364 = OpAccessChain %219 %100 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFAdd %363 %365 
                                Private f32* %367 = OpAccessChain %94 %285 
                                                      OpStore %367 %366 
                                Private f32* %372 = OpAccessChain %94 %285 
                                         f32 %373 = OpLoad %372 
                                         f32 %375 = OpFMul %373 %374 
                                 Output f32* %376 = OpAccessChain %371 %110 
                                                      OpStore %376 %375 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 395
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationEvaluation %4 "main" %12 %20 %139 %208 %236 %321 %331 %379 
                                                      OpExecutionMode %4 Triangles 
                                                      OpExecutionMode %4 SpacingFractionalOdd 
                                                      OpExecutionMode %4 VertexOrderCw 
                                                      OpDecorate %12 BuiltIn TessLevelInner 
                                                      OpDecorate %20 Location 20 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpMemberDecorate %61 5 Offset 61 
                                                      OpMemberDecorate %61 6 Offset 61 
                                                      OpMemberDecorate %61 7 Offset 61 
                                                      OpMemberDecorate %61 8 Offset 61 
                                                      OpMemberDecorate %61 9 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %97 DescriptorSet 97 
                                                      OpDecorate %97 Binding 97 
                                                      OpDecorate %101 DescriptorSet 101 
                                                      OpDecorate %101 Binding 101 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %113 DescriptorSet 113 
                                                      OpDecorate %113 Binding 113 
                                                      OpDecorate %139 Location 139 
                                                      OpDecorate %208 Location 208 
                                                      OpDecorate %236 Location 236 
                                                      OpMemberDecorate %319 0 BuiltIn 319 
                                                      OpMemberDecorate %319 1 BuiltIn 319 
                                                      OpMemberDecorate %319 2 BuiltIn 319 
                                                      OpDecorate %319 Block 
                                                      OpDecorate %331 Location 331 
                                                      OpDecorate %379 Location 379 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 32 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypePointer Input %18 
                             Input f32_4[32]* %20 = OpVariable Input 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Input %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %42 = OpConstant 2 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                              %60 = OpTypeArray %7 %56 
                                              %61 = OpTypeStruct %7 %57 %58 %59 %60 %6 %6 %7 %6 %6 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32; f32;}* %63 = OpVariable Uniform 
                                          i32 %64 = OpConstant 7 
                                              %65 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 5 
                                              %80 = OpTypePointer Uniform %6 
                                          i32 %83 = OpConstant 6 
                                              %93 = OpTypePointer Private %6 
                                 Private f32* %94 = OpVariable Private 
                                              %95 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %96 = OpTypePointer UniformConstant %95 
         UniformConstant read_only Texture2D* %97 = OpVariable UniformConstant 
                                              %99 = OpTypeSampler 
                                             %100 = OpTypePointer UniformConstant %99 
                    UniformConstant sampler* %101 = OpVariable UniformConstant 
                                             %103 = OpTypeSampledImage %95 
                                         f32 %107 = OpConstant 3.674022E-40 
                                         u32 %109 = OpConstant 0 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                    UniformConstant sampler* %113 = OpVariable UniformConstant 
                              Private f32_4* %134 = OpVariable Private 
                                             %137 = OpTypeArray %10 %17 
                                             %138 = OpTypePointer Input %137 
                            Input f32_3[32]* %139 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         u32 %179 = OpConstant 2 
                                         u32 %187 = OpConstant 1 
                                Private f32* %189 = OpVariable Private 
                                         i32 %202 = OpConstant 8 
                                             %207 = OpTypePointer Output %10 
                               Output f32_3* %208 = OpVariable Output 
                                         f32 %222 = OpConstant 3.674022E-40 
                            Input f32_4[32]* %236 = OpVariable Input 
                                         i32 %256 = OpConstant 9 
                                         i32 %294 = OpConstant 3 
                              Private f32_4* %298 = OpVariable Private 
                                             %318 = OpTypeArray %6 %187 
                                             %319 = OpTypeStruct %7 %6 %318 
                                             %320 = OpTypePointer Output %319 
        Output struct {f32_4; f32; f32[1];}* %321 = OpVariable Output 
                                             %329 = OpTypePointer Output %7 
                               Output f32_3* %331 = OpVariable Output 
                                         i32 %350 = OpConstant 4 
                               Output f32_3* %379 = OpVariable Output 
                                             %389 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 1 1 
                                 Input f32_4* %24 = OpAccessChain %20 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                                        f32_2 %27 = OpFMul %15 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                                 Input f32_4* %31 = OpAccessChain %20 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_3 %34 = OpLoad %12 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 0 
                                        f32_2 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                                        f32_2 %39 = OpFAdd %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                 Input f32_4* %43 = OpAccessChain %20 %42 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_3 %46 = OpLoad %12 
                                        f32_2 %47 = OpVectorShuffle %46 %46 2 2 
                                        f32_2 %48 = OpFMul %45 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                                        f32_2 %51 = OpFAdd %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               Uniform f32_4* %66 = OpAccessChain %63 %64 
                                        f32_4 %67 = OpLoad %66 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                        f32_2 %69 = OpFMul %55 %68 
                               Uniform f32_4* %70 = OpAccessChain %63 %64 
                                        f32_4 %71 = OpLoad %70 
                                        f32_2 %72 = OpVectorShuffle %71 %71 2 3 
                                        f32_2 %73 = OpFAdd %69 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %73 4 5 2 3 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %63 %30 
                                        f32_4 %77 = OpLoad %76 
                                        f32_2 %78 = OpVectorShuffle %77 %77 1 1 
                                 Uniform f32* %81 = OpAccessChain %63 %79 
                                          f32 %82 = OpLoad %81 
                                 Uniform f32* %84 = OpAccessChain %63 %83 
                                          f32 %85 = OpLoad %84 
                                        f32_2 %86 = OpCompositeConstruct %82 %85 
                                        f32_2 %87 = OpFMul %78 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_2 %90 = OpFAdd %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 2 3 
                                                      OpStore %9 %92 
                          read_only Texture2D %98 = OpLoad %97 
                                     sampler %102 = OpLoad %101 
                  read_only Texture2DSampled %104 = OpSampledImage %98 %102 
                                       f32_4 %105 = OpLoad %9 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %108 = OpImageSampleExplicitLod %104 %106 Lod %7 
                                         f32 %110 = OpCompositeExtract %108 0 
                                                      OpStore %94 %110 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %114 = OpLoad %113 
                  read_only Texture2DSampled %115 = OpSampledImage %112 %114 
                                       f32_4 %116 = OpLoad %9 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpImageSampleExplicitLod %115 %117 Lod %7 
                                         f32 %119 = OpCompositeExtract %118 0 
                                Private f32* %120 = OpAccessChain %9 %109 
                                                      OpStore %120 %119 
                                Private f32* %121 = OpAccessChain %9 %109 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpLoad %94 
                                         f32 %124 = OpFMul %122 %123 
                                Private f32* %125 = OpAccessChain %9 %109 
                                                      OpStore %125 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                              Uniform f32_4* %128 = OpAccessChain %63 %42 %22 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %127 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %9 %133 
                                       f32_3 %135 = OpLoad %12 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                                Input f32_3* %140 = OpAccessChain %139 %22 
                                       f32_3 %141 = OpLoad %140 
                                       f32_3 %142 = OpFMul %136 %141 
                                       f32_4 %143 = OpLoad %134 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %134 %144 
                                Input f32_3* %145 = OpAccessChain %139 %30 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpLoad %12 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 0 0 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %134 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %149 %151 
                                       f32_4 %153 = OpLoad %134 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %134 %154 
                                Input f32_3* %155 = OpAccessChain %139 %42 
                                       f32_3 %156 = OpLoad %155 
                                       f32_3 %157 = OpLoad %12 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %134 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %134 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %134 %164 
                                       f32_4 %166 = OpLoad %134 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                              Uniform f32_4* %168 = OpAccessChain %63 %42 %30 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %167 %170 
                                Private f32* %172 = OpAccessChain %165 %109 
                                                      OpStore %172 %171 
                                       f32_4 %173 = OpLoad %134 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                              Uniform f32_4* %175 = OpAccessChain %63 %42 %42 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %165 %179 
                                                      OpStore %180 %178 
                                       f32_4 %181 = OpLoad %134 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                              Uniform f32_4* %183 = OpAccessChain %63 %42 %22 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %182 %185 
                                Private f32* %188 = OpAccessChain %165 %187 
                                                      OpStore %188 %186 
                                       f32_4 %190 = OpLoad %165 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %165 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %191 %193 
                                                      OpStore %189 %194 
                                         f32 %195 = OpLoad %189 
                                         f32 %196 = OpExtInst %1 32 %195 
                                                      OpStore %189 %196 
                                Private f32* %197 = OpAccessChain %165 %187 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFNegate %198 
                                         f32 %200 = OpLoad %189 
                                         f32 %201 = OpFMul %199 %200 
                                Uniform f32* %203 = OpAccessChain %63 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFAdd %201 %204 
                                Private f32* %206 = OpAccessChain %134 %109 
                                                      OpStore %206 %205 
                                         f32 %209 = OpLoad %189 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_4 %211 = OpLoad %165 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFMul %210 %212 
                                                      OpStore %208 %213 
                                Private f32* %214 = OpAccessChain %134 %109 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpExtInst %1 4 %215 
                                Uniform f32* %217 = OpAccessChain %63 %202 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                         f32 %220 = OpFAdd %216 %219 
                                                      OpStore %189 %220 
                                         f32 %221 = OpLoad %189 
                                         f32 %223 = OpExtInst %1 43 %221 %107 %222 
                                                      OpStore %189 %223 
                                         f32 %224 = OpLoad %189 
                                         f32 %225 = OpFNegate %224 
                                         f32 %226 = OpFAdd %225 %222 
                                                      OpStore %189 %226 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                         f32 %229 = OpLoad %189 
                                       f32_3 %230 = OpCompositeConstruct %229 %229 %229 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_3 %234 = OpLoad %12 
                                       f32_4 %235 = OpVectorShuffle %234 %234 1 1 1 1 
                                Input f32_4* %237 = OpAccessChain %236 %22 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpFMul %235 %238 
                                                      OpStore %134 %239 
                                Input f32_4* %240 = OpAccessChain %236 %30 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpLoad %12 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpFMul %241 %243 
                                       f32_4 %245 = OpLoad %134 
                                       f32_4 %246 = OpFAdd %244 %245 
                                                      OpStore %134 %246 
                                Input f32_4* %247 = OpAccessChain %236 %42 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpLoad %12 
                                       f32_4 %250 = OpVectorShuffle %249 %249 2 2 2 2 
                                       f32_4 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %134 
                                       f32_4 %253 = OpFAdd %251 %252 
                                                      OpStore %134 %253 
                                       f32_4 %254 = OpLoad %9 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                Uniform f32* %257 = OpAccessChain %63 %256 
                                         f32 %258 = OpLoad %257 
                                Uniform f32* %259 = OpAccessChain %63 %256 
                                         f32 %260 = OpLoad %259 
                                Uniform f32* %261 = OpAccessChain %63 %256 
                                         f32 %262 = OpLoad %261 
                                       f32_3 %263 = OpCompositeConstruct %258 %260 %262 
                                         f32 %264 = OpCompositeExtract %263 0 
                                         f32 %265 = OpCompositeExtract %263 1 
                                         f32 %266 = OpCompositeExtract %263 2 
                                       f32_3 %267 = OpCompositeConstruct %264 %265 %266 
                                       f32_3 %268 = OpFMul %255 %267 
                                       f32_4 %269 = OpLoad %134 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %9 %273 
                                       f32_4 %274 = OpLoad %9 
                                       f32_4 %275 = OpVectorShuffle %274 %274 1 1 1 1 
                              Uniform f32_4* %276 = OpAccessChain %63 %22 %22 
                                       f32_4 %277 = OpLoad %276 
                                       f32_4 %278 = OpFMul %275 %277 
                                                      OpStore %165 %278 
                              Uniform f32_4* %279 = OpAccessChain %63 %22 %30 
                                       f32_4 %280 = OpLoad %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %281 0 0 0 0 
                                       f32_4 %283 = OpFMul %280 %282 
                                       f32_4 %284 = OpLoad %165 
                                       f32_4 %285 = OpFAdd %283 %284 
                                                      OpStore %165 %285 
                              Uniform f32_4* %286 = OpAccessChain %63 %22 %42 
                                       f32_4 %287 = OpLoad %286 
                                       f32_4 %288 = OpLoad %9 
                                       f32_4 %289 = OpVectorShuffle %288 %288 2 2 2 2 
                                       f32_4 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %165 
                                       f32_4 %292 = OpFAdd %290 %291 
                                                      OpStore %9 %292 
                                       f32_4 %293 = OpLoad %9 
                              Uniform f32_4* %295 = OpAccessChain %63 %22 %294 
                                       f32_4 %296 = OpLoad %295 
                                       f32_4 %297 = OpFAdd %293 %296 
                                                      OpStore %165 %297 
                                       f32_4 %299 = OpLoad %165 
                                       f32_4 %300 = OpVectorShuffle %299 %299 1 1 1 1 
                              Uniform f32_4* %301 = OpAccessChain %63 %294 %22 
                                       f32_4 %302 = OpLoad %301 
                                       f32_4 %303 = OpFMul %300 %302 
                                                      OpStore %298 %303 
                              Uniform f32_4* %304 = OpAccessChain %63 %294 %30 
                                       f32_4 %305 = OpLoad %304 
                                       f32_4 %306 = OpLoad %165 
                                       f32_4 %307 = OpVectorShuffle %306 %306 0 0 0 0 
                                       f32_4 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %298 
                                       f32_4 %310 = OpFAdd %308 %309 
                                                      OpStore %298 %310 
                              Uniform f32_4* %311 = OpAccessChain %63 %294 %42 
                                       f32_4 %312 = OpLoad %311 
                                       f32_4 %313 = OpLoad %165 
                                       f32_4 %314 = OpVectorShuffle %313 %313 2 2 2 2 
                                       f32_4 %315 = OpFMul %312 %314 
                                       f32_4 %316 = OpLoad %298 
                                       f32_4 %317 = OpFAdd %315 %316 
                                                      OpStore %298 %317 
                              Uniform f32_4* %322 = OpAccessChain %63 %294 %294 
                                       f32_4 %323 = OpLoad %322 
                                       f32_4 %324 = OpLoad %165 
                                       f32_4 %325 = OpVectorShuffle %324 %324 3 3 3 3 
                                       f32_4 %326 = OpFMul %323 %325 
                                       f32_4 %327 = OpLoad %298 
                                       f32_4 %328 = OpFAdd %326 %327 
                               Output f32_4* %330 = OpAccessChain %321 %30 
                                                      OpStore %330 %328 
                              Uniform f32_4* %332 = OpAccessChain %63 %22 %294 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_4 %335 = OpLoad %134 
                                       f32_3 %336 = OpVectorShuffle %335 %335 3 3 3 
                                       f32_3 %337 = OpFMul %334 %336 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_3 %340 = OpFAdd %337 %339 
                                                      OpStore %331 %340 
                              Uniform f32_4* %341 = OpAccessChain %63 %22 %294 
                                       f32_4 %342 = OpLoad %341 
                                       f32_4 %343 = OpLoad %134 
                                       f32_4 %344 = OpVectorShuffle %343 %343 3 3 3 3 
                                       f32_4 %345 = OpFMul %342 %344 
                                       f32_4 %346 = OpLoad %9 
                                       f32_4 %347 = OpFAdd %345 %346 
                                                      OpStore %9 %347 
                                       f32_4 %348 = OpLoad %9 
                                       f32_3 %349 = OpVectorShuffle %348 %348 1 1 1 
                              Uniform f32_4* %351 = OpAccessChain %63 %350 %22 
                                       f32_4 %352 = OpLoad %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                       f32_3 %354 = OpFMul %349 %353 
                                       f32_4 %355 = OpLoad %134 
                                       f32_4 %356 = OpVectorShuffle %355 %354 4 5 6 3 
                                                      OpStore %134 %356 
                              Uniform f32_4* %357 = OpAccessChain %63 %350 %30 
                                       f32_4 %358 = OpLoad %357 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_4 %360 = OpLoad %9 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 0 0 
                                       f32_3 %362 = OpFMul %359 %361 
                                       f32_4 %363 = OpLoad %134 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_3 %365 = OpFAdd %362 %364 
                                       f32_4 %366 = OpLoad %134 
                                       f32_4 %367 = OpVectorShuffle %366 %365 4 5 6 3 
                                                      OpStore %134 %367 
                              Uniform f32_4* %368 = OpAccessChain %63 %350 %42 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_4 %371 = OpLoad %9 
                                       f32_3 %372 = OpVectorShuffle %371 %371 2 2 2 
                                       f32_3 %373 = OpFMul %370 %372 
                                       f32_4 %374 = OpLoad %134 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpFAdd %373 %375 
                                       f32_4 %377 = OpLoad %9 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 6 3 
                                                      OpStore %9 %378 
                              Uniform f32_4* %380 = OpAccessChain %63 %350 %294 
                                       f32_4 %381 = OpLoad %380 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_4 %383 = OpLoad %9 
                                       f32_3 %384 = OpVectorShuffle %383 %383 3 3 3 
                                       f32_3 %385 = OpFMul %382 %384 
                                       f32_4 %386 = OpLoad %9 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                                       f32_3 %388 = OpFAdd %385 %387 
                                                      OpStore %379 %388 
                                 Output f32* %390 = OpAccessChain %321 %30 %187 
                                         f32 %391 = OpLoad %390 
                                         f32 %392 = OpFNegate %391 
                                 Output f32* %393 = OpAccessChain %321 %30 %187 
                                                      OpStore %393 %392 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 410
#extension GL_ARB_explicit_attrib_location : require

in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
in  vec4 in_TEXCOORD3;
in  vec4 in_COLOR0;
layout(location = 0) out vec4 vs_INTERNALTESSPOS0;
layout(location = 1) out vec4 vs_TANGENT0;
layout(location = 2) out vec3 vs_NORMAL0;
layout(location = 3) out vec4 vs_TEXCOORD0;
layout(location = 4) out vec4 vs_TEXCOORD1;
layout(location = 5) out vec4 vs_TEXCOORD2;
layout(location = 6) out vec4 vs_TEXCOORD3;
layout(location = 7) out vec4 vs_COLOR0;
void main()
{
    vs_INTERNALTESSPOS0 = in_POSITION0;
    vs_TANGENT0 = in_TANGENT0;
    vs_NORMAL0.xyz = in_NORMAL0.xyz;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD3;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	float _Y_Mask;
uniform 	float _FresnelBias;
uniform 	float _FresnelScale;
uniform 	float _FresnelPower;
uniform 	float _Alpha;
layout(location = 0) in  vec3 ds_TEXCOORD0;
layout(location = 1) in  vec3 ds_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
float u_xlat2;
float u_xlat4;
float u_xlat6;
void main()
{
    u_xlat0.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat6) + _WorldSpaceLightPos0.xyz;
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 0.00100000005);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat1.x = u_xlat6 * u_xlat6;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat6 = u_xlat6 * 0.959999979 + 0.0399999991;
    u_xlat1.x = dot(ds_TEXCOORD0.xyz, ds_TEXCOORD0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * ds_TEXCOORD0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat4 = abs(u_xlat0.x) + u_xlat2;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = _FresnelScale * u_xlat0.x + _FresnelBias;
    u_xlat4 = u_xlat4 + 9.99999975e-06;
    u_xlat4 = 0.5 / u_xlat4;
    u_xlat4 = u_xlat4 * 0.999999881;
    u_xlat2 = u_xlat2 * u_xlat4;
    u_xlat1.xyz = vec3(u_xlat2) * _LightColor0.xyz;
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2 = (-ds_TEXCOORD0.y) + _Y_Mask;
    u_xlat2 = abs(u_xlat2) + (-_Y_Mask);
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = (-u_xlat2) + 1.0;
    u_xlat0.x = u_xlat2 * u_xlat0.x;
    SV_Target0.w = u_xlat0.x * _Alpha;
    return;
}

#endif
#ifdef HULL
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(vertices=3) out;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	float _EdgeLength;
layout(location = 0) in vec4 vs_INTERNALTESSPOS0[];
layout(location = 0) out vec4 hs_INTERNALTESSPOS0[];
layout(location = 1) in vec4 vs_TANGENT0[];
layout(location = 1) out vec4 hs_TANGENT0[];
layout(location = 2) in vec3 vs_NORMAL0[];
layout(location = 2) out vec3 hs_NORMAL0[];
layout(location = 3) in vec4 vs_TEXCOORD0[];
layout(location = 3) out vec4 hs_TEXCOORD0[];
layout(location = 4) in vec4 vs_TEXCOORD1[];
layout(location = 4) out vec4 hs_TEXCOORD1[];
layout(location = 5) in vec4 vs_TEXCOORD2[];
layout(location = 5) out vec4 hs_TEXCOORD2[];
layout(location = 6) in vec4 vs_TEXCOORD3[];
layout(location = 6) out vec4 hs_TEXCOORD3[];
layout(location = 7) in vec4 vs_COLOR0[];
layout(location = 7) out vec4 hs_COLOR0[];
void passthrough_ctrl_points()
{
    hs_INTERNALTESSPOS0[gl_InvocationID] = vs_INTERNALTESSPOS0[gl_InvocationID];
    hs_TANGENT0[gl_InvocationID] = vs_TANGENT0[gl_InvocationID];
    hs_NORMAL0[gl_InvocationID] = vs_NORMAL0[gl_InvocationID];
    hs_TEXCOORD0[gl_InvocationID] = vs_TEXCOORD0[gl_InvocationID];
    hs_TEXCOORD1[gl_InvocationID] = vs_TEXCOORD1[gl_InvocationID];
    hs_TEXCOORD2[gl_InvocationID] = vs_TEXCOORD2[gl_InvocationID];
    hs_TEXCOORD3[gl_InvocationID] = vs_TEXCOORD3[gl_InvocationID];
    hs_COLOR0[gl_InvocationID] = vs_COLOR0[gl_InvocationID];
}
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
float u_xlat13;
void fork_phase2(int phaseInstanceID)
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[1].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[1].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[2].www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _EdgeLength;
    u_xlat2.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _ScreenParams.y;
    u_xlat12 = u_xlat13 / u_xlat12;
    gl_TessLevelOuter[0] = max(u_xlat12, 1.0);
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[0].www + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _ScreenParams.y;
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _EdgeLength;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    gl_TessLevelOuter[1] = max(u_xlat12, 1.0);
    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _ScreenParams.y;
    u_xlat4.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _EdgeLength;
    u_xlat0.x = u_xlat0.x / u_xlat4.x;
    gl_TessLevelOuter[2] = max(u_xlat0.x, 1.0);
}
void join_phase3(int phaseInstanceID)
{
    u_xlat0.x = gl_TessLevelOuter[2] + gl_TessLevelOuter[2];
    u_xlat0.x = u_xlat0.x + gl_TessLevelOuter[2];
    gl_TessLevelInner[0] = u_xlat0.x * 0.333333343;
}
void main()
{
    passthrough_ctrl_points();
    barrier();
    if (gl_InvocationID == 0)
    {
        fork_phase2(0);
        join_phase3(0);
    }
}

#endif
#ifdef DOMAIN
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(ccw) in;
layout(fractional_odd_spacing) in;
layout(triangles) in;
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _u;
uniform 	float _v;
uniform 	vec4 _Flamenoise_ST;
uniform 	float _Y_Mask;
uniform 	float _FlameHeight;
UNITY_LOCATION(0) uniform  sampler2D _FlameWave;
UNITY_LOCATION(1) uniform  sampler2D _Flamenoise;
layout(location = 0) in  vec4 hs_INTERNALTESSPOS0 [];
layout(location = 2) in  vec3 hs_NORMAL0 [];
layout(location = 3) in  vec4 hs_TEXCOORD0 [];
layout(location = 0) out vec3 ds_TEXCOORD0;
layout(location = 1) out vec3 ds_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat6;
float u_xlat9;
void main()
{
    u_xlat0.xy = gl_TessCoord.yy * hs_TEXCOORD0[1].xy;
    u_xlat0.xy = hs_TEXCOORD0[0].xy * gl_TessCoord.xx + u_xlat0.xy;
    u_xlat0.xy = hs_TEXCOORD0[2].xy * gl_TessCoord.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _Flamenoise_ST.xy + _Flamenoise_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_u, _v) + u_xlat0.xy;
    u_xlat6 = textureLod(_FlameWave, u_xlat0.xy, 0.0).x;
    u_xlat0.x = textureLod(_Flamenoise, u_xlat0.xy, 0.0).x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat1.xyz = gl_TessCoord.yyy * hs_NORMAL0[1].xyz;
    u_xlat1.xyz = hs_NORMAL0[0].xyz * gl_TessCoord.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hs_NORMAL0[2].xyz * gl_TessCoord.zzz + u_xlat1.xyz;
    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.x = (-u_xlat2.y) * u_xlat9 + _Y_Mask;
    ds_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = abs(u_xlat1.x) + (-_Y_Mask);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
    u_xlat1 = gl_TessCoord.yyyy * hs_INTERNALTESSPOS0[1];
    u_xlat1 = hs_INTERNALTESSPOS0[0] * gl_TessCoord.xxxx + u_xlat1;
    u_xlat1 = hs_INTERNALTESSPOS0[2] * gl_TessCoord.zzzz + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_FlameHeight, _FlameHeight, _FlameHeight)) + u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    ds_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat0.xyz;
    u_xlat0 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 38
; Schema: 0
                               OpCapability Shader 
                        %1 = OpExtInstImport "GLSL.std.450" 
                               OpMemoryModel Logical GLSL450 
                               OpEntryPoint Vertex %4 "main" %9 %11 %13 %14 %18 %20 %22 %23 %25 %26 %28 %29 %31 %32 %34 %35 
                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                               OpDecorate %9 Location 9 
                               OpDecorate %11 Location 11 
                               OpDecorate %13 Location 13 
                               OpDecorate %14 Location 14 
                               OpDecorate %18 Location 18 
                               OpDecorate %20 Location 20 
                               OpDecorate vs_TEXCOORD0 Location 22 
                               OpDecorate %23 Location 23 
                               OpDecorate vs_TEXCOORD1 Location 25 
                               OpDecorate %26 Location 26 
                               OpDecorate vs_TEXCOORD2 Location 28 
                               OpDecorate %29 Location 29 
                               OpDecorate vs_TEXCOORD3 Location 31 
                               OpDecorate %32 Location 32 
                               OpDecorate %34 Location 34 
                               OpDecorate %35 Location 35 
                        %2 = OpTypeVoid 
                        %3 = OpTypeFunction %2 
                        %6 = OpTypeFloat 32 
                        %7 = OpTypeVector %6 4 
                        %8 = OpTypePointer Output %7 
          Output f32_4* %9 = OpVariable Output 
                       %10 = OpTypePointer Input %7 
          Input f32_4* %11 = OpVariable Input 
         Output f32_4* %13 = OpVariable Output 
          Input f32_4* %14 = OpVariable Input 
                       %16 = OpTypeVector %6 3 
                       %17 = OpTypePointer Output %16 
         Output f32_3* %18 = OpVariable Output 
                       %19 = OpTypePointer Input %16 
          Input f32_3* %20 = OpVariable Input 
Output f32_4* vs_TEXCOORD0 = OpVariable Output 
          Input f32_4* %23 = OpVariable Input 
Output f32_4* vs_TEXCOORD1 = OpVariable Output 
          Input f32_4* %26 = OpVariable Input 
Output f32_4* vs_TEXCOORD2 = OpVariable Output 
          Input f32_4* %29 = OpVariable Input 
Output f32_4* vs_TEXCOORD3 = OpVariable Output 
          Input f32_4* %32 = OpVariable Input 
         Output f32_4* %34 = OpVariable Output 
          Input f32_4* %35 = OpVariable Input 
                   void %4 = OpFunction None %3 
                        %5 = OpLabel 
                 f32_4 %12 = OpLoad %11 
                               OpStore %9 %12 
                 f32_4 %15 = OpLoad %14 
                               OpStore %13 %15 
                 f32_3 %21 = OpLoad %20 
                               OpStore %18 %21 
                 f32_4 %24 = OpLoad %23 
                               OpStore vs_TEXCOORD0 %24 
                 f32_4 %27 = OpLoad %26 
                               OpStore vs_TEXCOORD1 %27 
                 f32_4 %30 = OpLoad %29 
                               OpStore vs_TEXCOORD2 %30 
                 f32_4 %33 = OpLoad %32 
                               OpStore vs_TEXCOORD3 %33 
                 f32_4 %36 = OpLoad %35 
                               OpStore %34 %36 
                               OpReturn
                               OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 216
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %91 %174 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %91 Location 91 
                                                      OpDecorate %174 Location 174 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeStruct %7 %14 %14 %6 %6 %6 %6 %6 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32; f32; f32; f32; f32;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %7 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %25 = OpVariable Private 
                               Private f32_3* %31 = OpVariable Private 
                                          i32 %36 = OpConstant 1 
                                              %37 = OpTypePointer Uniform %14 
                                          f32 %50 = OpConstant 3.674022E-40 
                                          f32 %64 = OpConstant 3.674022E-40 
                                          f32 %65 = OpConstant 3.674022E-40 
                                              %73 = OpTypeInt 32 0 
                                          u32 %74 = OpConstant 0 
                                          f32 %87 = OpConstant 3.674022E-40 
                                          f32 %89 = OpConstant 3.674022E-40 
                                 Input f32_3* %91 = OpVariable Input 
                                Private f32* %108 = OpVariable Private 
                                Private f32* %116 = OpVariable Private 
                                         i32 %133 = OpConstant 6 
                                             %134 = OpTypePointer Uniform %6 
                                         i32 %143 = OpConstant 5 
                                         i32 %149 = OpConstant 4 
                                         f32 %155 = OpConstant 3.674022E-40 
                                         f32 %157 = OpConstant 3.674022E-40 
                                         f32 %164 = OpConstant 3.674022E-40 
                                         i32 %168 = OpConstant 2 
                                             %173 = OpTypePointer Output %14 
                               Output f32_4* %174 = OpVariable Output 
                                         u32 %181 = OpConstant 1 
                                             %182 = OpTypePointer Input %6 
                                         i32 %186 = OpConstant 3 
                                         i32 %208 = OpConstant 7 
                                         u32 %212 = OpConstant 3 
                                             %213 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad %11 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %13 %22 
                                                      OpStore %9 %23 
                                        f32_3 %26 = OpLoad %9 
                                        f32_3 %27 = OpLoad %9 
                                          f32 %28 = OpDot %26 %27 
                                                      OpStore %25 %28 
                                          f32 %29 = OpLoad %25 
                                          f32 %30 = OpExtInst %1 32 %29 
                                                      OpStore %25 %30 
                                        f32_3 %32 = OpLoad %9 
                                          f32 %33 = OpLoad %25 
                                        f32_3 %34 = OpCompositeConstruct %33 %33 %33 
                                        f32_3 %35 = OpFMul %32 %34 
                               Uniform f32_4* %38 = OpAccessChain %17 %36 
                                        f32_4 %39 = OpLoad %38 
                                        f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
                                        f32_3 %41 = OpFAdd %35 %40 
                                                      OpStore %31 %41 
                                          f32 %42 = OpLoad %25 
                                        f32_3 %43 = OpCompositeConstruct %42 %42 %42 
                                        f32_3 %44 = OpLoad %9 
                                        f32_3 %45 = OpFMul %43 %44 
                                                      OpStore %9 %45 
                                        f32_3 %46 = OpLoad %31 
                                        f32_3 %47 = OpLoad %31 
                                          f32 %48 = OpDot %46 %47 
                                                      OpStore %25 %48 
                                          f32 %49 = OpLoad %25 
                                          f32 %51 = OpExtInst %1 40 %49 %50 
                                                      OpStore %25 %51 
                                          f32 %52 = OpLoad %25 
                                          f32 %53 = OpExtInst %1 32 %52 
                                                      OpStore %25 %53 
                                          f32 %54 = OpLoad %25 
                                        f32_3 %55 = OpCompositeConstruct %54 %54 %54 
                                        f32_3 %56 = OpLoad %31 
                                        f32_3 %57 = OpFMul %55 %56 
                                                      OpStore %31 %57 
                               Uniform f32_4* %58 = OpAccessChain %17 %36 
                                        f32_4 %59 = OpLoad %58 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpLoad %31 
                                          f32 %62 = OpDot %60 %61 
                                                      OpStore %25 %62 
                                          f32 %63 = OpLoad %25 
                                          f32 %66 = OpExtInst %1 43 %63 %64 %65 
                                                      OpStore %25 %66 
                                          f32 %67 = OpLoad %25 
                                          f32 %68 = OpFNegate %67 
                                          f32 %69 = OpFAdd %68 %65 
                                                      OpStore %25 %69 
                                          f32 %70 = OpLoad %25 
                                          f32 %71 = OpLoad %25 
                                          f32 %72 = OpFMul %70 %71 
                                 Private f32* %75 = OpAccessChain %31 %74 
                                                      OpStore %75 %72 
                                 Private f32* %76 = OpAccessChain %31 %74 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %78 = OpAccessChain %31 %74 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFMul %77 %79 
                                 Private f32* %81 = OpAccessChain %31 %74 
                                                      OpStore %81 %80 
                                          f32 %82 = OpLoad %25 
                                 Private f32* %83 = OpAccessChain %31 %74 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpFMul %82 %84 
                                                      OpStore %25 %85 
                                          f32 %86 = OpLoad %25 
                                          f32 %88 = OpFMul %86 %87 
                                          f32 %90 = OpFAdd %88 %89 
                                                      OpStore %25 %90 
                                        f32_3 %92 = OpLoad %91 
                                        f32_3 %93 = OpLoad %91 
                                          f32 %94 = OpDot %92 %93 
                                 Private f32* %95 = OpAccessChain %31 %74 
                                                      OpStore %95 %94 
                                 Private f32* %96 = OpAccessChain %31 %74 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpExtInst %1 32 %97 
                                 Private f32* %99 = OpAccessChain %31 %74 
                                                      OpStore %99 %98 
                                       f32_3 %100 = OpLoad %31 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 0 0 
                                       f32_3 %102 = OpLoad %91 
                                       f32_3 %103 = OpFMul %101 %102 
                                                      OpStore %31 %103 
                                       f32_3 %104 = OpLoad %31 
                                       f32_3 %105 = OpLoad %9 
                                         f32 %106 = OpDot %104 %105 
                                Private f32* %107 = OpAccessChain %9 %74 
                                                      OpStore %107 %106 
                                       f32_3 %109 = OpLoad %31 
                              Uniform f32_4* %110 = OpAccessChain %17 %36 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                         f32 %113 = OpDot %109 %112 
                                                      OpStore %108 %113 
                                         f32 %114 = OpLoad %108 
                                         f32 %115 = OpExtInst %1 43 %114 %64 %65 
                                                      OpStore %108 %115 
                                Private f32* %117 = OpAccessChain %9 %74 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpExtInst %1 4 %118 
                                         f32 %120 = OpLoad %108 
                                         f32 %121 = OpFAdd %119 %120 
                                                      OpStore %116 %121 
                                Private f32* %122 = OpAccessChain %9 %74 
                                         f32 %123 = OpLoad %122 
                                         f32 %124 = OpFNegate %123 
                                         f32 %125 = OpFAdd %124 %65 
                                Private f32* %126 = OpAccessChain %9 %74 
                                                      OpStore %126 %125 
                                Private f32* %127 = OpAccessChain %9 %74 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpExtInst %1 30 %128 
                                Private f32* %130 = OpAccessChain %9 %74 
                                                      OpStore %130 %129 
                                Private f32* %131 = OpAccessChain %9 %74 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %135 = OpAccessChain %17 %133 
                                         f32 %136 = OpLoad %135 
                                         f32 %137 = OpFMul %132 %136 
                                Private f32* %138 = OpAccessChain %9 %74 
                                                      OpStore %138 %137 
                                Private f32* %139 = OpAccessChain %9 %74 
                                         f32 %140 = OpLoad %139 
                                         f32 %141 = OpExtInst %1 29 %140 
                                Private f32* %142 = OpAccessChain %9 %74 
                                                      OpStore %142 %141 
                                Uniform f32* %144 = OpAccessChain %17 %143 
                                         f32 %145 = OpLoad %144 
                                Private f32* %146 = OpAccessChain %9 %74 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFMul %145 %147 
                                Uniform f32* %150 = OpAccessChain %17 %149 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFAdd %148 %151 
                                Private f32* %153 = OpAccessChain %9 %74 
                                                      OpStore %153 %152 
                                         f32 %154 = OpLoad %116 
                                         f32 %156 = OpFAdd %154 %155 
                                                      OpStore %116 %156 
                                         f32 %158 = OpLoad %116 
                                         f32 %159 = OpFDiv %157 %158 
                                                      OpStore %116 %159 
                                         f32 %160 = OpLoad %108 
                                         f32 %161 = OpLoad %116 
                                         f32 %162 = OpFMul %160 %161 
                                                      OpStore %108 %162 
                                         f32 %163 = OpLoad %108 
                                         f32 %165 = OpFMul %163 %164 
                                                      OpStore %108 %165 
                                         f32 %166 = OpLoad %108 
                                       f32_3 %167 = OpCompositeConstruct %166 %166 %166 
                              Uniform f32_4* %169 = OpAccessChain %17 %168 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_3 %172 = OpFMul %167 %171 
                                                      OpStore %31 %172 
                                         f32 %175 = OpLoad %25 
                                       f32_3 %176 = OpCompositeConstruct %175 %175 %175 
                                       f32_3 %177 = OpLoad %31 
                                       f32_3 %178 = OpFMul %176 %177 
                                       f32_4 %179 = OpLoad %174 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %174 %180 
                                  Input f32* %183 = OpAccessChain %91 %181 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpFNegate %184 
                                Uniform f32* %187 = OpAccessChain %17 %186 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFAdd %185 %188 
                                                      OpStore %108 %189 
                                         f32 %190 = OpLoad %108 
                                         f32 %191 = OpExtInst %1 4 %190 
                                Uniform f32* %192 = OpAccessChain %17 %186 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFNegate %193 
                                         f32 %195 = OpFAdd %191 %194 
                                                      OpStore %108 %195 
                                         f32 %196 = OpLoad %108 
                                         f32 %197 = OpExtInst %1 43 %196 %64 %65 
                                                      OpStore %108 %197 
                                         f32 %198 = OpLoad %108 
                                         f32 %199 = OpFNegate %198 
                                         f32 %200 = OpFAdd %199 %65 
                                                      OpStore %108 %200 
                                         f32 %201 = OpLoad %108 
                                Private f32* %202 = OpAccessChain %9 %74 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpFMul %201 %203 
                                Private f32* %205 = OpAccessChain %9 %74 
                                                      OpStore %205 %204 
                                Private f32* %206 = OpAccessChain %9 %74 
                                         f32 %207 = OpLoad %206 
                                Uniform f32* %209 = OpAccessChain %17 %208 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpFMul %207 %210 
                                 Output f32* %214 = OpAccessChain %174 %212 
                                                      OpStore %214 %211 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 387
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationControl %4 "main" %23 %25 %30 %37 %39 %47 %51 %58 %60 %65 %67 %72 %74 %79 %81 %86 %88 %219 %371 
                                                      OpExecutionMode %4 OutputVertices 4 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %25 BuiltIn WorkgroupSize 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %37 Location 37 
                                                      OpDecorate %39 Location 39 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %51 Location 51 
                                                      OpDecorate %58 Location 58 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate %65 Location 65 
                                                      OpDecorate vs_TEXCOORD1 Location 67 
                                                      OpDecorate %72 Location 72 
                                                      OpDecorate vs_TEXCOORD2 Location 74 
                                                      OpDecorate %79 Location 79 
                                                      OpDecorate vs_TEXCOORD3 Location 81 
                                                      OpDecorate %86 Location 86 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %96 ArrayStride 96 
                                                      OpMemberDecorate %97 0 Offset 97 
                                                      OpMemberDecorate %97 1 Offset 97 
                                                      OpMemberDecorate %97 2 Offset 97 
                                                      OpMemberDecorate %97 3 Offset 97 
                                                      OpDecorate %97 Block 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate %219 Patch 
                                                      OpDecorate %219 BuiltIn 219 
                                                      OpDecorate %371 Patch 
                                                      OpDecorate %371 BuiltIn 371 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %8 = OpTypeInt 32 1 
                                               %9 = OpTypePointer Function %8 
                                              %10 = OpTypeFunction %2 %9 
                                              %17 = OpTypeFloat 32 
                                              %18 = OpTypeVector %17 4 
                                              %19 = OpTypeInt 32 0 
                                          u32 %20 = OpConstant 3 
                                              %21 = OpTypeArray %18 %20 
                                              %22 = OpTypePointer Output %21 
                             Output f32_4[3]* %23 = OpVariable Output 
                                              %24 = OpTypePointer Input %8 
                                   Input i32* %25 = OpVariable Input 
                                          u32 %27 = OpConstant 32 
                                              %28 = OpTypeArray %18 %27 
                                              %29 = OpTypePointer Input %28 
                             Input f32_4[32]* %30 = OpVariable Input 
                                              %32 = OpTypePointer Input %18 
                                              %35 = OpTypePointer Output %18 
                             Output f32_4[3]* %37 = OpVariable Output 
                             Input f32_4[32]* %39 = OpVariable Input 
                                              %44 = OpTypeVector %17 3 
                                              %45 = OpTypeArray %44 %20 
                                              %46 = OpTypePointer Output %45 
                             Output f32_3[3]* %47 = OpVariable Output 
                                              %49 = OpTypeArray %44 %27 
                                              %50 = OpTypePointer Input %49 
                             Input f32_3[32]* %51 = OpVariable Input 
                                              %53 = OpTypePointer Input %44 
                                              %56 = OpTypePointer Output %44 
                             Output f32_4[3]* %58 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD0 = OpVariable Input 
                             Output f32_4[3]* %65 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD1 = OpVariable Input 
                             Output f32_4[3]* %72 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD2 = OpVariable Input 
                             Output f32_4[3]* %79 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD3 = OpVariable Input 
                             Output f32_4[3]* %86 = OpVariable Output 
                             Input f32_4[32]* %88 = OpVariable Input 
                                              %93 = OpTypePointer Private %44 
                               Private f32_3* %94 = OpVariable Private 
                                          u32 %95 = OpConstant 4 
                                              %96 = OpTypeArray %18 %95 
                                              %97 = OpTypeStruct %44 %18 %96 %17 
                                              %98 = OpTypePointer Uniform %97 
Uniform struct {f32_3; f32_4; f32_4[4]; f32;}* %99 = OpVariable Uniform 
                                         i32 %100 = OpConstant 2 
                                         i32 %101 = OpConstant 1 
                                             %102 = OpTypePointer Uniform %18 
                                         i32 %110 = OpConstant 0 
                                         i32 %129 = OpConstant 3 
                              Private f32_3* %139 = OpVariable Private 
                              Private f32_3* %174 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                             %182 = OpTypePointer Uniform %44 
                                             %187 = OpTypePointer Private %17 
                                Private f32* %188 = OpVariable Private 
                                             %195 = OpTypePointer Uniform %17 
                                Private f32* %203 = OpVariable Private 
                                         u32 %210 = OpConstant 1 
                                             %217 = OpTypeArray %17 %95 
                                             %218 = OpTypePointer Output %217 
                              Output f32[4]* %219 = OpVariable Output 
                                         f32 %221 = OpConstant 3.674022E-40 
                                             %223 = OpTypePointer Output %17 
                              Private f32_3* %259 = OpVariable Private 
                                         u32 %285 = OpConstant 0 
                              Private f32_3* %325 = OpVariable Private 
                                         u32 %368 = OpConstant 2 
                                             %369 = OpTypeArray %17 %368 
                                             %370 = OpTypePointer Output %369 
                              Output f32[2]* %371 = OpVariable Output 
                                         f32 %374 = OpConstant 3.674022E-40 
                                             %379 = OpTypeBool 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %383 = OpVariable Function 
                               Function i32* %385 = OpVariable Function 
                                        void %377 = OpFunctionCall %6 
                                                      OpControlBarrier 368 95 285 
                                         i32 %378 = OpLoad %25 
                                        bool %380 = OpIEqual %378 %110 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %380 %381 %382 
                                             %381 = OpLabel 
                                                      OpStore %383 %110 
                                        void %384 = OpFunctionCall %12 %383 
                                                      OpStore %385 %110 
                                        void %386 = OpFunctionCall %15 %385 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
                                          void %6 = OpFunction None %3 
                                               %7 = OpLabel 
                                          i32 %26 = OpLoad %25 
                                          i32 %31 = OpLoad %25 
                                 Input f32_4* %33 = OpAccessChain %30 %31 
                                        f32_4 %34 = OpLoad %33 
                                Output f32_4* %36 = OpAccessChain %23 %26 
                                                      OpStore %36 %34 
                                          i32 %38 = OpLoad %25 
                                          i32 %40 = OpLoad %25 
                                 Input f32_4* %41 = OpAccessChain %39 %40 
                                        f32_4 %42 = OpLoad %41 
                                Output f32_4* %43 = OpAccessChain %37 %38 
                                                      OpStore %43 %42 
                                          i32 %48 = OpLoad %25 
                                          i32 %52 = OpLoad %25 
                                 Input f32_3* %54 = OpAccessChain %51 %52 
                                        f32_3 %55 = OpLoad %54 
                                Output f32_3* %57 = OpAccessChain %47 %48 
                                                      OpStore %57 %55 
                                          i32 %59 = OpLoad %25 
                                          i32 %61 = OpLoad %25 
                                 Input f32_4* %62 = OpAccessChain vs_TEXCOORD0 %61 
                                        f32_4 %63 = OpLoad %62 
                                Output f32_4* %64 = OpAccessChain %58 %59 
                                                      OpStore %64 %63 
                                          i32 %66 = OpLoad %25 
                                          i32 %68 = OpLoad %25 
                                 Input f32_4* %69 = OpAccessChain vs_TEXCOORD1 %68 
                                        f32_4 %70 = OpLoad %69 
                                Output f32_4* %71 = OpAccessChain %65 %66 
                                                      OpStore %71 %70 
                                          i32 %73 = OpLoad %25 
                                          i32 %75 = OpLoad %25 
                                 Input f32_4* %76 = OpAccessChain vs_TEXCOORD2 %75 
                                        f32_4 %77 = OpLoad %76 
                                Output f32_4* %78 = OpAccessChain %72 %73 
                                                      OpStore %78 %77 
                                          i32 %80 = OpLoad %25 
                                          i32 %82 = OpLoad %25 
                                 Input f32_4* %83 = OpAccessChain vs_TEXCOORD3 %82 
                                        f32_4 %84 = OpLoad %83 
                                Output f32_4* %85 = OpAccessChain %79 %80 
                                                      OpStore %85 %84 
                                          i32 %87 = OpLoad %25 
                                          i32 %89 = OpLoad %25 
                                 Input f32_4* %90 = OpAccessChain %88 %89 
                                        f32_4 %91 = OpLoad %90 
                                Output f32_4* %92 = OpAccessChain %86 %87 
                                                      OpStore %92 %91 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %12 = OpFunction None %10 
                                Function i32* %11 = OpFunctionParameter 
                                              %13 = OpLabel 
                              Uniform f32_4* %103 = OpAccessChain %99 %100 %101 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                Input f32_4* %106 = OpAccessChain %30 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 1 1 1 
                                       f32_3 %109 = OpFMul %105 %108 
                                                      OpStore %94 %109 
                              Uniform f32_4* %111 = OpAccessChain %99 %100 %110 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                Input f32_4* %114 = OpAccessChain %30 %101 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %113 %116 
                                       f32_3 %118 = OpLoad %94 
                                       f32_3 %119 = OpFAdd %117 %118 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %99 %100 %100 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                Input f32_4* %123 = OpAccessChain %30 %101 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 2 2 2 
                                       f32_3 %126 = OpFMul %122 %125 
                                       f32_3 %127 = OpLoad %94 
                                       f32_3 %128 = OpFAdd %126 %127 
                                                      OpStore %94 %128 
                              Uniform f32_4* %130 = OpAccessChain %99 %100 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                Input f32_4* %133 = OpAccessChain %30 %101 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 3 3 3 
                                       f32_3 %136 = OpFMul %132 %135 
                                       f32_3 %137 = OpLoad %94 
                                       f32_3 %138 = OpFAdd %136 %137 
                                                      OpStore %94 %138 
                              Uniform f32_4* %140 = OpAccessChain %99 %100 %101 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                Input f32_4* %143 = OpAccessChain %30 %100 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 1 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                                      OpStore %139 %146 
                              Uniform f32_4* %147 = OpAccessChain %99 %100 %110 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                Input f32_4* %150 = OpAccessChain %30 %100 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 0 0 
                                       f32_3 %153 = OpFMul %149 %152 
                                       f32_3 %154 = OpLoad %139 
                                       f32_3 %155 = OpFAdd %153 %154 
                                                      OpStore %139 %155 
                              Uniform f32_4* %156 = OpAccessChain %99 %100 %100 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                Input f32_4* %159 = OpAccessChain %30 %100 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 2 2 2 
                                       f32_3 %162 = OpFMul %158 %161 
                                       f32_3 %163 = OpLoad %139 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %139 %164 
                              Uniform f32_4* %165 = OpAccessChain %99 %100 %129 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                Input f32_4* %168 = OpAccessChain %30 %100 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 3 3 3 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_3 %172 = OpLoad %139 
                                       f32_3 %173 = OpFAdd %171 %172 
                                                      OpStore %139 %173 
                                       f32_3 %175 = OpLoad %94 
                                       f32_3 %176 = OpLoad %139 
                                       f32_3 %177 = OpFAdd %175 %176 
                                                      OpStore %174 %177 
                                       f32_3 %178 = OpLoad %174 
                                       f32_3 %181 = OpFMul %178 %180 
                              Uniform f32_3* %183 = OpAccessChain %99 %110 
                                       f32_3 %184 = OpLoad %183 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpFAdd %181 %185 
                                                      OpStore %174 %186 
                                       f32_3 %189 = OpLoad %174 
                                       f32_3 %190 = OpLoad %174 
                                         f32 %191 = OpDot %189 %190 
                                                      OpStore %188 %191 
                                         f32 %192 = OpLoad %188 
                                         f32 %193 = OpExtInst %1 31 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                Uniform f32* %196 = OpAccessChain %99 %129 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %194 %197 
                                                      OpStore %188 %198 
                                       f32_3 %199 = OpLoad %94 
                                       f32_3 %200 = OpLoad %139 
                                       f32_3 %201 = OpFNegate %200 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore %174 %202 
                                       f32_3 %204 = OpLoad %174 
                                       f32_3 %205 = OpLoad %174 
                                         f32 %206 = OpDot %204 %205 
                                                      OpStore %203 %206 
                                         f32 %207 = OpLoad %203 
                                         f32 %208 = OpExtInst %1 31 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                Uniform f32* %211 = OpAccessChain %99 %101 %210 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %209 %212 
                                                      OpStore %203 %213 
                                         f32 %214 = OpLoad %203 
                                         f32 %215 = OpLoad %188 
                                         f32 %216 = OpFDiv %214 %215 
                                                      OpStore %188 %216 
                                         f32 %220 = OpLoad %188 
                                         f32 %222 = OpExtInst %1 40 %220 %221 
                                 Output f32* %224 = OpAccessChain %219 %110 
                                                      OpStore %224 %222 
                              Uniform f32_4* %225 = OpAccessChain %99 %100 %101 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                Input f32_4* %228 = OpAccessChain %30 %110 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 1 1 1 
                                       f32_3 %231 = OpFMul %227 %230 
                                                      OpStore %174 %231 
                              Uniform f32_4* %232 = OpAccessChain %99 %100 %110 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                Input f32_4* %235 = OpAccessChain %30 %110 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 0 0 
                                       f32_3 %238 = OpFMul %234 %237 
                                       f32_3 %239 = OpLoad %174 
                                       f32_3 %240 = OpFAdd %238 %239 
                                                      OpStore %174 %240 
                              Uniform f32_4* %241 = OpAccessChain %99 %100 %100 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                Input f32_4* %244 = OpAccessChain %30 %110 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 2 2 2 
                                       f32_3 %247 = OpFMul %243 %246 
                                       f32_3 %248 = OpLoad %174 
                                       f32_3 %249 = OpFAdd %247 %248 
                                                      OpStore %174 %249 
                              Uniform f32_4* %250 = OpAccessChain %99 %100 %129 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                Input f32_4* %253 = OpAccessChain %30 %110 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 3 3 3 
                                       f32_3 %256 = OpFMul %252 %255 
                                       f32_3 %257 = OpLoad %174 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore %174 %258 
                                       f32_3 %260 = OpLoad %139 
                                       f32_3 %261 = OpLoad %174 
                                       f32_3 %262 = OpFAdd %260 %261 
                                                      OpStore %259 %262 
                                       f32_3 %263 = OpLoad %139 
                                       f32_3 %264 = OpLoad %174 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_3 %266 = OpFAdd %263 %265 
                                                      OpStore %139 %266 
                                       f32_3 %267 = OpLoad %139 
                                       f32_3 %268 = OpLoad %139 
                                         f32 %269 = OpDot %267 %268 
                                                      OpStore %188 %269 
                                         f32 %270 = OpLoad %188 
                                         f32 %271 = OpExtInst %1 31 %270 
                                                      OpStore %188 %271 
                                         f32 %272 = OpLoad %188 
                                Uniform f32* %273 = OpAccessChain %99 %101 %210 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                                      OpStore %188 %275 
                                       f32_3 %276 = OpLoad %259 
                                       f32_3 %277 = OpFMul %276 %180 
                              Uniform f32_3* %278 = OpAccessChain %99 %110 
                                       f32_3 %279 = OpLoad %278 
                                       f32_3 %280 = OpFNegate %279 
                                       f32_3 %281 = OpFAdd %277 %280 
                                                      OpStore %139 %281 
                                       f32_3 %282 = OpLoad %139 
                                       f32_3 %283 = OpLoad %139 
                                         f32 %284 = OpDot %282 %283 
                                Private f32* %286 = OpAccessChain %139 %285 
                                                      OpStore %286 %284 
                                Private f32* %287 = OpAccessChain %139 %285 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 31 %288 
                                Private f32* %290 = OpAccessChain %139 %285 
                                                      OpStore %290 %289 
                                Private f32* %291 = OpAccessChain %139 %285 
                                         f32 %292 = OpLoad %291 
                                Uniform f32* %293 = OpAccessChain %99 %129 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFMul %292 %294 
                                Private f32* %296 = OpAccessChain %139 %285 
                                                      OpStore %296 %295 
                                         f32 %297 = OpLoad %188 
                                Private f32* %298 = OpAccessChain %139 %285 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFDiv %297 %299 
                                                      OpStore %188 %300 
                                         f32 %301 = OpLoad %188 
                                         f32 %302 = OpExtInst %1 40 %301 %221 
                                 Output f32* %303 = OpAccessChain %219 %101 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %94 
                                       f32_3 %305 = OpLoad %174 
                                       f32_3 %306 = OpFAdd %304 %305 
                                                      OpStore %139 %306 
                                       f32_3 %307 = OpLoad %94 
                                       f32_3 %308 = OpFNegate %307 
                                       f32_3 %309 = OpLoad %174 
                                       f32_3 %310 = OpFAdd %308 %309 
                                                      OpStore %94 %310 
                                       f32_3 %311 = OpLoad %94 
                                       f32_3 %312 = OpLoad %94 
                                         f32 %313 = OpDot %311 %312 
                                Private f32* %314 = OpAccessChain %94 %285 
                                                      OpStore %314 %313 
                                Private f32* %315 = OpAccessChain %94 %285 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpExtInst %1 31 %316 
                                Private f32* %318 = OpAccessChain %94 %285 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %94 %285 
                                         f32 %320 = OpLoad %319 
                                Uniform f32* %321 = OpAccessChain %99 %101 %210 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %320 %322 
                                Private f32* %324 = OpAccessChain %94 %285 
                                                      OpStore %324 %323 
                                       f32_3 %326 = OpLoad %139 
                                       f32_3 %327 = OpFMul %326 %180 
                              Uniform f32_3* %328 = OpAccessChain %99 %110 
                                       f32_3 %329 = OpLoad %328 
                                       f32_3 %330 = OpFNegate %329 
                                       f32_3 %331 = OpFAdd %327 %330 
                                                      OpStore %325 %331 
                                       f32_3 %332 = OpLoad %325 
                                       f32_3 %333 = OpLoad %325 
                                         f32 %334 = OpDot %332 %333 
                                Private f32* %335 = OpAccessChain %325 %285 
                                                      OpStore %335 %334 
                                Private f32* %336 = OpAccessChain %325 %285 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpExtInst %1 31 %337 
                                Private f32* %339 = OpAccessChain %325 %285 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %325 %285 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %99 %129 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFMul %341 %343 
                                Private f32* %345 = OpAccessChain %325 %285 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %94 %285 
                                         f32 %347 = OpLoad %346 
                                Private f32* %348 = OpAccessChain %325 %285 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFDiv %347 %349 
                                Private f32* %351 = OpAccessChain %94 %285 
                                                      OpStore %351 %350 
                                Private f32* %352 = OpAccessChain %94 %285 
                                         f32 %353 = OpLoad %352 
                                         f32 %354 = OpExtInst %1 40 %353 %221 
                                 Output f32* %355 = OpAccessChain %219 %100 
                                                      OpStore %355 %354 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %15 = OpFunction None %10 
                                Function i32* %14 = OpFunctionParameter 
                                              %16 = OpLabel 
                                 Output f32* %356 = OpAccessChain %219 %100 
                                         f32 %357 = OpLoad %356 
                                 Output f32* %358 = OpAccessChain %219 %100 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                Private f32* %361 = OpAccessChain %94 %285 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %94 %285 
                                         f32 %363 = OpLoad %362 
                                 Output f32* %364 = OpAccessChain %219 %100 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFAdd %363 %365 
                                Private f32* %367 = OpAccessChain %94 %285 
                                                      OpStore %367 %366 
                                Private f32* %372 = OpAccessChain %94 %285 
                                         f32 %373 = OpLoad %372 
                                         f32 %375 = OpFMul %373 %374 
                                 Output f32* %376 = OpAccessChain %371 %110 
                                                      OpStore %376 %375 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 345
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationEvaluation %4 "main" %12 %20 %138 %207 %235 %297 %329 
                                                      OpExecutionMode %4 Triangles 
                                                      OpExecutionMode %4 SpacingFractionalOdd 
                                                      OpExecutionMode %4 VertexOrderCw 
                                                      OpDecorate %12 BuiltIn TessLevelInner 
                                                      OpDecorate %20 Location 20 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpMemberDecorate %60 0 Offset 60 
                                                      OpMemberDecorate %60 1 Offset 60 
                                                      OpMemberDecorate %60 2 Offset 60 
                                                      OpMemberDecorate %60 3 Offset 60 
                                                      OpMemberDecorate %60 4 Offset 60 
                                                      OpMemberDecorate %60 5 Offset 60 
                                                      OpMemberDecorate %60 6 Offset 60 
                                                      OpMemberDecorate %60 7 Offset 60 
                                                      OpMemberDecorate %60 8 Offset 60 
                                                      OpDecorate %60 Block 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpDecorate %96 DescriptorSet 96 
                                                      OpDecorate %96 Binding 96 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate %110 DescriptorSet 110 
                                                      OpDecorate %110 Binding 110 
                                                      OpDecorate %112 DescriptorSet 112 
                                                      OpDecorate %112 Binding 112 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %207 Location 207 
                                                      OpDecorate %235 Location 235 
                                                      OpDecorate %297 Location 297 
                                                      OpMemberDecorate %327 0 BuiltIn 327 
                                                      OpMemberDecorate %327 1 BuiltIn 327 
                                                      OpMemberDecorate %327 2 BuiltIn 327 
                                                      OpDecorate %327 Block 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 32 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypePointer Input %18 
                             Input f32_4[32]* %20 = OpVariable Input 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Input %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %42 = OpConstant 2 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                              %60 = OpTypeStruct %7 %57 %58 %59 %6 %6 %7 %6 %6 
                                              %61 = OpTypePointer Uniform %60 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32; f32;}* %62 = OpVariable Uniform 
                                          i32 %63 = OpConstant 6 
                                              %64 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 4 
                                              %79 = OpTypePointer Uniform %6 
                                          i32 %82 = OpConstant 5 
                                              %92 = OpTypePointer Private %6 
                                 Private f32* %93 = OpVariable Private 
                                              %94 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %95 = OpTypePointer UniformConstant %94 
         UniformConstant read_only Texture2D* %96 = OpVariable UniformConstant 
                                              %98 = OpTypeSampler 
                                              %99 = OpTypePointer UniformConstant %98 
                    UniformConstant sampler* %100 = OpVariable UniformConstant 
                                             %102 = OpTypeSampledImage %94 
                                         f32 %106 = OpConstant 3.674022E-40 
                                         u32 %108 = OpConstant 0 
        UniformConstant read_only Texture2D* %110 = OpVariable UniformConstant 
                    UniformConstant sampler* %112 = OpVariable UniformConstant 
                              Private f32_4* %133 = OpVariable Private 
                                             %136 = OpTypeArray %10 %17 
                                             %137 = OpTypePointer Input %136 
                            Input f32_3[32]* %138 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         u32 %178 = OpConstant 2 
                                         u32 %186 = OpConstant 1 
                                Private f32* %188 = OpVariable Private 
                                         i32 %201 = OpConstant 7 
                                             %206 = OpTypePointer Output %10 
                               Output f32_3* %207 = OpVariable Output 
                                         f32 %221 = OpConstant 3.674022E-40 
                            Input f32_4[32]* %235 = OpVariable Input 
                                         i32 %255 = OpConstant 8 
                                         i32 %293 = OpConstant 3 
                               Output f32_3* %297 = OpVariable Output 
                                             %326 = OpTypeArray %6 %186 
                                             %327 = OpTypeStruct %7 %6 %326 
                                             %328 = OpTypePointer Output %327 
        Output struct {f32_4; f32; f32[1];}* %329 = OpVariable Output 
                                             %337 = OpTypePointer Output %7 
                                             %339 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 1 1 
                                 Input f32_4* %24 = OpAccessChain %20 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                                        f32_2 %27 = OpFMul %15 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                                 Input f32_4* %31 = OpAccessChain %20 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_3 %34 = OpLoad %12 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 0 
                                        f32_2 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                                        f32_2 %39 = OpFAdd %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                 Input f32_4* %43 = OpAccessChain %20 %42 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_3 %46 = OpLoad %12 
                                        f32_2 %47 = OpVectorShuffle %46 %46 2 2 
                                        f32_2 %48 = OpFMul %45 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                                        f32_2 %51 = OpFAdd %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               Uniform f32_4* %65 = OpAccessChain %62 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_2 %67 = OpVectorShuffle %66 %66 0 1 
                                        f32_2 %68 = OpFMul %55 %67 
                               Uniform f32_4* %69 = OpAccessChain %62 %63 
                                        f32_4 %70 = OpLoad %69 
                                        f32_2 %71 = OpVectorShuffle %70 %70 2 3 
                                        f32_2 %72 = OpFAdd %68 %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %72 4 5 2 3 
                                                      OpStore %9 %74 
                               Uniform f32_4* %75 = OpAccessChain %62 %30 
                                        f32_4 %76 = OpLoad %75 
                                        f32_2 %77 = OpVectorShuffle %76 %76 1 1 
                                 Uniform f32* %80 = OpAccessChain %62 %78 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %83 = OpAccessChain %62 %82 
                                          f32 %84 = OpLoad %83 
                                        f32_2 %85 = OpCompositeConstruct %81 %84 
                                        f32_2 %86 = OpFMul %77 %85 
                                        f32_4 %87 = OpLoad %9 
                                        f32_2 %88 = OpVectorShuffle %87 %87 0 1 
                                        f32_2 %89 = OpFAdd %86 %88 
                                        f32_4 %90 = OpLoad %9 
                                        f32_4 %91 = OpVectorShuffle %90 %89 4 5 2 3 
                                                      OpStore %9 %91 
                          read_only Texture2D %97 = OpLoad %96 
                                     sampler %101 = OpLoad %100 
                  read_only Texture2DSampled %103 = OpSampledImage %97 %101 
                                       f32_4 %104 = OpLoad %9 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_4 %107 = OpImageSampleExplicitLod %103 %105 Lod %7 
                                         f32 %109 = OpCompositeExtract %107 0 
                                                      OpStore %93 %109 
                         read_only Texture2D %111 = OpLoad %110 
                                     sampler %113 = OpLoad %112 
                  read_only Texture2DSampled %114 = OpSampledImage %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
                                       f32_4 %117 = OpImageSampleExplicitLod %114 %116 Lod %7 
                                         f32 %118 = OpCompositeExtract %117 0 
                                Private f32* %119 = OpAccessChain %9 %108 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %9 %108 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpLoad %93 
                                         f32 %123 = OpFMul %121 %122 
                                Private f32* %124 = OpAccessChain %9 %108 
                                                      OpStore %124 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 0 0 
                              Uniform f32_4* %127 = OpAccessChain %62 %42 %22 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpFMul %126 %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 6 3 
                                                      OpStore %9 %132 
                                       f32_3 %134 = OpLoad %12 
                                       f32_3 %135 = OpVectorShuffle %134 %134 1 1 1 
                                Input f32_3* %139 = OpAccessChain %138 %22 
                                       f32_3 %140 = OpLoad %139 
                                       f32_3 %141 = OpFMul %135 %140 
                                       f32_4 %142 = OpLoad %133 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %133 %143 
                                Input f32_3* %144 = OpAccessChain %138 %30 
                                       f32_3 %145 = OpLoad %144 
                                       f32_3 %146 = OpLoad %12 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 0 0 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %133 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFAdd %148 %150 
                                       f32_4 %152 = OpLoad %133 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %133 %153 
                                Input f32_3* %154 = OpAccessChain %138 %42 
                                       f32_3 %155 = OpLoad %154 
                                       f32_3 %156 = OpLoad %12 
                                       f32_3 %157 = OpVectorShuffle %156 %156 2 2 2 
                                       f32_3 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %133 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %158 %160 
                                       f32_4 %162 = OpLoad %133 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %133 %163 
                                       f32_4 %165 = OpLoad %133 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                              Uniform f32_4* %167 = OpAccessChain %62 %42 %30 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                         f32 %170 = OpDot %166 %169 
                                Private f32* %171 = OpAccessChain %164 %108 
                                                      OpStore %171 %170 
                                       f32_4 %172 = OpLoad %133 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                              Uniform f32_4* %174 = OpAccessChain %62 %42 %42 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                         f32 %177 = OpDot %173 %176 
                                Private f32* %179 = OpAccessChain %164 %178 
                                                      OpStore %179 %177 
                                       f32_4 %180 = OpLoad %133 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                              Uniform f32_4* %182 = OpAccessChain %62 %42 %22 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %181 %184 
                                Private f32* %187 = OpAccessChain %164 %186 
                                                      OpStore %187 %185 
                                       f32_4 %189 = OpLoad %164 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %164 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                         f32 %195 = OpExtInst %1 32 %194 
                                                      OpStore %188 %195 
                                Private f32* %196 = OpAccessChain %164 %186 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFNegate %197 
                                         f32 %199 = OpLoad %188 
                                         f32 %200 = OpFMul %198 %199 
                                Uniform f32* %202 = OpAccessChain %62 %201 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpFAdd %200 %203 
                                Private f32* %205 = OpAccessChain %133 %108 
                                                      OpStore %205 %204 
                                         f32 %208 = OpLoad %188 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_4 %210 = OpLoad %164 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpFMul %209 %211 
                                                      OpStore %207 %212 
                                Private f32* %213 = OpAccessChain %133 %108 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpExtInst %1 4 %214 
                                Uniform f32* %216 = OpAccessChain %62 %201 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFNegate %217 
                                         f32 %219 = OpFAdd %215 %218 
                                                      OpStore %188 %219 
                                         f32 %220 = OpLoad %188 
                                         f32 %222 = OpExtInst %1 43 %220 %106 %221 
                                                      OpStore %188 %222 
                                         f32 %223 = OpLoad %188 
                                         f32 %224 = OpFNegate %223 
                                         f32 %225 = OpFAdd %224 %221 
                                                      OpStore %188 %225 
                                       f32_4 %226 = OpLoad %9 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                         f32 %228 = OpLoad %188 
                                       f32_3 %229 = OpCompositeConstruct %228 %228 %228 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_4 %231 = OpLoad %9 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %9 %232 
                                       f32_3 %233 = OpLoad %12 
                                       f32_4 %234 = OpVectorShuffle %233 %233 1 1 1 1 
                                Input f32_4* %236 = OpAccessChain %235 %22 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpFMul %234 %237 
                                                      OpStore %133 %238 
                                Input f32_4* %239 = OpAccessChain %235 %30 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpLoad %12 
                                       f32_4 %242 = OpVectorShuffle %241 %241 0 0 0 0 
                                       f32_4 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %133 
                                       f32_4 %245 = OpFAdd %243 %244 
                                                      OpStore %133 %245 
                                Input f32_4* %246 = OpAccessChain %235 %42 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpLoad %12 
                                       f32_4 %249 = OpVectorShuffle %248 %248 2 2 2 2 
                                       f32_4 %250 = OpFMul %247 %249 
                                       f32_4 %251 = OpLoad %133 
                                       f32_4 %252 = OpFAdd %250 %251 
                                                      OpStore %133 %252 
                                       f32_4 %253 = OpLoad %9 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                Uniform f32* %256 = OpAccessChain %62 %255 
                                         f32 %257 = OpLoad %256 
                                Uniform f32* %258 = OpAccessChain %62 %255 
                                         f32 %259 = OpLoad %258 
                                Uniform f32* %260 = OpAccessChain %62 %255 
                                         f32 %261 = OpLoad %260 
                                       f32_3 %262 = OpCompositeConstruct %257 %259 %261 
                                         f32 %263 = OpCompositeExtract %262 0 
                                         f32 %264 = OpCompositeExtract %262 1 
                                         f32 %265 = OpCompositeExtract %262 2 
                                       f32_3 %266 = OpCompositeConstruct %263 %264 %265 
                                       f32_3 %267 = OpFMul %254 %266 
                                       f32_4 %268 = OpLoad %133 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFAdd %267 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_4 %274 = OpVectorShuffle %273 %273 1 1 1 1 
                              Uniform f32_4* %275 = OpAccessChain %62 %22 %22 
                                       f32_4 %276 = OpLoad %275 
                                       f32_4 %277 = OpFMul %274 %276 
                                                      OpStore %164 %277 
                              Uniform f32_4* %278 = OpAccessChain %62 %22 %30 
                                       f32_4 %279 = OpLoad %278 
                                       f32_4 %280 = OpLoad %9 
                                       f32_4 %281 = OpVectorShuffle %280 %280 0 0 0 0 
                                       f32_4 %282 = OpFMul %279 %281 
                                       f32_4 %283 = OpLoad %164 
                                       f32_4 %284 = OpFAdd %282 %283 
                                                      OpStore %164 %284 
                              Uniform f32_4* %285 = OpAccessChain %62 %22 %42 
                                       f32_4 %286 = OpLoad %285 
                                       f32_4 %287 = OpLoad %9 
                                       f32_4 %288 = OpVectorShuffle %287 %287 2 2 2 2 
                                       f32_4 %289 = OpFMul %286 %288 
                                       f32_4 %290 = OpLoad %164 
                                       f32_4 %291 = OpFAdd %289 %290 
                                                      OpStore %9 %291 
                                       f32_4 %292 = OpLoad %9 
                              Uniform f32_4* %294 = OpAccessChain %62 %22 %293 
                                       f32_4 %295 = OpLoad %294 
                                       f32_4 %296 = OpFAdd %292 %295 
                                                      OpStore %164 %296 
                              Uniform f32_4* %298 = OpAccessChain %62 %22 %293 
                                       f32_4 %299 = OpLoad %298 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_4 %301 = OpLoad %133 
                                       f32_3 %302 = OpVectorShuffle %301 %301 3 3 3 
                                       f32_3 %303 = OpFMul %300 %302 
                                       f32_4 %304 = OpLoad %9 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_3 %306 = OpFAdd %303 %305 
                                                      OpStore %297 %306 
                                       f32_4 %307 = OpLoad %164 
                                       f32_4 %308 = OpVectorShuffle %307 %307 1 1 1 1 
                              Uniform f32_4* %309 = OpAccessChain %62 %293 %22 
                                       f32_4 %310 = OpLoad %309 
                                       f32_4 %311 = OpFMul %308 %310 
                                                      OpStore %9 %311 
                              Uniform f32_4* %312 = OpAccessChain %62 %293 %30 
                                       f32_4 %313 = OpLoad %312 
                                       f32_4 %314 = OpLoad %164 
                                       f32_4 %315 = OpVectorShuffle %314 %314 0 0 0 0 
                                       f32_4 %316 = OpFMul %313 %315 
                                       f32_4 %317 = OpLoad %9 
                                       f32_4 %318 = OpFAdd %316 %317 
                                                      OpStore %9 %318 
                              Uniform f32_4* %319 = OpAccessChain %62 %293 %42 
                                       f32_4 %320 = OpLoad %319 
                                       f32_4 %321 = OpLoad %164 
                                       f32_4 %322 = OpVectorShuffle %321 %321 2 2 2 2 
                                       f32_4 %323 = OpFMul %320 %322 
                                       f32_4 %324 = OpLoad %9 
                                       f32_4 %325 = OpFAdd %323 %324 
                                                      OpStore %9 %325 
                              Uniform f32_4* %330 = OpAccessChain %62 %293 %293 
                                       f32_4 %331 = OpLoad %330 
                                       f32_4 %332 = OpLoad %164 
                                       f32_4 %333 = OpVectorShuffle %332 %332 3 3 3 3 
                                       f32_4 %334 = OpFMul %331 %333 
                                       f32_4 %335 = OpLoad %9 
                                       f32_4 %336 = OpFAdd %334 %335 
                               Output f32_4* %338 = OpAccessChain %329 %30 
                                                      OpStore %338 %336 
                                 Output f32* %340 = OpAccessChain %329 %30 %186 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFNegate %341 
                                 Output f32* %343 = OpAccessChain %329 %30 %186 
                                                      OpStore %343 %342 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"#ifdef VERTEX
#version 410
#extension GL_ARB_explicit_attrib_location : require

in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
in  vec4 in_TEXCOORD3;
in  vec4 in_COLOR0;
layout(location = 0) out vec4 vs_INTERNALTESSPOS0;
layout(location = 1) out vec4 vs_TANGENT0;
layout(location = 2) out vec3 vs_NORMAL0;
layout(location = 3) out vec4 vs_TEXCOORD0;
layout(location = 4) out vec4 vs_TEXCOORD1;
layout(location = 5) out vec4 vs_TEXCOORD2;
layout(location = 6) out vec4 vs_TEXCOORD3;
layout(location = 7) out vec4 vs_COLOR0;
void main()
{
    vs_INTERNALTESSPOS0 = in_POSITION0;
    vs_TANGENT0 = in_TANGENT0;
    vs_NORMAL0.xyz = in_NORMAL0.xyz;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD3;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Y_Mask;
uniform 	float _FresnelBias;
uniform 	float _FresnelScale;
uniform 	float _FresnelPower;
uniform 	float _Alpha;
UNITY_LOCATION(0) uniform  sampler2D _LightTexture0;
layout(location = 0) in  vec3 ds_TEXCOORD0;
layout(location = 1) in  vec3 ds_TEXCOORD1;
layout(location = 2) in  float ds_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat5;
float u_xlat12;
void main()
{
    u_xlat0.xy = ds_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * ds_TEXCOORD1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * ds_TEXCOORD1.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat12 = dot(ds_TEXCOORD0.xyz, ds_TEXCOORD0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * ds_TEXCOORD0.xyz;
    u_xlat2.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat5 = abs(u_xlat12) + u_xlat1.x;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = log2(u_xlat12);
    u_xlat12 = u_xlat12 * _FresnelPower;
    u_xlat12 = exp2(u_xlat12);
    u_xlat12 = _FresnelScale * u_xlat12 + _FresnelBias;
    u_xlat5 = u_xlat5 + 9.99999975e-06;
    u_xlat5 = 0.5 / u_xlat5;
    u_xlat5 = u_xlat5 * 0.999999881;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat5 = u_xlat1.x * u_xlat1.x;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * 0.959999979 + 0.0399999991;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = ds_TEXCOORD3 * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat0.x = (-ds_TEXCOORD0.y) + _Y_Mask;
    u_xlat0.x = abs(u_xlat0.x) + (-_Y_Mask);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    SV_Target0.w = u_xlat0.x * _Alpha;
    return;
}

#endif
#ifdef HULL
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(vertices=3) out;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	float _EdgeLength;
layout(location = 0) in vec4 vs_INTERNALTESSPOS0[];
layout(location = 0) out vec4 hs_INTERNALTESSPOS0[];
layout(location = 1) in vec4 vs_TANGENT0[];
layout(location = 1) out vec4 hs_TANGENT0[];
layout(location = 2) in vec3 vs_NORMAL0[];
layout(location = 2) out vec3 hs_NORMAL0[];
layout(location = 3) in vec4 vs_TEXCOORD0[];
layout(location = 3) out vec4 hs_TEXCOORD0[];
layout(location = 4) in vec4 vs_TEXCOORD1[];
layout(location = 4) out vec4 hs_TEXCOORD1[];
layout(location = 5) in vec4 vs_TEXCOORD2[];
layout(location = 5) out vec4 hs_TEXCOORD2[];
layout(location = 6) in vec4 vs_TEXCOORD3[];
layout(location = 6) out vec4 hs_TEXCOORD3[];
layout(location = 7) in vec4 vs_COLOR0[];
layout(location = 7) out vec4 hs_COLOR0[];
void passthrough_ctrl_points()
{
    hs_INTERNALTESSPOS0[gl_InvocationID] = vs_INTERNALTESSPOS0[gl_InvocationID];
    hs_TANGENT0[gl_InvocationID] = vs_TANGENT0[gl_InvocationID];
    hs_NORMAL0[gl_InvocationID] = vs_NORMAL0[gl_InvocationID];
    hs_TEXCOORD0[gl_InvocationID] = vs_TEXCOORD0[gl_InvocationID];
    hs_TEXCOORD1[gl_InvocationID] = vs_TEXCOORD1[gl_InvocationID];
    hs_TEXCOORD2[gl_InvocationID] = vs_TEXCOORD2[gl_InvocationID];
    hs_TEXCOORD3[gl_InvocationID] = vs_TEXCOORD3[gl_InvocationID];
    hs_COLOR0[gl_InvocationID] = vs_COLOR0[gl_InvocationID];
}
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
float u_xlat13;
void fork_phase2(int phaseInstanceID)
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[1].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[1].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[2].www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _EdgeLength;
    u_xlat2.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _ScreenParams.y;
    u_xlat12 = u_xlat13 / u_xlat12;
    gl_TessLevelOuter[0] = max(u_xlat12, 1.0);
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[0].www + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _ScreenParams.y;
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _EdgeLength;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    gl_TessLevelOuter[1] = max(u_xlat12, 1.0);
    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _ScreenParams.y;
    u_xlat4.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _EdgeLength;
    u_xlat0.x = u_xlat0.x / u_xlat4.x;
    gl_TessLevelOuter[2] = max(u_xlat0.x, 1.0);
}
void join_phase3(int phaseInstanceID)
{
    u_xlat0.x = gl_TessLevelOuter[2] + gl_TessLevelOuter[2];
    u_xlat0.x = u_xlat0.x + gl_TessLevelOuter[2];
    gl_TessLevelInner[0] = u_xlat0.x * 0.333333343;
}
void main()
{
    passthrough_ctrl_points();
    barrier();
    if (gl_InvocationID == 0)
    {
        fork_phase2(0);
        join_phase3(0);
    }
}

#endif
#ifdef DOMAIN
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(ccw) in;
layout(fractional_odd_spacing) in;
layout(triangles) in;
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _u;
uniform 	float _v;
uniform 	vec4 _Flamenoise_ST;
uniform 	float _Y_Mask;
uniform 	float _FlameHeight;
UNITY_LOCATION(1) uniform  sampler2D _FlameWave;
UNITY_LOCATION(2) uniform  sampler2D _Flamenoise;
layout(location = 0) in  vec4 hs_INTERNALTESSPOS0 [];
layout(location = 2) in  vec3 hs_NORMAL0 [];
layout(location = 3) in  vec4 hs_TEXCOORD0 [];
layout(location = 0) out vec3 ds_TEXCOORD0;
layout(location = 1) out vec3 ds_TEXCOORD1;
layout(location = 3) out vec2 ds_TEXCOORD2;
layout(location = 2) out float ds_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = gl_TessCoord.yy * hs_TEXCOORD0[1].xy;
    u_xlat0.xy = hs_TEXCOORD0[0].xy * gl_TessCoord.xx + u_xlat0.xy;
    u_xlat0.xy = hs_TEXCOORD0[2].xy * gl_TessCoord.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _Flamenoise_ST.xy + _Flamenoise_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_u, _v) + u_xlat0.xy;
    u_xlat8 = textureLod(_FlameWave, u_xlat0.xy, 0.0).x;
    u_xlat0.x = textureLod(_Flamenoise, u_xlat0.xy, 0.0).x;
    u_xlat0.x = u_xlat0.x * u_xlat8;
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat1.xyz = gl_TessCoord.yyy * hs_NORMAL0[1].xyz;
    u_xlat1.xyz = hs_NORMAL0[0].xyz * gl_TessCoord.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hs_NORMAL0[2].xyz * gl_TessCoord.zzz + u_xlat1.xyz;
    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.x = (-u_xlat2.y) * u_xlat12 + _Y_Mask;
    ds_TEXCOORD0.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = abs(u_xlat1.x) + (-_Y_Mask);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
    u_xlat1 = gl_TessCoord.yyyy * hs_INTERNALTESSPOS0[1];
    u_xlat1 = hs_INTERNALTESSPOS0[0] * gl_TessCoord.xxxx + u_xlat1;
    u_xlat1 = hs_INTERNALTESSPOS0[2] * gl_TessCoord.zzzz + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_FlameHeight, _FlameHeight, _FlameHeight)) + u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    ds_TEXCOORD3 = u_xlat2.z;
    ds_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
    ds_TEXCOORD2.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 38
; Schema: 0
                               OpCapability Shader 
                        %1 = OpExtInstImport "GLSL.std.450" 
                               OpMemoryModel Logical GLSL450 
                               OpEntryPoint Vertex %4 "main" %9 %11 %13 %14 %18 %20 %22 %23 %25 %26 %28 %29 %31 %32 %34 %35 
                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                               OpDecorate %9 Location 9 
                               OpDecorate %11 Location 11 
                               OpDecorate %13 Location 13 
                               OpDecorate %14 Location 14 
                               OpDecorate %18 Location 18 
                               OpDecorate %20 Location 20 
                               OpDecorate vs_TEXCOORD0 Location 22 
                               OpDecorate %23 Location 23 
                               OpDecorate vs_TEXCOORD1 Location 25 
                               OpDecorate %26 Location 26 
                               OpDecorate vs_TEXCOORD2 Location 28 
                               OpDecorate %29 Location 29 
                               OpDecorate vs_TEXCOORD3 Location 31 
                               OpDecorate %32 Location 32 
                               OpDecorate %34 Location 34 
                               OpDecorate %35 Location 35 
                        %2 = OpTypeVoid 
                        %3 = OpTypeFunction %2 
                        %6 = OpTypeFloat 32 
                        %7 = OpTypeVector %6 4 
                        %8 = OpTypePointer Output %7 
          Output f32_4* %9 = OpVariable Output 
                       %10 = OpTypePointer Input %7 
          Input f32_4* %11 = OpVariable Input 
         Output f32_4* %13 = OpVariable Output 
          Input f32_4* %14 = OpVariable Input 
                       %16 = OpTypeVector %6 3 
                       %17 = OpTypePointer Output %16 
         Output f32_3* %18 = OpVariable Output 
                       %19 = OpTypePointer Input %16 
          Input f32_3* %20 = OpVariable Input 
Output f32_4* vs_TEXCOORD0 = OpVariable Output 
          Input f32_4* %23 = OpVariable Input 
Output f32_4* vs_TEXCOORD1 = OpVariable Output 
          Input f32_4* %26 = OpVariable Input 
Output f32_4* vs_TEXCOORD2 = OpVariable Output 
          Input f32_4* %29 = OpVariable Input 
Output f32_4* vs_TEXCOORD3 = OpVariable Output 
          Input f32_4* %32 = OpVariable Input 
         Output f32_4* %34 = OpVariable Output 
          Input f32_4* %35 = OpVariable Input 
                   void %4 = OpFunction None %3 
                        %5 = OpLabel 
                 f32_4 %12 = OpLoad %11 
                               OpStore %9 %12 
                 f32_4 %15 = OpLoad %14 
                               OpStore %13 %15 
                 f32_3 %21 = OpLoad %20 
                               OpStore %18 %21 
                 f32_4 %24 = OpLoad %23 
                               OpStore vs_TEXCOORD0 %24 
                 f32_4 %27 = OpLoad %26 
                               OpStore vs_TEXCOORD1 %27 
                 f32_4 %30 = OpLoad %29 
                               OpStore vs_TEXCOORD2 %30 
                 f32_4 %33 = OpLoad %32 
                               OpStore vs_TEXCOORD3 %33 
                 f32_4 %36 = OpLoad %35 
                               OpStore %34 %36 
                               OpReturn
                               OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 330
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %91 %247 %284 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %67 DescriptorSet 67 
                                                      OpDecorate %67 Binding 67 
                                                      OpDecorate %71 DescriptorSet 71 
                                                      OpDecorate %71 Binding 71 
                                                      OpDecorate %91 Location 91 
                                                      OpDecorate %247 Location 247 
                                                      OpDecorate %284 Location 284 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeVector %6 4 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %15 %17 
                                              %19 = OpTypeStruct %7 %15 %15 %15 %15 %18 %6 %6 %6 %6 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32; f32; f32; f32; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 5 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %15 
                                          i32 %32 = OpConstant 0 
                                          i32 %44 = OpConstant 2 
                                          i32 %58 = OpConstant 3 
                                              %65 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %66 = OpTypePointer UniformConstant %65 
         UniformConstant read_only Texture2D* %67 = OpVariable UniformConstant 
                                              %69 = OpTypeSampler 
                                              %70 = OpTypePointer UniformConstant %69 
                     UniformConstant sampler* %71 = OpVariable UniformConstant 
                                              %73 = OpTypeSampledImage %65 
                                          u32 %78 = OpConstant 3 
                                          u32 %80 = OpConstant 0 
                                              %81 = OpTypePointer Private %6 
                                          i32 %85 = OpConstant 4 
                                 Private f32* %90 = OpVariable Private 
                                 Input f32_3* %91 = OpVariable Input 
                               Private f32_3* %97 = OpVariable Private 
                              Private f32_3* %102 = OpVariable Private 
                                             %105 = OpTypePointer Uniform %7 
                              Private f32_3* %114 = OpVariable Private 
                                         f32 %138 = OpConstant 3.674022E-40 
                                         f32 %139 = OpConstant 3.674022E-40 
                                Private f32* %142 = OpVariable Private 
                                         i32 %154 = OpConstant 9 
                                             %155 = OpTypePointer Uniform %6 
                                         i32 %161 = OpConstant 8 
                                         i32 %166 = OpConstant 7 
                                         f32 %171 = OpConstant 3.674022E-40 
                                         f32 %173 = OpConstant 3.674022E-40 
                                         f32 %183 = OpConstant 3.674022E-40 
                                         f32 %196 = OpConstant 3.674022E-40 
                                         f32 %237 = OpConstant 3.674022E-40 
                                         f32 %239 = OpConstant 3.674022E-40 
                                             %246 = OpTypePointer Input %6 
                                  Input f32* %247 = OpVariable Input 
                                         u32 %249 = OpConstant 1 
                                         u32 %261 = OpConstant 2 
                                             %283 = OpTypePointer Output %15 
                               Output f32_4* %284 = OpVariable Output 
                                         i32 %294 = OpConstant 6 
                                         i32 %323 = OpConstant 10 
                                             %327 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                        f32_2 %29 = OpFMul %14 %28 
                                        f32_3 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %29 3 4 2 
                                                      OpStore %9 %31 
                               Uniform f32_4* %33 = OpAccessChain %21 %23 %32 
                                        f32_4 %34 = OpLoad %33 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                                        f32_3 %36 = OpLoad %11 
                                        f32_2 %37 = OpVectorShuffle %36 %36 0 0 
                                        f32_2 %38 = OpFMul %35 %37 
                                        f32_3 %39 = OpLoad %9 
                                        f32_2 %40 = OpVectorShuffle %39 %39 0 1 
                                        f32_2 %41 = OpFAdd %38 %40 
                                        f32_3 %42 = OpLoad %9 
                                        f32_3 %43 = OpVectorShuffle %42 %41 3 4 2 
                                                      OpStore %9 %43 
                               Uniform f32_4* %45 = OpAccessChain %21 %23 %44 
                                        f32_4 %46 = OpLoad %45 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_3 %48 = OpLoad %11 
                                        f32_2 %49 = OpVectorShuffle %48 %48 2 2 
                                        f32_2 %50 = OpFMul %47 %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                        f32_2 %53 = OpFAdd %50 %52 
                                        f32_3 %54 = OpLoad %9 
                                        f32_3 %55 = OpVectorShuffle %54 %53 3 4 2 
                                                      OpStore %9 %55 
                                        f32_3 %56 = OpLoad %9 
                                        f32_2 %57 = OpVectorShuffle %56 %56 0 1 
                               Uniform f32_4* %59 = OpAccessChain %21 %23 %58 
                                        f32_4 %60 = OpLoad %59 
                                        f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                        f32_2 %62 = OpFAdd %57 %61 
                                        f32_3 %63 = OpLoad %9 
                                        f32_3 %64 = OpVectorShuffle %63 %62 3 4 2 
                                                      OpStore %9 %64 
                          read_only Texture2D %68 = OpLoad %67 
                                      sampler %72 = OpLoad %71 
                   read_only Texture2DSampled %74 = OpSampledImage %68 %72 
                                        f32_3 %75 = OpLoad %9 
                                        f32_2 %76 = OpVectorShuffle %75 %75 0 1 
                                        f32_4 %77 = OpImageSampleImplicitLod %74 %76 
                                          f32 %79 = OpCompositeExtract %77 3 
                                 Private f32* %82 = OpAccessChain %9 %80 
                                                      OpStore %82 %79 
                                        f32_3 %83 = OpLoad %9 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 0 0 
                               Uniform f32_4* %86 = OpAccessChain %21 %85 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpFMul %84 %88 
                                                      OpStore %9 %89 
                                        f32_3 %92 = OpLoad %91 
                                        f32_3 %93 = OpLoad %91 
                                          f32 %94 = OpDot %92 %93 
                                                      OpStore %90 %94 
                                          f32 %95 = OpLoad %90 
                                          f32 %96 = OpExtInst %1 32 %95 
                                                      OpStore %90 %96 
                                          f32 %98 = OpLoad %90 
                                        f32_3 %99 = OpCompositeConstruct %98 %98 %98 
                                       f32_3 %100 = OpLoad %91 
                                       f32_3 %101 = OpFMul %99 %100 
                                                      OpStore %97 %101 
                                       f32_3 %103 = OpLoad %11 
                                       f32_3 %104 = OpFNegate %103 
                              Uniform f32_3* %106 = OpAccessChain %21 %32 
                                       f32_3 %107 = OpLoad %106 
                                       f32_3 %108 = OpFAdd %104 %107 
                                                      OpStore %102 %108 
                                       f32_3 %109 = OpLoad %102 
                                       f32_3 %110 = OpLoad %102 
                                         f32 %111 = OpDot %109 %110 
                                                      OpStore %90 %111 
                                         f32 %112 = OpLoad %90 
                                         f32 %113 = OpExtInst %1 32 %112 
                                                      OpStore %90 %113 
                                         f32 %115 = OpLoad %90 
                                       f32_3 %116 = OpCompositeConstruct %115 %115 %115 
                                       f32_3 %117 = OpLoad %102 
                                       f32_3 %118 = OpFMul %116 %117 
                                                      OpStore %114 %118 
                                       f32_3 %119 = OpLoad %102 
                                         f32 %120 = OpLoad %90 
                                       f32_3 %121 = OpCompositeConstruct %120 %120 %120 
                                       f32_3 %122 = OpFMul %119 %121 
                              Uniform f32_4* %123 = OpAccessChain %21 %44 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFAdd %122 %125 
                                                      OpStore %102 %126 
                                       f32_3 %127 = OpLoad %97 
                                       f32_3 %128 = OpLoad %114 
                                         f32 %129 = OpDot %127 %128 
                                                      OpStore %90 %129 
                                       f32_3 %130 = OpLoad %97 
                              Uniform f32_4* %131 = OpAccessChain %21 %44 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %130 %133 
                                Private f32* %135 = OpAccessChain %97 %80 
                                                      OpStore %135 %134 
                                Private f32* %136 = OpAccessChain %97 %80 
                                         f32 %137 = OpLoad %136 
                                         f32 %140 = OpExtInst %1 43 %137 %138 %139 
                                Private f32* %141 = OpAccessChain %97 %80 
                                                      OpStore %141 %140 
                                         f32 %143 = OpLoad %90 
                                         f32 %144 = OpExtInst %1 4 %143 
                                Private f32* %145 = OpAccessChain %97 %80 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFAdd %144 %146 
                                                      OpStore %142 %147 
                                         f32 %148 = OpLoad %90 
                                         f32 %149 = OpFNegate %148 
                                         f32 %150 = OpFAdd %149 %139 
                                                      OpStore %90 %150 
                                         f32 %151 = OpLoad %90 
                                         f32 %152 = OpExtInst %1 30 %151 
                                                      OpStore %90 %152 
                                         f32 %153 = OpLoad %90 
                                Uniform f32* %156 = OpAccessChain %21 %154 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFMul %153 %157 
                                                      OpStore %90 %158 
                                         f32 %159 = OpLoad %90 
                                         f32 %160 = OpExtInst %1 29 %159 
                                                      OpStore %90 %160 
                                Uniform f32* %162 = OpAccessChain %21 %161 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpLoad %90 
                                         f32 %165 = OpFMul %163 %164 
                                Uniform f32* %167 = OpAccessChain %21 %166 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFAdd %165 %168 
                                                      OpStore %90 %169 
                                         f32 %170 = OpLoad %142 
                                         f32 %172 = OpFAdd %170 %171 
                                                      OpStore %142 %172 
                                         f32 %174 = OpLoad %142 
                                         f32 %175 = OpFDiv %173 %174 
                                                      OpStore %142 %175 
                                Private f32* %176 = OpAccessChain %97 %80 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpLoad %142 
                                         f32 %179 = OpFMul %177 %178 
                                Private f32* %180 = OpAccessChain %97 %80 
                                                      OpStore %180 %179 
                                Private f32* %181 = OpAccessChain %97 %80 
                                         f32 %182 = OpLoad %181 
                                         f32 %184 = OpFMul %182 %183 
                                Private f32* %185 = OpAccessChain %97 %80 
                                                      OpStore %185 %184 
                                       f32_3 %186 = OpLoad %9 
                                       f32_3 %187 = OpLoad %97 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 0 0 
                                       f32_3 %189 = OpFMul %186 %188 
                                                      OpStore %9 %189 
                                       f32_3 %190 = OpLoad %102 
                                       f32_3 %191 = OpLoad %102 
                                         f32 %192 = OpDot %190 %191 
                                Private f32* %193 = OpAccessChain %97 %80 
                                                      OpStore %193 %192 
                                Private f32* %194 = OpAccessChain %97 %80 
                                         f32 %195 = OpLoad %194 
                                         f32 %197 = OpExtInst %1 40 %195 %196 
                                Private f32* %198 = OpAccessChain %97 %80 
                                                      OpStore %198 %197 
                                Private f32* %199 = OpAccessChain %97 %80 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpExtInst %1 32 %200 
                                Private f32* %202 = OpAccessChain %97 %80 
                                                      OpStore %202 %201 
                                       f32_3 %203 = OpLoad %97 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 0 0 
                                       f32_3 %205 = OpLoad %102 
                                       f32_3 %206 = OpFMul %204 %205 
                                                      OpStore %97 %206 
                              Uniform f32_4* %207 = OpAccessChain %21 %44 
                                       f32_4 %208 = OpLoad %207 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %210 = OpLoad %97 
                                         f32 %211 = OpDot %209 %210 
                                Private f32* %212 = OpAccessChain %97 %80 
                                                      OpStore %212 %211 
                                Private f32* %213 = OpAccessChain %97 %80 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpExtInst %1 43 %214 %138 %139 
                                Private f32* %216 = OpAccessChain %97 %80 
                                                      OpStore %216 %215 
                                Private f32* %217 = OpAccessChain %97 %80 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                         f32 %220 = OpFAdd %219 %139 
                                Private f32* %221 = OpAccessChain %97 %80 
                                                      OpStore %221 %220 
                                Private f32* %222 = OpAccessChain %97 %80 
                                         f32 %223 = OpLoad %222 
                                Private f32* %224 = OpAccessChain %97 %80 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFMul %223 %225 
                                                      OpStore %142 %226 
                                         f32 %227 = OpLoad %142 
                                         f32 %228 = OpLoad %142 
                                         f32 %229 = OpFMul %227 %228 
                                                      OpStore %142 %229 
                                Private f32* %230 = OpAccessChain %97 %80 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpLoad %142 
                                         f32 %233 = OpFMul %231 %232 
                                Private f32* %234 = OpAccessChain %97 %80 
                                                      OpStore %234 %233 
                                Private f32* %235 = OpAccessChain %97 %80 
                                         f32 %236 = OpLoad %235 
                                         f32 %238 = OpFMul %236 %237 
                                         f32 %240 = OpFAdd %238 %239 
                                Private f32* %241 = OpAccessChain %97 %80 
                                                      OpStore %241 %240 
                                       f32_3 %242 = OpLoad %9 
                                       f32_3 %243 = OpLoad %97 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 0 0 
                                       f32_3 %245 = OpFMul %242 %244 
                                                      OpStore %9 %245 
                                         f32 %248 = OpLoad %247 
                                Uniform f32* %250 = OpAccessChain %21 %24 %249 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFDiv %248 %251 
                                Private f32* %253 = OpAccessChain %97 %80 
                                                      OpStore %253 %252 
                                Private f32* %254 = OpAccessChain %97 %80 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFNegate %255 
                                         f32 %257 = OpFAdd %256 %139 
                                Private f32* %258 = OpAccessChain %97 %80 
                                                      OpStore %258 %257 
                                Private f32* %259 = OpAccessChain %97 %80 
                                         f32 %260 = OpLoad %259 
                                Uniform f32* %262 = OpAccessChain %21 %24 %261 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpFMul %260 %263 
                                Private f32* %265 = OpAccessChain %97 %80 
                                                      OpStore %265 %264 
                                Private f32* %266 = OpAccessChain %97 %80 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpExtInst %1 40 %267 %138 
                                Private f32* %269 = OpAccessChain %97 %80 
                                                      OpStore %269 %268 
                                Private f32* %270 = OpAccessChain %97 %80 
                                         f32 %271 = OpLoad %270 
                                Uniform f32* %272 = OpAccessChain %21 %58 %261 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %271 %273 
                                Uniform f32* %275 = OpAccessChain %21 %58 %78 
                                         f32 %276 = OpLoad %275 
                                         f32 %277 = OpFAdd %274 %276 
                                Private f32* %278 = OpAccessChain %97 %80 
                                                      OpStore %278 %277 
                                Private f32* %279 = OpAccessChain %97 %80 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpExtInst %1 43 %280 %138 %139 
                                Private f32* %282 = OpAccessChain %97 %80 
                                                      OpStore %282 %281 
                                       f32_3 %285 = OpLoad %9 
                                       f32_3 %286 = OpLoad %97 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 0 0 
                                       f32_3 %288 = OpFMul %285 %287 
                                       f32_4 %289 = OpLoad %284 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 6 3 
                                                      OpStore %284 %290 
                                  Input f32* %291 = OpAccessChain %91 %249 
                                         f32 %292 = OpLoad %291 
                                         f32 %293 = OpFNegate %292 
                                Uniform f32* %295 = OpAccessChain %21 %294 
                                         f32 %296 = OpLoad %295 
                                         f32 %297 = OpFAdd %293 %296 
                                Private f32* %298 = OpAccessChain %9 %80 
                                                      OpStore %298 %297 
                                Private f32* %299 = OpAccessChain %9 %80 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpExtInst %1 4 %300 
                                Uniform f32* %302 = OpAccessChain %21 %294 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpFNegate %303 
                                         f32 %305 = OpFAdd %301 %304 
                                Private f32* %306 = OpAccessChain %9 %80 
                                                      OpStore %306 %305 
                                Private f32* %307 = OpAccessChain %9 %80 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpExtInst %1 43 %308 %138 %139 
                                Private f32* %310 = OpAccessChain %9 %80 
                                                      OpStore %310 %309 
                                Private f32* %311 = OpAccessChain %9 %80 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFNegate %312 
                                         f32 %314 = OpFAdd %313 %139 
                                Private f32* %315 = OpAccessChain %9 %80 
                                                      OpStore %315 %314 
                                Private f32* %316 = OpAccessChain %9 %80 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpLoad %90 
                                         f32 %319 = OpFMul %317 %318 
                                Private f32* %320 = OpAccessChain %9 %80 
                                                      OpStore %320 %319 
                                Private f32* %321 = OpAccessChain %9 %80 
                                         f32 %322 = OpLoad %321 
                                Uniform f32* %324 = OpAccessChain %21 %323 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFMul %322 %325 
                                 Output f32* %328 = OpAccessChain %284 %78 
                                                      OpStore %328 %326 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 387
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationControl %4 "main" %23 %25 %30 %37 %39 %47 %51 %58 %60 %65 %67 %72 %74 %79 %81 %86 %88 %219 %371 
                                                      OpExecutionMode %4 OutputVertices 4 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %25 BuiltIn WorkgroupSize 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %37 Location 37 
                                                      OpDecorate %39 Location 39 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %51 Location 51 
                                                      OpDecorate %58 Location 58 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate %65 Location 65 
                                                      OpDecorate vs_TEXCOORD1 Location 67 
                                                      OpDecorate %72 Location 72 
                                                      OpDecorate vs_TEXCOORD2 Location 74 
                                                      OpDecorate %79 Location 79 
                                                      OpDecorate vs_TEXCOORD3 Location 81 
                                                      OpDecorate %86 Location 86 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %96 ArrayStride 96 
                                                      OpMemberDecorate %97 0 Offset 97 
                                                      OpMemberDecorate %97 1 Offset 97 
                                                      OpMemberDecorate %97 2 Offset 97 
                                                      OpMemberDecorate %97 3 Offset 97 
                                                      OpDecorate %97 Block 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate %219 Patch 
                                                      OpDecorate %219 BuiltIn 219 
                                                      OpDecorate %371 Patch 
                                                      OpDecorate %371 BuiltIn 371 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %8 = OpTypeInt 32 1 
                                               %9 = OpTypePointer Function %8 
                                              %10 = OpTypeFunction %2 %9 
                                              %17 = OpTypeFloat 32 
                                              %18 = OpTypeVector %17 4 
                                              %19 = OpTypeInt 32 0 
                                          u32 %20 = OpConstant 3 
                                              %21 = OpTypeArray %18 %20 
                                              %22 = OpTypePointer Output %21 
                             Output f32_4[3]* %23 = OpVariable Output 
                                              %24 = OpTypePointer Input %8 
                                   Input i32* %25 = OpVariable Input 
                                          u32 %27 = OpConstant 32 
                                              %28 = OpTypeArray %18 %27 
                                              %29 = OpTypePointer Input %28 
                             Input f32_4[32]* %30 = OpVariable Input 
                                              %32 = OpTypePointer Input %18 
                                              %35 = OpTypePointer Output %18 
                             Output f32_4[3]* %37 = OpVariable Output 
                             Input f32_4[32]* %39 = OpVariable Input 
                                              %44 = OpTypeVector %17 3 
                                              %45 = OpTypeArray %44 %20 
                                              %46 = OpTypePointer Output %45 
                             Output f32_3[3]* %47 = OpVariable Output 
                                              %49 = OpTypeArray %44 %27 
                                              %50 = OpTypePointer Input %49 
                             Input f32_3[32]* %51 = OpVariable Input 
                                              %53 = OpTypePointer Input %44 
                                              %56 = OpTypePointer Output %44 
                             Output f32_4[3]* %58 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD0 = OpVariable Input 
                             Output f32_4[3]* %65 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD1 = OpVariable Input 
                             Output f32_4[3]* %72 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD2 = OpVariable Input 
                             Output f32_4[3]* %79 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD3 = OpVariable Input 
                             Output f32_4[3]* %86 = OpVariable Output 
                             Input f32_4[32]* %88 = OpVariable Input 
                                              %93 = OpTypePointer Private %44 
                               Private f32_3* %94 = OpVariable Private 
                                          u32 %95 = OpConstant 4 
                                              %96 = OpTypeArray %18 %95 
                                              %97 = OpTypeStruct %44 %18 %96 %17 
                                              %98 = OpTypePointer Uniform %97 
Uniform struct {f32_3; f32_4; f32_4[4]; f32;}* %99 = OpVariable Uniform 
                                         i32 %100 = OpConstant 2 
                                         i32 %101 = OpConstant 1 
                                             %102 = OpTypePointer Uniform %18 
                                         i32 %110 = OpConstant 0 
                                         i32 %129 = OpConstant 3 
                              Private f32_3* %139 = OpVariable Private 
                              Private f32_3* %174 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                             %182 = OpTypePointer Uniform %44 
                                             %187 = OpTypePointer Private %17 
                                Private f32* %188 = OpVariable Private 
                                             %195 = OpTypePointer Uniform %17 
                                Private f32* %203 = OpVariable Private 
                                         u32 %210 = OpConstant 1 
                                             %217 = OpTypeArray %17 %95 
                                             %218 = OpTypePointer Output %217 
                              Output f32[4]* %219 = OpVariable Output 
                                         f32 %221 = OpConstant 3.674022E-40 
                                             %223 = OpTypePointer Output %17 
                              Private f32_3* %259 = OpVariable Private 
                                         u32 %285 = OpConstant 0 
                              Private f32_3* %325 = OpVariable Private 
                                         u32 %368 = OpConstant 2 
                                             %369 = OpTypeArray %17 %368 
                                             %370 = OpTypePointer Output %369 
                              Output f32[2]* %371 = OpVariable Output 
                                         f32 %374 = OpConstant 3.674022E-40 
                                             %379 = OpTypeBool 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %383 = OpVariable Function 
                               Function i32* %385 = OpVariable Function 
                                        void %377 = OpFunctionCall %6 
                                                      OpControlBarrier 368 95 285 
                                         i32 %378 = OpLoad %25 
                                        bool %380 = OpIEqual %378 %110 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %380 %381 %382 
                                             %381 = OpLabel 
                                                      OpStore %383 %110 
                                        void %384 = OpFunctionCall %12 %383 
                                                      OpStore %385 %110 
                                        void %386 = OpFunctionCall %15 %385 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
                                          void %6 = OpFunction None %3 
                                               %7 = OpLabel 
                                          i32 %26 = OpLoad %25 
                                          i32 %31 = OpLoad %25 
                                 Input f32_4* %33 = OpAccessChain %30 %31 
                                        f32_4 %34 = OpLoad %33 
                                Output f32_4* %36 = OpAccessChain %23 %26 
                                                      OpStore %36 %34 
                                          i32 %38 = OpLoad %25 
                                          i32 %40 = OpLoad %25 
                                 Input f32_4* %41 = OpAccessChain %39 %40 
                                        f32_4 %42 = OpLoad %41 
                                Output f32_4* %43 = OpAccessChain %37 %38 
                                                      OpStore %43 %42 
                                          i32 %48 = OpLoad %25 
                                          i32 %52 = OpLoad %25 
                                 Input f32_3* %54 = OpAccessChain %51 %52 
                                        f32_3 %55 = OpLoad %54 
                                Output f32_3* %57 = OpAccessChain %47 %48 
                                                      OpStore %57 %55 
                                          i32 %59 = OpLoad %25 
                                          i32 %61 = OpLoad %25 
                                 Input f32_4* %62 = OpAccessChain vs_TEXCOORD0 %61 
                                        f32_4 %63 = OpLoad %62 
                                Output f32_4* %64 = OpAccessChain %58 %59 
                                                      OpStore %64 %63 
                                          i32 %66 = OpLoad %25 
                                          i32 %68 = OpLoad %25 
                                 Input f32_4* %69 = OpAccessChain vs_TEXCOORD1 %68 
                                        f32_4 %70 = OpLoad %69 
                                Output f32_4* %71 = OpAccessChain %65 %66 
                                                      OpStore %71 %70 
                                          i32 %73 = OpLoad %25 
                                          i32 %75 = OpLoad %25 
                                 Input f32_4* %76 = OpAccessChain vs_TEXCOORD2 %75 
                                        f32_4 %77 = OpLoad %76 
                                Output f32_4* %78 = OpAccessChain %72 %73 
                                                      OpStore %78 %77 
                                          i32 %80 = OpLoad %25 
                                          i32 %82 = OpLoad %25 
                                 Input f32_4* %83 = OpAccessChain vs_TEXCOORD3 %82 
                                        f32_4 %84 = OpLoad %83 
                                Output f32_4* %85 = OpAccessChain %79 %80 
                                                      OpStore %85 %84 
                                          i32 %87 = OpLoad %25 
                                          i32 %89 = OpLoad %25 
                                 Input f32_4* %90 = OpAccessChain %88 %89 
                                        f32_4 %91 = OpLoad %90 
                                Output f32_4* %92 = OpAccessChain %86 %87 
                                                      OpStore %92 %91 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %12 = OpFunction None %10 
                                Function i32* %11 = OpFunctionParameter 
                                              %13 = OpLabel 
                              Uniform f32_4* %103 = OpAccessChain %99 %100 %101 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                Input f32_4* %106 = OpAccessChain %30 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 1 1 1 
                                       f32_3 %109 = OpFMul %105 %108 
                                                      OpStore %94 %109 
                              Uniform f32_4* %111 = OpAccessChain %99 %100 %110 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                Input f32_4* %114 = OpAccessChain %30 %101 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %113 %116 
                                       f32_3 %118 = OpLoad %94 
                                       f32_3 %119 = OpFAdd %117 %118 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %99 %100 %100 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                Input f32_4* %123 = OpAccessChain %30 %101 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 2 2 2 
                                       f32_3 %126 = OpFMul %122 %125 
                                       f32_3 %127 = OpLoad %94 
                                       f32_3 %128 = OpFAdd %126 %127 
                                                      OpStore %94 %128 
                              Uniform f32_4* %130 = OpAccessChain %99 %100 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                Input f32_4* %133 = OpAccessChain %30 %101 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 3 3 3 
                                       f32_3 %136 = OpFMul %132 %135 
                                       f32_3 %137 = OpLoad %94 
                                       f32_3 %138 = OpFAdd %136 %137 
                                                      OpStore %94 %138 
                              Uniform f32_4* %140 = OpAccessChain %99 %100 %101 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                Input f32_4* %143 = OpAccessChain %30 %100 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 1 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                                      OpStore %139 %146 
                              Uniform f32_4* %147 = OpAccessChain %99 %100 %110 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                Input f32_4* %150 = OpAccessChain %30 %100 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 0 0 
                                       f32_3 %153 = OpFMul %149 %152 
                                       f32_3 %154 = OpLoad %139 
                                       f32_3 %155 = OpFAdd %153 %154 
                                                      OpStore %139 %155 
                              Uniform f32_4* %156 = OpAccessChain %99 %100 %100 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                Input f32_4* %159 = OpAccessChain %30 %100 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 2 2 2 
                                       f32_3 %162 = OpFMul %158 %161 
                                       f32_3 %163 = OpLoad %139 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %139 %164 
                              Uniform f32_4* %165 = OpAccessChain %99 %100 %129 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                Input f32_4* %168 = OpAccessChain %30 %100 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 3 3 3 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_3 %172 = OpLoad %139 
                                       f32_3 %173 = OpFAdd %171 %172 
                                                      OpStore %139 %173 
                                       f32_3 %175 = OpLoad %94 
                                       f32_3 %176 = OpLoad %139 
                                       f32_3 %177 = OpFAdd %175 %176 
                                                      OpStore %174 %177 
                                       f32_3 %178 = OpLoad %174 
                                       f32_3 %181 = OpFMul %178 %180 
                              Uniform f32_3* %183 = OpAccessChain %99 %110 
                                       f32_3 %184 = OpLoad %183 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpFAdd %181 %185 
                                                      OpStore %174 %186 
                                       f32_3 %189 = OpLoad %174 
                                       f32_3 %190 = OpLoad %174 
                                         f32 %191 = OpDot %189 %190 
                                                      OpStore %188 %191 
                                         f32 %192 = OpLoad %188 
                                         f32 %193 = OpExtInst %1 31 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                Uniform f32* %196 = OpAccessChain %99 %129 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %194 %197 
                                                      OpStore %188 %198 
                                       f32_3 %199 = OpLoad %94 
                                       f32_3 %200 = OpLoad %139 
                                       f32_3 %201 = OpFNegate %200 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore %174 %202 
                                       f32_3 %204 = OpLoad %174 
                                       f32_3 %205 = OpLoad %174 
                                         f32 %206 = OpDot %204 %205 
                                                      OpStore %203 %206 
                                         f32 %207 = OpLoad %203 
                                         f32 %208 = OpExtInst %1 31 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                Uniform f32* %211 = OpAccessChain %99 %101 %210 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %209 %212 
                                                      OpStore %203 %213 
                                         f32 %214 = OpLoad %203 
                                         f32 %215 = OpLoad %188 
                                         f32 %216 = OpFDiv %214 %215 
                                                      OpStore %188 %216 
                                         f32 %220 = OpLoad %188 
                                         f32 %222 = OpExtInst %1 40 %220 %221 
                                 Output f32* %224 = OpAccessChain %219 %110 
                                                      OpStore %224 %222 
                              Uniform f32_4* %225 = OpAccessChain %99 %100 %101 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                Input f32_4* %228 = OpAccessChain %30 %110 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 1 1 1 
                                       f32_3 %231 = OpFMul %227 %230 
                                                      OpStore %174 %231 
                              Uniform f32_4* %232 = OpAccessChain %99 %100 %110 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                Input f32_4* %235 = OpAccessChain %30 %110 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 0 0 
                                       f32_3 %238 = OpFMul %234 %237 
                                       f32_3 %239 = OpLoad %174 
                                       f32_3 %240 = OpFAdd %238 %239 
                                                      OpStore %174 %240 
                              Uniform f32_4* %241 = OpAccessChain %99 %100 %100 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                Input f32_4* %244 = OpAccessChain %30 %110 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 2 2 2 
                                       f32_3 %247 = OpFMul %243 %246 
                                       f32_3 %248 = OpLoad %174 
                                       f32_3 %249 = OpFAdd %247 %248 
                                                      OpStore %174 %249 
                              Uniform f32_4* %250 = OpAccessChain %99 %100 %129 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                Input f32_4* %253 = OpAccessChain %30 %110 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 3 3 3 
                                       f32_3 %256 = OpFMul %252 %255 
                                       f32_3 %257 = OpLoad %174 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore %174 %258 
                                       f32_3 %260 = OpLoad %139 
                                       f32_3 %261 = OpLoad %174 
                                       f32_3 %262 = OpFAdd %260 %261 
                                                      OpStore %259 %262 
                                       f32_3 %263 = OpLoad %139 
                                       f32_3 %264 = OpLoad %174 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_3 %266 = OpFAdd %263 %265 
                                                      OpStore %139 %266 
                                       f32_3 %267 = OpLoad %139 
                                       f32_3 %268 = OpLoad %139 
                                         f32 %269 = OpDot %267 %268 
                                                      OpStore %188 %269 
                                         f32 %270 = OpLoad %188 
                                         f32 %271 = OpExtInst %1 31 %270 
                                                      OpStore %188 %271 
                                         f32 %272 = OpLoad %188 
                                Uniform f32* %273 = OpAccessChain %99 %101 %210 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                                      OpStore %188 %275 
                                       f32_3 %276 = OpLoad %259 
                                       f32_3 %277 = OpFMul %276 %180 
                              Uniform f32_3* %278 = OpAccessChain %99 %110 
                                       f32_3 %279 = OpLoad %278 
                                       f32_3 %280 = OpFNegate %279 
                                       f32_3 %281 = OpFAdd %277 %280 
                                                      OpStore %139 %281 
                                       f32_3 %282 = OpLoad %139 
                                       f32_3 %283 = OpLoad %139 
                                         f32 %284 = OpDot %282 %283 
                                Private f32* %286 = OpAccessChain %139 %285 
                                                      OpStore %286 %284 
                                Private f32* %287 = OpAccessChain %139 %285 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 31 %288 
                                Private f32* %290 = OpAccessChain %139 %285 
                                                      OpStore %290 %289 
                                Private f32* %291 = OpAccessChain %139 %285 
                                         f32 %292 = OpLoad %291 
                                Uniform f32* %293 = OpAccessChain %99 %129 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFMul %292 %294 
                                Private f32* %296 = OpAccessChain %139 %285 
                                                      OpStore %296 %295 
                                         f32 %297 = OpLoad %188 
                                Private f32* %298 = OpAccessChain %139 %285 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFDiv %297 %299 
                                                      OpStore %188 %300 
                                         f32 %301 = OpLoad %188 
                                         f32 %302 = OpExtInst %1 40 %301 %221 
                                 Output f32* %303 = OpAccessChain %219 %101 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %94 
                                       f32_3 %305 = OpLoad %174 
                                       f32_3 %306 = OpFAdd %304 %305 
                                                      OpStore %139 %306 
                                       f32_3 %307 = OpLoad %94 
                                       f32_3 %308 = OpFNegate %307 
                                       f32_3 %309 = OpLoad %174 
                                       f32_3 %310 = OpFAdd %308 %309 
                                                      OpStore %94 %310 
                                       f32_3 %311 = OpLoad %94 
                                       f32_3 %312 = OpLoad %94 
                                         f32 %313 = OpDot %311 %312 
                                Private f32* %314 = OpAccessChain %94 %285 
                                                      OpStore %314 %313 
                                Private f32* %315 = OpAccessChain %94 %285 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpExtInst %1 31 %316 
                                Private f32* %318 = OpAccessChain %94 %285 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %94 %285 
                                         f32 %320 = OpLoad %319 
                                Uniform f32* %321 = OpAccessChain %99 %101 %210 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %320 %322 
                                Private f32* %324 = OpAccessChain %94 %285 
                                                      OpStore %324 %323 
                                       f32_3 %326 = OpLoad %139 
                                       f32_3 %327 = OpFMul %326 %180 
                              Uniform f32_3* %328 = OpAccessChain %99 %110 
                                       f32_3 %329 = OpLoad %328 
                                       f32_3 %330 = OpFNegate %329 
                                       f32_3 %331 = OpFAdd %327 %330 
                                                      OpStore %325 %331 
                                       f32_3 %332 = OpLoad %325 
                                       f32_3 %333 = OpLoad %325 
                                         f32 %334 = OpDot %332 %333 
                                Private f32* %335 = OpAccessChain %325 %285 
                                                      OpStore %335 %334 
                                Private f32* %336 = OpAccessChain %325 %285 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpExtInst %1 31 %337 
                                Private f32* %339 = OpAccessChain %325 %285 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %325 %285 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %99 %129 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFMul %341 %343 
                                Private f32* %345 = OpAccessChain %325 %285 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %94 %285 
                                         f32 %347 = OpLoad %346 
                                Private f32* %348 = OpAccessChain %325 %285 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFDiv %347 %349 
                                Private f32* %351 = OpAccessChain %94 %285 
                                                      OpStore %351 %350 
                                Private f32* %352 = OpAccessChain %94 %285 
                                         f32 %353 = OpLoad %352 
                                         f32 %354 = OpExtInst %1 40 %353 %221 
                                 Output f32* %355 = OpAccessChain %219 %100 
                                                      OpStore %355 %354 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %15 = OpFunction None %10 
                                Function i32* %14 = OpFunctionParameter 
                                              %16 = OpLabel 
                                 Output f32* %356 = OpAccessChain %219 %100 
                                         f32 %357 = OpLoad %356 
                                 Output f32* %358 = OpAccessChain %219 %100 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                Private f32* %361 = OpAccessChain %94 %285 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %94 %285 
                                         f32 %363 = OpLoad %362 
                                 Output f32* %364 = OpAccessChain %219 %100 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFAdd %363 %365 
                                Private f32* %367 = OpAccessChain %94 %285 
                                                      OpStore %367 %366 
                                Private f32* %372 = OpAccessChain %94 %285 
                                         f32 %373 = OpLoad %372 
                                         f32 %375 = OpFMul %373 %374 
                                 Output f32* %376 = OpAccessChain %371 %110 
                                                      OpStore %376 %375 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 400
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationEvaluation %4 "main" %12 %20 %139 %208 %236 %328 %333 %336 %385 
                                                      OpExecutionMode %4 Triangles 
                                                      OpExecutionMode %4 SpacingFractionalOdd 
                                                      OpExecutionMode %4 VertexOrderCw 
                                                      OpDecorate %12 BuiltIn TessLevelInner 
                                                      OpDecorate %20 Location 20 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpMemberDecorate %61 5 Offset 61 
                                                      OpMemberDecorate %61 6 Offset 61 
                                                      OpMemberDecorate %61 7 Offset 61 
                                                      OpMemberDecorate %61 8 Offset 61 
                                                      OpMemberDecorate %61 9 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %97 DescriptorSet 97 
                                                      OpDecorate %97 Binding 97 
                                                      OpDecorate %101 DescriptorSet 101 
                                                      OpDecorate %101 Binding 101 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %113 DescriptorSet 113 
                                                      OpDecorate %113 Binding 113 
                                                      OpDecorate %139 Location 139 
                                                      OpDecorate %208 Location 208 
                                                      OpDecorate %236 Location 236 
                                                      OpMemberDecorate %326 0 BuiltIn 326 
                                                      OpMemberDecorate %326 1 BuiltIn 326 
                                                      OpMemberDecorate %326 2 BuiltIn 326 
                                                      OpDecorate %326 Block 
                                                      OpDecorate %333 Location 333 
                                                      OpDecorate %336 Location 336 
                                                      OpDecorate %385 Location 385 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 32 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypePointer Input %18 
                             Input f32_4[32]* %20 = OpVariable Input 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Input %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %42 = OpConstant 2 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                              %60 = OpTypeArray %7 %56 
                                              %61 = OpTypeStruct %7 %57 %58 %59 %60 %6 %6 %7 %6 %6 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32; f32;}* %63 = OpVariable Uniform 
                                          i32 %64 = OpConstant 7 
                                              %65 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 5 
                                              %80 = OpTypePointer Uniform %6 
                                          i32 %83 = OpConstant 6 
                                              %93 = OpTypePointer Private %6 
                                 Private f32* %94 = OpVariable Private 
                                              %95 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %96 = OpTypePointer UniformConstant %95 
         UniformConstant read_only Texture2D* %97 = OpVariable UniformConstant 
                                              %99 = OpTypeSampler 
                                             %100 = OpTypePointer UniformConstant %99 
                    UniformConstant sampler* %101 = OpVariable UniformConstant 
                                             %103 = OpTypeSampledImage %95 
                                         f32 %107 = OpConstant 3.674022E-40 
                                         u32 %109 = OpConstant 0 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                    UniformConstant sampler* %113 = OpVariable UniformConstant 
                              Private f32_4* %134 = OpVariable Private 
                                             %137 = OpTypeArray %10 %17 
                                             %138 = OpTypePointer Input %137 
                            Input f32_3[32]* %139 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         u32 %179 = OpConstant 2 
                                         u32 %187 = OpConstant 1 
                                Private f32* %189 = OpVariable Private 
                                         i32 %202 = OpConstant 8 
                                             %207 = OpTypePointer Output %10 
                               Output f32_3* %208 = OpVariable Output 
                                         f32 %222 = OpConstant 3.674022E-40 
                            Input f32_4[32]* %236 = OpVariable Input 
                                         i32 %256 = OpConstant 9 
                                         i32 %294 = OpConstant 3 
                              Private f32_4* %298 = OpVariable Private 
                                             %325 = OpTypeArray %6 %187 
                                             %326 = OpTypeStruct %7 %6 %325 
                                             %327 = OpTypePointer Output %326 
        Output struct {f32_4; f32; f32[1];}* %328 = OpVariable Output 
                                             %330 = OpTypePointer Output %7 
                                             %332 = OpTypePointer Output %6 
                                 Output f32* %333 = OpVariable Output 
                               Output f32_3* %336 = OpVariable Output 
                                         i32 %355 = OpConstant 4 
                                             %384 = OpTypePointer Output %13 
                               Output f32_2* %385 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 1 1 
                                 Input f32_4* %24 = OpAccessChain %20 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                                        f32_2 %27 = OpFMul %15 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                                 Input f32_4* %31 = OpAccessChain %20 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_3 %34 = OpLoad %12 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 0 
                                        f32_2 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                                        f32_2 %39 = OpFAdd %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                 Input f32_4* %43 = OpAccessChain %20 %42 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_3 %46 = OpLoad %12 
                                        f32_2 %47 = OpVectorShuffle %46 %46 2 2 
                                        f32_2 %48 = OpFMul %45 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                                        f32_2 %51 = OpFAdd %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               Uniform f32_4* %66 = OpAccessChain %63 %64 
                                        f32_4 %67 = OpLoad %66 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                        f32_2 %69 = OpFMul %55 %68 
                               Uniform f32_4* %70 = OpAccessChain %63 %64 
                                        f32_4 %71 = OpLoad %70 
                                        f32_2 %72 = OpVectorShuffle %71 %71 2 3 
                                        f32_2 %73 = OpFAdd %69 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %73 4 5 2 3 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %63 %30 
                                        f32_4 %77 = OpLoad %76 
                                        f32_2 %78 = OpVectorShuffle %77 %77 1 1 
                                 Uniform f32* %81 = OpAccessChain %63 %79 
                                          f32 %82 = OpLoad %81 
                                 Uniform f32* %84 = OpAccessChain %63 %83 
                                          f32 %85 = OpLoad %84 
                                        f32_2 %86 = OpCompositeConstruct %82 %85 
                                        f32_2 %87 = OpFMul %78 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_2 %90 = OpFAdd %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 2 3 
                                                      OpStore %9 %92 
                          read_only Texture2D %98 = OpLoad %97 
                                     sampler %102 = OpLoad %101 
                  read_only Texture2DSampled %104 = OpSampledImage %98 %102 
                                       f32_4 %105 = OpLoad %9 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %108 = OpImageSampleExplicitLod %104 %106 Lod %7 
                                         f32 %110 = OpCompositeExtract %108 0 
                                                      OpStore %94 %110 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %114 = OpLoad %113 
                  read_only Texture2DSampled %115 = OpSampledImage %112 %114 
                                       f32_4 %116 = OpLoad %9 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpImageSampleExplicitLod %115 %117 Lod %7 
                                         f32 %119 = OpCompositeExtract %118 0 
                                Private f32* %120 = OpAccessChain %9 %109 
                                                      OpStore %120 %119 
                                Private f32* %121 = OpAccessChain %9 %109 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpLoad %94 
                                         f32 %124 = OpFMul %122 %123 
                                Private f32* %125 = OpAccessChain %9 %109 
                                                      OpStore %125 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                              Uniform f32_4* %128 = OpAccessChain %63 %42 %22 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %127 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %9 %133 
                                       f32_3 %135 = OpLoad %12 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                                Input f32_3* %140 = OpAccessChain %139 %22 
                                       f32_3 %141 = OpLoad %140 
                                       f32_3 %142 = OpFMul %136 %141 
                                       f32_4 %143 = OpLoad %134 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %134 %144 
                                Input f32_3* %145 = OpAccessChain %139 %30 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpLoad %12 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 0 0 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %134 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %149 %151 
                                       f32_4 %153 = OpLoad %134 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %134 %154 
                                Input f32_3* %155 = OpAccessChain %139 %42 
                                       f32_3 %156 = OpLoad %155 
                                       f32_3 %157 = OpLoad %12 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %134 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %134 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %134 %164 
                                       f32_4 %166 = OpLoad %134 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                              Uniform f32_4* %168 = OpAccessChain %63 %42 %30 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %167 %170 
                                Private f32* %172 = OpAccessChain %165 %109 
                                                      OpStore %172 %171 
                                       f32_4 %173 = OpLoad %134 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                              Uniform f32_4* %175 = OpAccessChain %63 %42 %42 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %165 %179 
                                                      OpStore %180 %178 
                                       f32_4 %181 = OpLoad %134 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                              Uniform f32_4* %183 = OpAccessChain %63 %42 %22 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %182 %185 
                                Private f32* %188 = OpAccessChain %165 %187 
                                                      OpStore %188 %186 
                                       f32_4 %190 = OpLoad %165 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %165 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %191 %193 
                                                      OpStore %189 %194 
                                         f32 %195 = OpLoad %189 
                                         f32 %196 = OpExtInst %1 32 %195 
                                                      OpStore %189 %196 
                                Private f32* %197 = OpAccessChain %165 %187 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFNegate %198 
                                         f32 %200 = OpLoad %189 
                                         f32 %201 = OpFMul %199 %200 
                                Uniform f32* %203 = OpAccessChain %63 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFAdd %201 %204 
                                Private f32* %206 = OpAccessChain %134 %109 
                                                      OpStore %206 %205 
                                         f32 %209 = OpLoad %189 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_4 %211 = OpLoad %165 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFMul %210 %212 
                                                      OpStore %208 %213 
                                Private f32* %214 = OpAccessChain %134 %109 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpExtInst %1 4 %215 
                                Uniform f32* %217 = OpAccessChain %63 %202 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                         f32 %220 = OpFAdd %216 %219 
                                                      OpStore %189 %220 
                                         f32 %221 = OpLoad %189 
                                         f32 %223 = OpExtInst %1 43 %221 %107 %222 
                                                      OpStore %189 %223 
                                         f32 %224 = OpLoad %189 
                                         f32 %225 = OpFNegate %224 
                                         f32 %226 = OpFAdd %225 %222 
                                                      OpStore %189 %226 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                         f32 %229 = OpLoad %189 
                                       f32_3 %230 = OpCompositeConstruct %229 %229 %229 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_3 %234 = OpLoad %12 
                                       f32_4 %235 = OpVectorShuffle %234 %234 1 1 1 1 
                                Input f32_4* %237 = OpAccessChain %236 %22 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpFMul %235 %238 
                                                      OpStore %134 %239 
                                Input f32_4* %240 = OpAccessChain %236 %30 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpLoad %12 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpFMul %241 %243 
                                       f32_4 %245 = OpLoad %134 
                                       f32_4 %246 = OpFAdd %244 %245 
                                                      OpStore %134 %246 
                                Input f32_4* %247 = OpAccessChain %236 %42 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpLoad %12 
                                       f32_4 %250 = OpVectorShuffle %249 %249 2 2 2 2 
                                       f32_4 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %134 
                                       f32_4 %253 = OpFAdd %251 %252 
                                                      OpStore %134 %253 
                                       f32_4 %254 = OpLoad %9 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                Uniform f32* %257 = OpAccessChain %63 %256 
                                         f32 %258 = OpLoad %257 
                                Uniform f32* %259 = OpAccessChain %63 %256 
                                         f32 %260 = OpLoad %259 
                                Uniform f32* %261 = OpAccessChain %63 %256 
                                         f32 %262 = OpLoad %261 
                                       f32_3 %263 = OpCompositeConstruct %258 %260 %262 
                                         f32 %264 = OpCompositeExtract %263 0 
                                         f32 %265 = OpCompositeExtract %263 1 
                                         f32 %266 = OpCompositeExtract %263 2 
                                       f32_3 %267 = OpCompositeConstruct %264 %265 %266 
                                       f32_3 %268 = OpFMul %255 %267 
                                       f32_4 %269 = OpLoad %134 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %9 %273 
                                       f32_4 %274 = OpLoad %9 
                                       f32_4 %275 = OpVectorShuffle %274 %274 1 1 1 1 
                              Uniform f32_4* %276 = OpAccessChain %63 %22 %22 
                                       f32_4 %277 = OpLoad %276 
                                       f32_4 %278 = OpFMul %275 %277 
                                                      OpStore %165 %278 
                              Uniform f32_4* %279 = OpAccessChain %63 %22 %30 
                                       f32_4 %280 = OpLoad %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %281 0 0 0 0 
                                       f32_4 %283 = OpFMul %280 %282 
                                       f32_4 %284 = OpLoad %165 
                                       f32_4 %285 = OpFAdd %283 %284 
                                                      OpStore %165 %285 
                              Uniform f32_4* %286 = OpAccessChain %63 %22 %42 
                                       f32_4 %287 = OpLoad %286 
                                       f32_4 %288 = OpLoad %9 
                                       f32_4 %289 = OpVectorShuffle %288 %288 2 2 2 2 
                                       f32_4 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %165 
                                       f32_4 %292 = OpFAdd %290 %291 
                                                      OpStore %9 %292 
                                       f32_4 %293 = OpLoad %9 
                              Uniform f32_4* %295 = OpAccessChain %63 %22 %294 
                                       f32_4 %296 = OpLoad %295 
                                       f32_4 %297 = OpFAdd %293 %296 
                                                      OpStore %165 %297 
                                       f32_4 %299 = OpLoad %165 
                                       f32_4 %300 = OpVectorShuffle %299 %299 1 1 1 1 
                              Uniform f32_4* %301 = OpAccessChain %63 %294 %22 
                                       f32_4 %302 = OpLoad %301 
                                       f32_4 %303 = OpFMul %300 %302 
                                                      OpStore %298 %303 
                              Uniform f32_4* %304 = OpAccessChain %63 %294 %30 
                                       f32_4 %305 = OpLoad %304 
                                       f32_4 %306 = OpLoad %165 
                                       f32_4 %307 = OpVectorShuffle %306 %306 0 0 0 0 
                                       f32_4 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %298 
                                       f32_4 %310 = OpFAdd %308 %309 
                                                      OpStore %298 %310 
                              Uniform f32_4* %311 = OpAccessChain %63 %294 %42 
                                       f32_4 %312 = OpLoad %311 
                                       f32_4 %313 = OpLoad %165 
                                       f32_4 %314 = OpVectorShuffle %313 %313 2 2 2 2 
                                       f32_4 %315 = OpFMul %312 %314 
                                       f32_4 %316 = OpLoad %298 
                                       f32_4 %317 = OpFAdd %315 %316 
                                                      OpStore %298 %317 
                              Uniform f32_4* %318 = OpAccessChain %63 %294 %294 
                                       f32_4 %319 = OpLoad %318 
                                       f32_4 %320 = OpLoad %165 
                                       f32_4 %321 = OpVectorShuffle %320 %320 3 3 3 3 
                                       f32_4 %322 = OpFMul %319 %321 
                                       f32_4 %323 = OpLoad %298 
                                       f32_4 %324 = OpFAdd %322 %323 
                                                      OpStore %165 %324 
                                       f32_4 %329 = OpLoad %165 
                               Output f32_4* %331 = OpAccessChain %328 %30 
                                                      OpStore %331 %329 
                                Private f32* %334 = OpAccessChain %165 %179 
                                         f32 %335 = OpLoad %334 
                                                      OpStore %333 %335 
                              Uniform f32_4* %337 = OpAccessChain %63 %22 %294 
                                       f32_4 %338 = OpLoad %337 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_4 %340 = OpLoad %134 
                                       f32_3 %341 = OpVectorShuffle %340 %340 3 3 3 
                                       f32_3 %342 = OpFMul %339 %341 
                                       f32_4 %343 = OpLoad %9 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFAdd %342 %344 
                                                      OpStore %336 %345 
                              Uniform f32_4* %346 = OpAccessChain %63 %22 %294 
                                       f32_4 %347 = OpLoad %346 
                                       f32_4 %348 = OpLoad %134 
                                       f32_4 %349 = OpVectorShuffle %348 %348 3 3 3 3 
                                       f32_4 %350 = OpFMul %347 %349 
                                       f32_4 %351 = OpLoad %9 
                                       f32_4 %352 = OpFAdd %350 %351 
                                                      OpStore %9 %352 
                                       f32_4 %353 = OpLoad %9 
                                       f32_2 %354 = OpVectorShuffle %353 %353 1 1 
                              Uniform f32_4* %356 = OpAccessChain %63 %355 %22 
                                       f32_4 %357 = OpLoad %356 
                                       f32_2 %358 = OpVectorShuffle %357 %357 0 1 
                                       f32_2 %359 = OpFMul %354 %358 
                                       f32_4 %360 = OpLoad %134 
                                       f32_4 %361 = OpVectorShuffle %360 %359 4 5 2 3 
                                                      OpStore %134 %361 
                              Uniform f32_4* %362 = OpAccessChain %63 %355 %30 
                                       f32_4 %363 = OpLoad %362 
                                       f32_2 %364 = OpVectorShuffle %363 %363 0 1 
                                       f32_4 %365 = OpLoad %9 
                                       f32_2 %366 = OpVectorShuffle %365 %365 0 0 
                                       f32_2 %367 = OpFMul %364 %366 
                                       f32_4 %368 = OpLoad %134 
                                       f32_2 %369 = OpVectorShuffle %368 %368 0 1 
                                       f32_2 %370 = OpFAdd %367 %369 
                                       f32_4 %371 = OpLoad %9 
                                       f32_4 %372 = OpVectorShuffle %371 %370 4 5 2 3 
                                                      OpStore %9 %372 
                              Uniform f32_4* %373 = OpAccessChain %63 %355 %42 
                                       f32_4 %374 = OpLoad %373 
                                       f32_2 %375 = OpVectorShuffle %374 %374 0 1 
                                       f32_4 %376 = OpLoad %9 
                                       f32_2 %377 = OpVectorShuffle %376 %376 2 2 
                                       f32_2 %378 = OpFMul %375 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_2 %380 = OpVectorShuffle %379 %379 0 1 
                                       f32_2 %381 = OpFAdd %378 %380 
                                       f32_4 %382 = OpLoad %9 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 2 3 
                                                      OpStore %9 %383 
                              Uniform f32_4* %386 = OpAccessChain %63 %355 %294 
                                       f32_4 %387 = OpLoad %386 
                                       f32_2 %388 = OpVectorShuffle %387 %387 0 1 
                                       f32_4 %389 = OpLoad %9 
                                       f32_2 %390 = OpVectorShuffle %389 %389 3 3 
                                       f32_2 %391 = OpFMul %388 %390 
                                       f32_4 %392 = OpLoad %9 
                                       f32_2 %393 = OpVectorShuffle %392 %392 0 1 
                                       f32_2 %394 = OpFAdd %391 %393 
                                                      OpStore %385 %394 
                                 Output f32* %395 = OpAccessChain %328 %30 %187 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpFNegate %396 
                                 Output f32* %398 = OpAccessChain %328 %30 %187 
                                                      OpStore %398 %397 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 410
#extension GL_ARB_explicit_attrib_location : require

in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
in  vec4 in_TEXCOORD3;
in  vec4 in_COLOR0;
layout(location = 0) out vec4 vs_INTERNALTESSPOS0;
layout(location = 1) out vec4 vs_TANGENT0;
layout(location = 2) out vec3 vs_NORMAL0;
layout(location = 3) out vec4 vs_TEXCOORD0;
layout(location = 4) out vec4 vs_TEXCOORD1;
layout(location = 5) out vec4 vs_TEXCOORD2;
layout(location = 6) out vec4 vs_TEXCOORD3;
layout(location = 7) out vec4 vs_COLOR0;
void main()
{
    vs_INTERNALTESSPOS0 = in_POSITION0;
    vs_TANGENT0 = in_TANGENT0;
    vs_NORMAL0.xyz = in_NORMAL0.xyz;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD3;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Y_Mask;
uniform 	float _FresnelBias;
uniform 	float _FresnelScale;
uniform 	float _FresnelPower;
uniform 	float _Alpha;
UNITY_LOCATION(0) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
layout(location = 0) in  vec3 ds_TEXCOORD0;
layout(location = 1) in  vec3 ds_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat3;
float u_xlat4;
float u_xlat6;
float u_xlat9;
float u_xlat10;
bool u_xlatb10;
void main()
{
    u_xlat0.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = max(u_xlat9, 0.00100000005);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat10 = u_xlat9 * u_xlat9;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat9 = u_xlat9 * u_xlat10;
    u_xlat9 = u_xlat9 * 0.959999979 + 0.0399999991;
    u_xlat10 = dot(ds_TEXCOORD0.xyz, ds_TEXCOORD0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat2.xyz = vec3(u_xlat10) * ds_TEXCOORD0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat3 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat6 = abs(u_xlat0.x) + u_xlat3;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = _FresnelScale * u_xlat0.x + _FresnelBias;
    u_xlat6 = u_xlat6 + 9.99999975e-06;
    u_xlat6 = 0.5 / u_xlat6;
    u_xlat6 = u_xlat6 * 0.999999881;
    u_xlat3 = u_xlat3 * u_xlat6;
    u_xlat1 = ds_TEXCOORD1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * ds_TEXCOORD1.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * ds_TEXCOORD1.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat6 = texture(_LightTexture0, u_xlat2.xy).w;
    u_xlatb10 = 0.0<u_xlat1.z;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = texture(_LightTextureB0, u_xlat1.xx).x;
    u_xlat4 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat6 = u_xlat6 * u_xlat4;
    u_xlat6 = u_xlat1.x * u_xlat6;
    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
    u_xlat1.xyz = vec3(u_xlat3) * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat3 = (-ds_TEXCOORD0.y) + _Y_Mask;
    u_xlat3 = abs(u_xlat3) + (-_Y_Mask);
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = (-u_xlat3) + 1.0;
    u_xlat0.x = u_xlat3 * u_xlat0.x;
    SV_Target0.w = u_xlat0.x * _Alpha;
    return;
}

#endif
#ifdef HULL
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(vertices=3) out;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	float _EdgeLength;
layout(location = 0) in vec4 vs_INTERNALTESSPOS0[];
layout(location = 0) out vec4 hs_INTERNALTESSPOS0[];
layout(location = 1) in vec4 vs_TANGENT0[];
layout(location = 1) out vec4 hs_TANGENT0[];
layout(location = 2) in vec3 vs_NORMAL0[];
layout(location = 2) out vec3 hs_NORMAL0[];
layout(location = 3) in vec4 vs_TEXCOORD0[];
layout(location = 3) out vec4 hs_TEXCOORD0[];
layout(location = 4) in vec4 vs_TEXCOORD1[];
layout(location = 4) out vec4 hs_TEXCOORD1[];
layout(location = 5) in vec4 vs_TEXCOORD2[];
layout(location = 5) out vec4 hs_TEXCOORD2[];
layout(location = 6) in vec4 vs_TEXCOORD3[];
layout(location = 6) out vec4 hs_TEXCOORD3[];
layout(location = 7) in vec4 vs_COLOR0[];
layout(location = 7) out vec4 hs_COLOR0[];
void passthrough_ctrl_points()
{
    hs_INTERNALTESSPOS0[gl_InvocationID] = vs_INTERNALTESSPOS0[gl_InvocationID];
    hs_TANGENT0[gl_InvocationID] = vs_TANGENT0[gl_InvocationID];
    hs_NORMAL0[gl_InvocationID] = vs_NORMAL0[gl_InvocationID];
    hs_TEXCOORD0[gl_InvocationID] = vs_TEXCOORD0[gl_InvocationID];
    hs_TEXCOORD1[gl_InvocationID] = vs_TEXCOORD1[gl_InvocationID];
    hs_TEXCOORD2[gl_InvocationID] = vs_TEXCOORD2[gl_InvocationID];
    hs_TEXCOORD3[gl_InvocationID] = vs_TEXCOORD3[gl_InvocationID];
    hs_COLOR0[gl_InvocationID] = vs_COLOR0[gl_InvocationID];
}
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
float u_xlat13;
void fork_phase2(int phaseInstanceID)
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[1].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[1].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[2].www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _EdgeLength;
    u_xlat2.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _ScreenParams.y;
    u_xlat12 = u_xlat13 / u_xlat12;
    gl_TessLevelOuter[0] = max(u_xlat12, 1.0);
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[0].www + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _ScreenParams.y;
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _EdgeLength;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    gl_TessLevelOuter[1] = max(u_xlat12, 1.0);
    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _ScreenParams.y;
    u_xlat4.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _EdgeLength;
    u_xlat0.x = u_xlat0.x / u_xlat4.x;
    gl_TessLevelOuter[2] = max(u_xlat0.x, 1.0);
}
void join_phase3(int phaseInstanceID)
{
    u_xlat0.x = gl_TessLevelOuter[2] + gl_TessLevelOuter[2];
    u_xlat0.x = u_xlat0.x + gl_TessLevelOuter[2];
    gl_TessLevelInner[0] = u_xlat0.x * 0.333333343;
}
void main()
{
    passthrough_ctrl_points();
    barrier();
    if (gl_InvocationID == 0)
    {
        fork_phase2(0);
        join_phase3(0);
    }
}

#endif
#ifdef DOMAIN
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(ccw) in;
layout(fractional_odd_spacing) in;
layout(triangles) in;
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _u;
uniform 	float _v;
uniform 	vec4 _Flamenoise_ST;
uniform 	float _Y_Mask;
uniform 	float _FlameHeight;
UNITY_LOCATION(2) uniform  sampler2D _FlameWave;
UNITY_LOCATION(3) uniform  sampler2D _Flamenoise;
layout(location = 0) in  vec4 hs_INTERNALTESSPOS0 [];
layout(location = 2) in  vec3 hs_NORMAL0 [];
layout(location = 3) in  vec4 hs_TEXCOORD0 [];
layout(location = 0) out vec3 ds_TEXCOORD0;
layout(location = 1) out vec3 ds_TEXCOORD1;
layout(location = 2) out vec4 ds_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = gl_TessCoord.yy * hs_TEXCOORD0[1].xy;
    u_xlat0.xy = hs_TEXCOORD0[0].xy * gl_TessCoord.xx + u_xlat0.xy;
    u_xlat0.xy = hs_TEXCOORD0[2].xy * gl_TessCoord.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _Flamenoise_ST.xy + _Flamenoise_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_u, _v) + u_xlat0.xy;
    u_xlat8 = textureLod(_FlameWave, u_xlat0.xy, 0.0).x;
    u_xlat0.x = textureLod(_Flamenoise, u_xlat0.xy, 0.0).x;
    u_xlat0.x = u_xlat0.x * u_xlat8;
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat1.xyz = gl_TessCoord.yyy * hs_NORMAL0[1].xyz;
    u_xlat1.xyz = hs_NORMAL0[0].xyz * gl_TessCoord.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hs_NORMAL0[2].xyz * gl_TessCoord.zzz + u_xlat1.xyz;
    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.x = (-u_xlat2.y) * u_xlat12 + _Y_Mask;
    ds_TEXCOORD0.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = abs(u_xlat1.x) + (-_Y_Mask);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
    u_xlat1 = gl_TessCoord.yyyy * hs_INTERNALTESSPOS0[1];
    u_xlat1 = hs_INTERNALTESSPOS0[0] * gl_TessCoord.xxxx + u_xlat1;
    u_xlat1 = hs_INTERNALTESSPOS0[2] * gl_TessCoord.zzzz + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_FlameHeight, _FlameHeight, _FlameHeight)) + u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    ds_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    ds_TEXCOORD2 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 38
; Schema: 0
                               OpCapability Shader 
                        %1 = OpExtInstImport "GLSL.std.450" 
                               OpMemoryModel Logical GLSL450 
                               OpEntryPoint Vertex %4 "main" %9 %11 %13 %14 %18 %20 %22 %23 %25 %26 %28 %29 %31 %32 %34 %35 
                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                               OpDecorate %9 Location 9 
                               OpDecorate %11 Location 11 
                               OpDecorate %13 Location 13 
                               OpDecorate %14 Location 14 
                               OpDecorate %18 Location 18 
                               OpDecorate %20 Location 20 
                               OpDecorate vs_TEXCOORD0 Location 22 
                               OpDecorate %23 Location 23 
                               OpDecorate vs_TEXCOORD1 Location 25 
                               OpDecorate %26 Location 26 
                               OpDecorate vs_TEXCOORD2 Location 28 
                               OpDecorate %29 Location 29 
                               OpDecorate vs_TEXCOORD3 Location 31 
                               OpDecorate %32 Location 32 
                               OpDecorate %34 Location 34 
                               OpDecorate %35 Location 35 
                        %2 = OpTypeVoid 
                        %3 = OpTypeFunction %2 
                        %6 = OpTypeFloat 32 
                        %7 = OpTypeVector %6 4 
                        %8 = OpTypePointer Output %7 
          Output f32_4* %9 = OpVariable Output 
                       %10 = OpTypePointer Input %7 
          Input f32_4* %11 = OpVariable Input 
         Output f32_4* %13 = OpVariable Output 
          Input f32_4* %14 = OpVariable Input 
                       %16 = OpTypeVector %6 3 
                       %17 = OpTypePointer Output %16 
         Output f32_3* %18 = OpVariable Output 
                       %19 = OpTypePointer Input %16 
          Input f32_3* %20 = OpVariable Input 
Output f32_4* vs_TEXCOORD0 = OpVariable Output 
          Input f32_4* %23 = OpVariable Input 
Output f32_4* vs_TEXCOORD1 = OpVariable Output 
          Input f32_4* %26 = OpVariable Input 
Output f32_4* vs_TEXCOORD2 = OpVariable Output 
          Input f32_4* %29 = OpVariable Input 
Output f32_4* vs_TEXCOORD3 = OpVariable Output 
          Input f32_4* %32 = OpVariable Input 
         Output f32_4* %34 = OpVariable Output 
          Input f32_4* %35 = OpVariable Input 
                   void %4 = OpFunction None %3 
                        %5 = OpLabel 
                 f32_4 %12 = OpLoad %11 
                               OpStore %9 %12 
                 f32_4 %15 = OpLoad %14 
                               OpStore %13 %15 
                 f32_3 %21 = OpLoad %20 
                               OpStore %18 %21 
                 f32_4 %24 = OpLoad %23 
                               OpStore vs_TEXCOORD0 %24 
                 f32_4 %27 = OpLoad %26 
                               OpStore vs_TEXCOORD1 %27 
                 f32_4 %30 = OpLoad %29 
                               OpStore vs_TEXCOORD2 %30 
                 f32_4 %33 = OpLoad %32 
                               OpStore vs_TEXCOORD3 %33 
                 f32_4 %36 = OpLoad %35 
                               OpStore %34 %36 
                               OpReturn
                               OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 327
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %110 %285 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %223 DescriptorSet 223 
                                                      OpDecorate %223 Binding 223 
                                                      OpDecorate %227 DescriptorSet 227 
                                                      OpDecorate %227 Binding 227 
                                                      OpDecorate %249 DescriptorSet 249 
                                                      OpDecorate %249 Binding 249 
                                                      OpDecorate %251 DescriptorSet 251 
                                                      OpDecorate %251 Binding 251 
                                                      OpDecorate %285 Location 285 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %7 %14 %14 %17 %6 %6 %6 %6 %6 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32; f32; f32; f32; f32;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %7 
                                              %27 = OpTypePointer Private %6 
                                 Private f32* %28 = OpVariable Private 
                                              %38 = OpTypePointer Private %14 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 1 
                                              %43 = OpTypePointer Uniform %14 
                               Private f32_3* %57 = OpVariable Private 
                                          f32 %76 = OpConstant 3.674022E-40 
                                          f32 %89 = OpConstant 3.674022E-40 
                                          f32 %90 = OpConstant 3.674022E-40 
                                 Private f32* %95 = OpVariable Private 
                                         f32 %106 = OpConstant 3.674022E-40 
                                         f32 %108 = OpConstant 3.674022E-40 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %123 = OpConstant 0 
                                Private f32* %125 = OpVariable Private 
                                Private f32* %132 = OpVariable Private 
                                         i32 %149 = OpConstant 7 
                                             %150 = OpTypePointer Uniform %6 
                                         i32 %159 = OpConstant 6 
                                         i32 %165 = OpConstant 5 
                                         f32 %171 = OpConstant 3.674022E-40 
                                         f32 %173 = OpConstant 3.674022E-40 
                                         f32 %180 = OpConstant 3.674022E-40 
                                         i32 %184 = OpConstant 3 
                                         i32 %195 = OpConstant 2 
                                             %207 = OpTypeVector %6 2 
                                       f32_2 %217 = OpConstantComposite %173 %173 
                                             %221 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %222 = OpTypePointer UniformConstant %221 
        UniformConstant read_only Texture2D* %223 = OpVariable UniformConstant 
                                             %225 = OpTypeSampler 
                                             %226 = OpTypePointer UniformConstant %225 
                    UniformConstant sampler* %227 = OpVariable UniformConstant 
                                             %229 = OpTypeSampledImage %221 
                                         u32 %234 = OpConstant 3 
                                             %236 = OpTypeBool 
                                             %237 = OpTypePointer Private %236 
                               Private bool* %238 = OpVariable Private 
                                         u32 %239 = OpConstant 2 
        UniformConstant read_only Texture2D* %249 = OpVariable UniformConstant 
                    UniformConstant sampler* %251 = OpVariable UniformConstant 
                                Private f32* %259 = OpVariable Private 
                                             %284 = OpTypePointer Output %14 
                               Output f32_4* %285 = OpVariable Output 
                                         u32 %293 = OpConstant 1 
                                             %294 = OpTypePointer Input %6 
                                         i32 %298 = OpConstant 4 
                                         i32 %320 = OpConstant 8 
                                             %324 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad %11 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %13 %25 
                                                      OpStore %9 %26 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpLoad %9 
                                          f32 %31 = OpDot %29 %30 
                                                      OpStore %28 %31 
                                          f32 %32 = OpLoad %28 
                                          f32 %33 = OpExtInst %1 32 %32 
                                                      OpStore %28 %33 
                                          f32 %34 = OpLoad %28 
                                        f32_3 %35 = OpCompositeConstruct %34 %34 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpFMul %35 %36 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %11 
                                        f32_3 %41 = OpFNegate %40 
                               Uniform f32_4* %44 = OpAccessChain %20 %42 
                                        f32_4 %45 = OpLoad %44 
                                        f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
                                        f32_3 %47 = OpFAdd %41 %46 
                                        f32_4 %48 = OpLoad %39 
                                        f32_4 %49 = OpVectorShuffle %48 %47 4 5 6 3 
                                                      OpStore %39 %49 
                                        f32_4 %50 = OpLoad %39 
                                        f32_3 %51 = OpVectorShuffle %50 %50 0 1 2 
                                        f32_4 %52 = OpLoad %39 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                          f32 %54 = OpDot %51 %53 
                                                      OpStore %28 %54 
                                          f32 %55 = OpLoad %28 
                                          f32 %56 = OpExtInst %1 32 %55 
                                                      OpStore %28 %56 
                                        f32_4 %58 = OpLoad %39 
                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
                                          f32 %60 = OpLoad %28 
                                        f32_3 %61 = OpCompositeConstruct %60 %60 %60 
                                        f32_3 %62 = OpFMul %59 %61 
                                        f32_3 %63 = OpLoad %9 
                                        f32_3 %64 = OpFAdd %62 %63 
                                                      OpStore %57 %64 
                                          f32 %65 = OpLoad %28 
                                        f32_3 %66 = OpCompositeConstruct %65 %65 %65 
                                        f32_4 %67 = OpLoad %39 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_3 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %39 
                                        f32_4 %71 = OpVectorShuffle %70 %69 4 5 6 3 
                                                      OpStore %39 %71 
                                        f32_3 %72 = OpLoad %57 
                                        f32_3 %73 = OpLoad %57 
                                          f32 %74 = OpDot %72 %73 
                                                      OpStore %28 %74 
                                          f32 %75 = OpLoad %28 
                                          f32 %77 = OpExtInst %1 40 %75 %76 
                                                      OpStore %28 %77 
                                          f32 %78 = OpLoad %28 
                                          f32 %79 = OpExtInst %1 32 %78 
                                                      OpStore %28 %79 
                                          f32 %80 = OpLoad %28 
                                        f32_3 %81 = OpCompositeConstruct %80 %80 %80 
                                        f32_3 %82 = OpLoad %57 
                                        f32_3 %83 = OpFMul %81 %82 
                                                      OpStore %57 %83 
                                        f32_4 %84 = OpLoad %39 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpLoad %57 
                                          f32 %87 = OpDot %85 %86 
                                                      OpStore %28 %87 
                                          f32 %88 = OpLoad %28 
                                          f32 %91 = OpExtInst %1 43 %88 %89 %90 
                                                      OpStore %28 %91 
                                          f32 %92 = OpLoad %28 
                                          f32 %93 = OpFNegate %92 
                                          f32 %94 = OpFAdd %93 %90 
                                                      OpStore %28 %94 
                                          f32 %96 = OpLoad %28 
                                          f32 %97 = OpLoad %28 
                                          f32 %98 = OpFMul %96 %97 
                                                      OpStore %95 %98 
                                          f32 %99 = OpLoad %95 
                                         f32 %100 = OpLoad %95 
                                         f32 %101 = OpFMul %99 %100 
                                                      OpStore %95 %101 
                                         f32 %102 = OpLoad %28 
                                         f32 %103 = OpLoad %95 
                                         f32 %104 = OpFMul %102 %103 
                                                      OpStore %28 %104 
                                         f32 %105 = OpLoad %28 
                                         f32 %107 = OpFMul %105 %106 
                                         f32 %109 = OpFAdd %107 %108 
                                                      OpStore %28 %109 
                                       f32_3 %111 = OpLoad %110 
                                       f32_3 %112 = OpLoad %110 
                                         f32 %113 = OpDot %111 %112 
                                                      OpStore %95 %113 
                                         f32 %114 = OpLoad %95 
                                         f32 %115 = OpExtInst %1 32 %114 
                                                      OpStore %95 %115 
                                         f32 %116 = OpLoad %95 
                                       f32_3 %117 = OpCompositeConstruct %116 %116 %116 
                                       f32_3 %118 = OpLoad %110 
                                       f32_3 %119 = OpFMul %117 %118 
                                                      OpStore %57 %119 
                                       f32_3 %120 = OpLoad %57 
                                       f32_3 %121 = OpLoad %9 
                                         f32 %122 = OpDot %120 %121 
                                Private f32* %124 = OpAccessChain %9 %123 
                                                      OpStore %124 %122 
                                       f32_3 %126 = OpLoad %57 
                                       f32_4 %127 = OpLoad %39 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %126 %128 
                                                      OpStore %125 %129 
                                         f32 %130 = OpLoad %125 
                                         f32 %131 = OpExtInst %1 43 %130 %89 %90 
                                                      OpStore %125 %131 
                                Private f32* %133 = OpAccessChain %9 %123 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpExtInst %1 4 %134 
                                         f32 %136 = OpLoad %125 
                                         f32 %137 = OpFAdd %135 %136 
                                                      OpStore %132 %137 
                                Private f32* %138 = OpAccessChain %9 %123 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFNegate %139 
                                         f32 %141 = OpFAdd %140 %90 
                                Private f32* %142 = OpAccessChain %9 %123 
                                                      OpStore %142 %141 
                                Private f32* %143 = OpAccessChain %9 %123 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpExtInst %1 30 %144 
                                Private f32* %146 = OpAccessChain %9 %123 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %9 %123 
                                         f32 %148 = OpLoad %147 
                                Uniform f32* %151 = OpAccessChain %20 %149 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %148 %152 
                                Private f32* %154 = OpAccessChain %9 %123 
                                                      OpStore %154 %153 
                                Private f32* %155 = OpAccessChain %9 %123 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpExtInst %1 29 %156 
                                Private f32* %158 = OpAccessChain %9 %123 
                                                      OpStore %158 %157 
                                Uniform f32* %160 = OpAccessChain %20 %159 
                                         f32 %161 = OpLoad %160 
                                Private f32* %162 = OpAccessChain %9 %123 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFMul %161 %163 
                                Uniform f32* %166 = OpAccessChain %20 %165 
                                         f32 %167 = OpLoad %166 
                                         f32 %168 = OpFAdd %164 %167 
                                Private f32* %169 = OpAccessChain %9 %123 
                                                      OpStore %169 %168 
                                         f32 %170 = OpLoad %132 
                                         f32 %172 = OpFAdd %170 %171 
                                                      OpStore %132 %172 
                                         f32 %174 = OpLoad %132 
                                         f32 %175 = OpFDiv %173 %174 
                                                      OpStore %132 %175 
                                         f32 %176 = OpLoad %125 
                                         f32 %177 = OpLoad %132 
                                         f32 %178 = OpFMul %176 %177 
                                                      OpStore %125 %178 
                                         f32 %179 = OpLoad %125 
                                         f32 %181 = OpFMul %179 %180 
                                                      OpStore %125 %181 
                                       f32_3 %182 = OpLoad %11 
                                       f32_4 %183 = OpVectorShuffle %182 %182 1 1 1 1 
                              Uniform f32_4* %185 = OpAccessChain %20 %184 %42 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpFMul %183 %186 
                                                      OpStore %39 %187 
                              Uniform f32_4* %188 = OpAccessChain %20 %184 %22 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpLoad %11 
                                       f32_4 %191 = OpVectorShuffle %190 %190 0 0 0 0 
                                       f32_4 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %39 
                                       f32_4 %194 = OpFAdd %192 %193 
                                                      OpStore %39 %194 
                              Uniform f32_4* %196 = OpAccessChain %20 %184 %195 
                                       f32_4 %197 = OpLoad %196 
                                       f32_3 %198 = OpLoad %11 
                                       f32_4 %199 = OpVectorShuffle %198 %198 2 2 2 2 
                                       f32_4 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %39 
                                       f32_4 %202 = OpFAdd %200 %201 
                                                      OpStore %39 %202 
                                       f32_4 %203 = OpLoad %39 
                              Uniform f32_4* %204 = OpAccessChain %20 %184 %184 
                                       f32_4 %205 = OpLoad %204 
                                       f32_4 %206 = OpFAdd %203 %205 
                                                      OpStore %39 %206 
                                       f32_4 %208 = OpLoad %39 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 1 
                                       f32_4 %210 = OpLoad %39 
                                       f32_2 %211 = OpVectorShuffle %210 %210 3 3 
                                       f32_2 %212 = OpFDiv %209 %211 
                                       f32_3 %213 = OpLoad %57 
                                       f32_3 %214 = OpVectorShuffle %213 %212 3 4 2 
                                                      OpStore %57 %214 
                                       f32_3 %215 = OpLoad %57 
                                       f32_2 %216 = OpVectorShuffle %215 %215 0 1 
                                       f32_2 %218 = OpFAdd %216 %217 
                                       f32_3 %219 = OpLoad %57 
                                       f32_3 %220 = OpVectorShuffle %219 %218 3 4 2 
                                                      OpStore %57 %220 
                         read_only Texture2D %224 = OpLoad %223 
                                     sampler %228 = OpLoad %227 
                  read_only Texture2DSampled %230 = OpSampledImage %224 %228 
                                       f32_3 %231 = OpLoad %57 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_4 %233 = OpImageSampleImplicitLod %230 %232 
                                         f32 %235 = OpCompositeExtract %233 3 
                                                      OpStore %132 %235 
                                Private f32* %240 = OpAccessChain %39 %239 
                                         f32 %241 = OpLoad %240 
                                        bool %242 = OpFOrdLessThan %89 %241 
                                                      OpStore %238 %242 
                                       f32_4 %243 = OpLoad %39 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_4 %245 = OpLoad %39 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %244 %246 
                                Private f32* %248 = OpAccessChain %39 %123 
                                                      OpStore %248 %247 
                         read_only Texture2D %250 = OpLoad %249 
                                     sampler %252 = OpLoad %251 
                  read_only Texture2DSampled %253 = OpSampledImage %250 %252 
                                       f32_4 %254 = OpLoad %39 
                                       f32_2 %255 = OpVectorShuffle %254 %254 0 0 
                                       f32_4 %256 = OpImageSampleImplicitLod %253 %255 
                                         f32 %257 = OpCompositeExtract %256 0 
                                Private f32* %258 = OpAccessChain %39 %123 
                                                      OpStore %258 %257 
                                        bool %260 = OpLoad %238 
                                         f32 %261 = OpSelect %260 %90 %89 
                                                      OpStore %259 %261 
                                         f32 %262 = OpLoad %132 
                                         f32 %263 = OpLoad %259 
                                         f32 %264 = OpFMul %262 %263 
                                                      OpStore %132 %264 
                                Private f32* %265 = OpAccessChain %39 %123 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpLoad %132 
                                         f32 %268 = OpFMul %266 %267 
                                                      OpStore %132 %268 
                                         f32 %269 = OpLoad %132 
                                       f32_3 %270 = OpCompositeConstruct %269 %269 %269 
                              Uniform f32_4* %271 = OpAccessChain %20 %195 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFMul %270 %273 
                                       f32_4 %275 = OpLoad %39 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %39 %276 
                                         f32 %277 = OpLoad %125 
                                       f32_3 %278 = OpCompositeConstruct %277 %277 %277 
                                       f32_4 %279 = OpLoad %39 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                       f32_3 %281 = OpFMul %278 %280 
                                       f32_4 %282 = OpLoad %39 
                                       f32_4 %283 = OpVectorShuffle %282 %281 4 5 6 3 
                                                      OpStore %39 %283 
                                         f32 %286 = OpLoad %28 
                                       f32_3 %287 = OpCompositeConstruct %286 %286 %286 
                                       f32_4 %288 = OpLoad %39 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %285 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 6 3 
                                                      OpStore %285 %292 
                                  Input f32* %295 = OpAccessChain %110 %293 
                                         f32 %296 = OpLoad %295 
                                         f32 %297 = OpFNegate %296 
                                Uniform f32* %299 = OpAccessChain %20 %298 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpFAdd %297 %300 
                                                      OpStore %125 %301 
                                         f32 %302 = OpLoad %125 
                                         f32 %303 = OpExtInst %1 4 %302 
                                Uniform f32* %304 = OpAccessChain %20 %298 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFNegate %305 
                                         f32 %307 = OpFAdd %303 %306 
                                                      OpStore %125 %307 
                                         f32 %308 = OpLoad %125 
                                         f32 %309 = OpExtInst %1 43 %308 %89 %90 
                                                      OpStore %125 %309 
                                         f32 %310 = OpLoad %125 
                                         f32 %311 = OpFNegate %310 
                                         f32 %312 = OpFAdd %311 %90 
                                                      OpStore %125 %312 
                                         f32 %313 = OpLoad %125 
                                Private f32* %314 = OpAccessChain %9 %123 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFMul %313 %315 
                                Private f32* %317 = OpAccessChain %9 %123 
                                                      OpStore %317 %316 
                                Private f32* %318 = OpAccessChain %9 %123 
                                         f32 %319 = OpLoad %318 
                                Uniform f32* %321 = OpAccessChain %20 %320 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %319 %322 
                                 Output f32* %325 = OpAccessChain %285 %234 
                                                      OpStore %325 %323 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 387
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationControl %4 "main" %23 %25 %30 %37 %39 %47 %51 %58 %60 %65 %67 %72 %74 %79 %81 %86 %88 %219 %371 
                                                      OpExecutionMode %4 OutputVertices 4 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %25 BuiltIn WorkgroupSize 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %37 Location 37 
                                                      OpDecorate %39 Location 39 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %51 Location 51 
                                                      OpDecorate %58 Location 58 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate %65 Location 65 
                                                      OpDecorate vs_TEXCOORD1 Location 67 
                                                      OpDecorate %72 Location 72 
                                                      OpDecorate vs_TEXCOORD2 Location 74 
                                                      OpDecorate %79 Location 79 
                                                      OpDecorate vs_TEXCOORD3 Location 81 
                                                      OpDecorate %86 Location 86 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %96 ArrayStride 96 
                                                      OpMemberDecorate %97 0 Offset 97 
                                                      OpMemberDecorate %97 1 Offset 97 
                                                      OpMemberDecorate %97 2 Offset 97 
                                                      OpMemberDecorate %97 3 Offset 97 
                                                      OpDecorate %97 Block 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate %219 Patch 
                                                      OpDecorate %219 BuiltIn 219 
                                                      OpDecorate %371 Patch 
                                                      OpDecorate %371 BuiltIn 371 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %8 = OpTypeInt 32 1 
                                               %9 = OpTypePointer Function %8 
                                              %10 = OpTypeFunction %2 %9 
                                              %17 = OpTypeFloat 32 
                                              %18 = OpTypeVector %17 4 
                                              %19 = OpTypeInt 32 0 
                                          u32 %20 = OpConstant 3 
                                              %21 = OpTypeArray %18 %20 
                                              %22 = OpTypePointer Output %21 
                             Output f32_4[3]* %23 = OpVariable Output 
                                              %24 = OpTypePointer Input %8 
                                   Input i32* %25 = OpVariable Input 
                                          u32 %27 = OpConstant 32 
                                              %28 = OpTypeArray %18 %27 
                                              %29 = OpTypePointer Input %28 
                             Input f32_4[32]* %30 = OpVariable Input 
                                              %32 = OpTypePointer Input %18 
                                              %35 = OpTypePointer Output %18 
                             Output f32_4[3]* %37 = OpVariable Output 
                             Input f32_4[32]* %39 = OpVariable Input 
                                              %44 = OpTypeVector %17 3 
                                              %45 = OpTypeArray %44 %20 
                                              %46 = OpTypePointer Output %45 
                             Output f32_3[3]* %47 = OpVariable Output 
                                              %49 = OpTypeArray %44 %27 
                                              %50 = OpTypePointer Input %49 
                             Input f32_3[32]* %51 = OpVariable Input 
                                              %53 = OpTypePointer Input %44 
                                              %56 = OpTypePointer Output %44 
                             Output f32_4[3]* %58 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD0 = OpVariable Input 
                             Output f32_4[3]* %65 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD1 = OpVariable Input 
                             Output f32_4[3]* %72 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD2 = OpVariable Input 
                             Output f32_4[3]* %79 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD3 = OpVariable Input 
                             Output f32_4[3]* %86 = OpVariable Output 
                             Input f32_4[32]* %88 = OpVariable Input 
                                              %93 = OpTypePointer Private %44 
                               Private f32_3* %94 = OpVariable Private 
                                          u32 %95 = OpConstant 4 
                                              %96 = OpTypeArray %18 %95 
                                              %97 = OpTypeStruct %44 %18 %96 %17 
                                              %98 = OpTypePointer Uniform %97 
Uniform struct {f32_3; f32_4; f32_4[4]; f32;}* %99 = OpVariable Uniform 
                                         i32 %100 = OpConstant 2 
                                         i32 %101 = OpConstant 1 
                                             %102 = OpTypePointer Uniform %18 
                                         i32 %110 = OpConstant 0 
                                         i32 %129 = OpConstant 3 
                              Private f32_3* %139 = OpVariable Private 
                              Private f32_3* %174 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                             %182 = OpTypePointer Uniform %44 
                                             %187 = OpTypePointer Private %17 
                                Private f32* %188 = OpVariable Private 
                                             %195 = OpTypePointer Uniform %17 
                                Private f32* %203 = OpVariable Private 
                                         u32 %210 = OpConstant 1 
                                             %217 = OpTypeArray %17 %95 
                                             %218 = OpTypePointer Output %217 
                              Output f32[4]* %219 = OpVariable Output 
                                         f32 %221 = OpConstant 3.674022E-40 
                                             %223 = OpTypePointer Output %17 
                              Private f32_3* %259 = OpVariable Private 
                                         u32 %285 = OpConstant 0 
                              Private f32_3* %325 = OpVariable Private 
                                         u32 %368 = OpConstant 2 
                                             %369 = OpTypeArray %17 %368 
                                             %370 = OpTypePointer Output %369 
                              Output f32[2]* %371 = OpVariable Output 
                                         f32 %374 = OpConstant 3.674022E-40 
                                             %379 = OpTypeBool 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %383 = OpVariable Function 
                               Function i32* %385 = OpVariable Function 
                                        void %377 = OpFunctionCall %6 
                                                      OpControlBarrier 368 95 285 
                                         i32 %378 = OpLoad %25 
                                        bool %380 = OpIEqual %378 %110 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %380 %381 %382 
                                             %381 = OpLabel 
                                                      OpStore %383 %110 
                                        void %384 = OpFunctionCall %12 %383 
                                                      OpStore %385 %110 
                                        void %386 = OpFunctionCall %15 %385 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
                                          void %6 = OpFunction None %3 
                                               %7 = OpLabel 
                                          i32 %26 = OpLoad %25 
                                          i32 %31 = OpLoad %25 
                                 Input f32_4* %33 = OpAccessChain %30 %31 
                                        f32_4 %34 = OpLoad %33 
                                Output f32_4* %36 = OpAccessChain %23 %26 
                                                      OpStore %36 %34 
                                          i32 %38 = OpLoad %25 
                                          i32 %40 = OpLoad %25 
                                 Input f32_4* %41 = OpAccessChain %39 %40 
                                        f32_4 %42 = OpLoad %41 
                                Output f32_4* %43 = OpAccessChain %37 %38 
                                                      OpStore %43 %42 
                                          i32 %48 = OpLoad %25 
                                          i32 %52 = OpLoad %25 
                                 Input f32_3* %54 = OpAccessChain %51 %52 
                                        f32_3 %55 = OpLoad %54 
                                Output f32_3* %57 = OpAccessChain %47 %48 
                                                      OpStore %57 %55 
                                          i32 %59 = OpLoad %25 
                                          i32 %61 = OpLoad %25 
                                 Input f32_4* %62 = OpAccessChain vs_TEXCOORD0 %61 
                                        f32_4 %63 = OpLoad %62 
                                Output f32_4* %64 = OpAccessChain %58 %59 
                                                      OpStore %64 %63 
                                          i32 %66 = OpLoad %25 
                                          i32 %68 = OpLoad %25 
                                 Input f32_4* %69 = OpAccessChain vs_TEXCOORD1 %68 
                                        f32_4 %70 = OpLoad %69 
                                Output f32_4* %71 = OpAccessChain %65 %66 
                                                      OpStore %71 %70 
                                          i32 %73 = OpLoad %25 
                                          i32 %75 = OpLoad %25 
                                 Input f32_4* %76 = OpAccessChain vs_TEXCOORD2 %75 
                                        f32_4 %77 = OpLoad %76 
                                Output f32_4* %78 = OpAccessChain %72 %73 
                                                      OpStore %78 %77 
                                          i32 %80 = OpLoad %25 
                                          i32 %82 = OpLoad %25 
                                 Input f32_4* %83 = OpAccessChain vs_TEXCOORD3 %82 
                                        f32_4 %84 = OpLoad %83 
                                Output f32_4* %85 = OpAccessChain %79 %80 
                                                      OpStore %85 %84 
                                          i32 %87 = OpLoad %25 
                                          i32 %89 = OpLoad %25 
                                 Input f32_4* %90 = OpAccessChain %88 %89 
                                        f32_4 %91 = OpLoad %90 
                                Output f32_4* %92 = OpAccessChain %86 %87 
                                                      OpStore %92 %91 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %12 = OpFunction None %10 
                                Function i32* %11 = OpFunctionParameter 
                                              %13 = OpLabel 
                              Uniform f32_4* %103 = OpAccessChain %99 %100 %101 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                Input f32_4* %106 = OpAccessChain %30 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 1 1 1 
                                       f32_3 %109 = OpFMul %105 %108 
                                                      OpStore %94 %109 
                              Uniform f32_4* %111 = OpAccessChain %99 %100 %110 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                Input f32_4* %114 = OpAccessChain %30 %101 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %113 %116 
                                       f32_3 %118 = OpLoad %94 
                                       f32_3 %119 = OpFAdd %117 %118 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %99 %100 %100 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                Input f32_4* %123 = OpAccessChain %30 %101 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 2 2 2 
                                       f32_3 %126 = OpFMul %122 %125 
                                       f32_3 %127 = OpLoad %94 
                                       f32_3 %128 = OpFAdd %126 %127 
                                                      OpStore %94 %128 
                              Uniform f32_4* %130 = OpAccessChain %99 %100 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                Input f32_4* %133 = OpAccessChain %30 %101 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 3 3 3 
                                       f32_3 %136 = OpFMul %132 %135 
                                       f32_3 %137 = OpLoad %94 
                                       f32_3 %138 = OpFAdd %136 %137 
                                                      OpStore %94 %138 
                              Uniform f32_4* %140 = OpAccessChain %99 %100 %101 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                Input f32_4* %143 = OpAccessChain %30 %100 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 1 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                                      OpStore %139 %146 
                              Uniform f32_4* %147 = OpAccessChain %99 %100 %110 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                Input f32_4* %150 = OpAccessChain %30 %100 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 0 0 
                                       f32_3 %153 = OpFMul %149 %152 
                                       f32_3 %154 = OpLoad %139 
                                       f32_3 %155 = OpFAdd %153 %154 
                                                      OpStore %139 %155 
                              Uniform f32_4* %156 = OpAccessChain %99 %100 %100 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                Input f32_4* %159 = OpAccessChain %30 %100 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 2 2 2 
                                       f32_3 %162 = OpFMul %158 %161 
                                       f32_3 %163 = OpLoad %139 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %139 %164 
                              Uniform f32_4* %165 = OpAccessChain %99 %100 %129 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                Input f32_4* %168 = OpAccessChain %30 %100 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 3 3 3 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_3 %172 = OpLoad %139 
                                       f32_3 %173 = OpFAdd %171 %172 
                                                      OpStore %139 %173 
                                       f32_3 %175 = OpLoad %94 
                                       f32_3 %176 = OpLoad %139 
                                       f32_3 %177 = OpFAdd %175 %176 
                                                      OpStore %174 %177 
                                       f32_3 %178 = OpLoad %174 
                                       f32_3 %181 = OpFMul %178 %180 
                              Uniform f32_3* %183 = OpAccessChain %99 %110 
                                       f32_3 %184 = OpLoad %183 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpFAdd %181 %185 
                                                      OpStore %174 %186 
                                       f32_3 %189 = OpLoad %174 
                                       f32_3 %190 = OpLoad %174 
                                         f32 %191 = OpDot %189 %190 
                                                      OpStore %188 %191 
                                         f32 %192 = OpLoad %188 
                                         f32 %193 = OpExtInst %1 31 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                Uniform f32* %196 = OpAccessChain %99 %129 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %194 %197 
                                                      OpStore %188 %198 
                                       f32_3 %199 = OpLoad %94 
                                       f32_3 %200 = OpLoad %139 
                                       f32_3 %201 = OpFNegate %200 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore %174 %202 
                                       f32_3 %204 = OpLoad %174 
                                       f32_3 %205 = OpLoad %174 
                                         f32 %206 = OpDot %204 %205 
                                                      OpStore %203 %206 
                                         f32 %207 = OpLoad %203 
                                         f32 %208 = OpExtInst %1 31 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                Uniform f32* %211 = OpAccessChain %99 %101 %210 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %209 %212 
                                                      OpStore %203 %213 
                                         f32 %214 = OpLoad %203 
                                         f32 %215 = OpLoad %188 
                                         f32 %216 = OpFDiv %214 %215 
                                                      OpStore %188 %216 
                                         f32 %220 = OpLoad %188 
                                         f32 %222 = OpExtInst %1 40 %220 %221 
                                 Output f32* %224 = OpAccessChain %219 %110 
                                                      OpStore %224 %222 
                              Uniform f32_4* %225 = OpAccessChain %99 %100 %101 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                Input f32_4* %228 = OpAccessChain %30 %110 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 1 1 1 
                                       f32_3 %231 = OpFMul %227 %230 
                                                      OpStore %174 %231 
                              Uniform f32_4* %232 = OpAccessChain %99 %100 %110 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                Input f32_4* %235 = OpAccessChain %30 %110 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 0 0 
                                       f32_3 %238 = OpFMul %234 %237 
                                       f32_3 %239 = OpLoad %174 
                                       f32_3 %240 = OpFAdd %238 %239 
                                                      OpStore %174 %240 
                              Uniform f32_4* %241 = OpAccessChain %99 %100 %100 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                Input f32_4* %244 = OpAccessChain %30 %110 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 2 2 2 
                                       f32_3 %247 = OpFMul %243 %246 
                                       f32_3 %248 = OpLoad %174 
                                       f32_3 %249 = OpFAdd %247 %248 
                                                      OpStore %174 %249 
                              Uniform f32_4* %250 = OpAccessChain %99 %100 %129 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                Input f32_4* %253 = OpAccessChain %30 %110 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 3 3 3 
                                       f32_3 %256 = OpFMul %252 %255 
                                       f32_3 %257 = OpLoad %174 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore %174 %258 
                                       f32_3 %260 = OpLoad %139 
                                       f32_3 %261 = OpLoad %174 
                                       f32_3 %262 = OpFAdd %260 %261 
                                                      OpStore %259 %262 
                                       f32_3 %263 = OpLoad %139 
                                       f32_3 %264 = OpLoad %174 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_3 %266 = OpFAdd %263 %265 
                                                      OpStore %139 %266 
                                       f32_3 %267 = OpLoad %139 
                                       f32_3 %268 = OpLoad %139 
                                         f32 %269 = OpDot %267 %268 
                                                      OpStore %188 %269 
                                         f32 %270 = OpLoad %188 
                                         f32 %271 = OpExtInst %1 31 %270 
                                                      OpStore %188 %271 
                                         f32 %272 = OpLoad %188 
                                Uniform f32* %273 = OpAccessChain %99 %101 %210 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                                      OpStore %188 %275 
                                       f32_3 %276 = OpLoad %259 
                                       f32_3 %277 = OpFMul %276 %180 
                              Uniform f32_3* %278 = OpAccessChain %99 %110 
                                       f32_3 %279 = OpLoad %278 
                                       f32_3 %280 = OpFNegate %279 
                                       f32_3 %281 = OpFAdd %277 %280 
                                                      OpStore %139 %281 
                                       f32_3 %282 = OpLoad %139 
                                       f32_3 %283 = OpLoad %139 
                                         f32 %284 = OpDot %282 %283 
                                Private f32* %286 = OpAccessChain %139 %285 
                                                      OpStore %286 %284 
                                Private f32* %287 = OpAccessChain %139 %285 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 31 %288 
                                Private f32* %290 = OpAccessChain %139 %285 
                                                      OpStore %290 %289 
                                Private f32* %291 = OpAccessChain %139 %285 
                                         f32 %292 = OpLoad %291 
                                Uniform f32* %293 = OpAccessChain %99 %129 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFMul %292 %294 
                                Private f32* %296 = OpAccessChain %139 %285 
                                                      OpStore %296 %295 
                                         f32 %297 = OpLoad %188 
                                Private f32* %298 = OpAccessChain %139 %285 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFDiv %297 %299 
                                                      OpStore %188 %300 
                                         f32 %301 = OpLoad %188 
                                         f32 %302 = OpExtInst %1 40 %301 %221 
                                 Output f32* %303 = OpAccessChain %219 %101 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %94 
                                       f32_3 %305 = OpLoad %174 
                                       f32_3 %306 = OpFAdd %304 %305 
                                                      OpStore %139 %306 
                                       f32_3 %307 = OpLoad %94 
                                       f32_3 %308 = OpFNegate %307 
                                       f32_3 %309 = OpLoad %174 
                                       f32_3 %310 = OpFAdd %308 %309 
                                                      OpStore %94 %310 
                                       f32_3 %311 = OpLoad %94 
                                       f32_3 %312 = OpLoad %94 
                                         f32 %313 = OpDot %311 %312 
                                Private f32* %314 = OpAccessChain %94 %285 
                                                      OpStore %314 %313 
                                Private f32* %315 = OpAccessChain %94 %285 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpExtInst %1 31 %316 
                                Private f32* %318 = OpAccessChain %94 %285 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %94 %285 
                                         f32 %320 = OpLoad %319 
                                Uniform f32* %321 = OpAccessChain %99 %101 %210 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %320 %322 
                                Private f32* %324 = OpAccessChain %94 %285 
                                                      OpStore %324 %323 
                                       f32_3 %326 = OpLoad %139 
                                       f32_3 %327 = OpFMul %326 %180 
                              Uniform f32_3* %328 = OpAccessChain %99 %110 
                                       f32_3 %329 = OpLoad %328 
                                       f32_3 %330 = OpFNegate %329 
                                       f32_3 %331 = OpFAdd %327 %330 
                                                      OpStore %325 %331 
                                       f32_3 %332 = OpLoad %325 
                                       f32_3 %333 = OpLoad %325 
                                         f32 %334 = OpDot %332 %333 
                                Private f32* %335 = OpAccessChain %325 %285 
                                                      OpStore %335 %334 
                                Private f32* %336 = OpAccessChain %325 %285 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpExtInst %1 31 %337 
                                Private f32* %339 = OpAccessChain %325 %285 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %325 %285 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %99 %129 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFMul %341 %343 
                                Private f32* %345 = OpAccessChain %325 %285 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %94 %285 
                                         f32 %347 = OpLoad %346 
                                Private f32* %348 = OpAccessChain %325 %285 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFDiv %347 %349 
                                Private f32* %351 = OpAccessChain %94 %285 
                                                      OpStore %351 %350 
                                Private f32* %352 = OpAccessChain %94 %285 
                                         f32 %353 = OpLoad %352 
                                         f32 %354 = OpExtInst %1 40 %353 %221 
                                 Output f32* %355 = OpAccessChain %219 %100 
                                                      OpStore %355 %354 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %15 = OpFunction None %10 
                                Function i32* %14 = OpFunctionParameter 
                                              %16 = OpLabel 
                                 Output f32* %356 = OpAccessChain %219 %100 
                                         f32 %357 = OpLoad %356 
                                 Output f32* %358 = OpAccessChain %219 %100 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                Private f32* %361 = OpAccessChain %94 %285 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %94 %285 
                                         f32 %363 = OpLoad %362 
                                 Output f32* %364 = OpAccessChain %219 %100 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFAdd %363 %365 
                                Private f32* %367 = OpAccessChain %94 %285 
                                                      OpStore %367 %366 
                                Private f32* %372 = OpAccessChain %94 %285 
                                         f32 %373 = OpLoad %372 
                                         f32 %375 = OpFMul %373 %374 
                                 Output f32* %376 = OpAccessChain %371 %110 
                                                      OpStore %376 %375 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 382
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationEvaluation %4 "main" %12 %20 %139 %208 %236 %321 %331 %368 
                                                      OpExecutionMode %4 Triangles 
                                                      OpExecutionMode %4 SpacingFractionalOdd 
                                                      OpExecutionMode %4 VertexOrderCw 
                                                      OpDecorate %12 BuiltIn TessLevelInner 
                                                      OpDecorate %20 Location 20 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpMemberDecorate %61 5 Offset 61 
                                                      OpMemberDecorate %61 6 Offset 61 
                                                      OpMemberDecorate %61 7 Offset 61 
                                                      OpMemberDecorate %61 8 Offset 61 
                                                      OpMemberDecorate %61 9 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %97 DescriptorSet 97 
                                                      OpDecorate %97 Binding 97 
                                                      OpDecorate %101 DescriptorSet 101 
                                                      OpDecorate %101 Binding 101 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %113 DescriptorSet 113 
                                                      OpDecorate %113 Binding 113 
                                                      OpDecorate %139 Location 139 
                                                      OpDecorate %208 Location 208 
                                                      OpDecorate %236 Location 236 
                                                      OpMemberDecorate %319 0 BuiltIn 319 
                                                      OpMemberDecorate %319 1 BuiltIn 319 
                                                      OpMemberDecorate %319 2 BuiltIn 319 
                                                      OpDecorate %319 Block 
                                                      OpDecorate %331 Location 331 
                                                      OpDecorate %368 Location 368 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 32 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypePointer Input %18 
                             Input f32_4[32]* %20 = OpVariable Input 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Input %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %42 = OpConstant 2 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                              %60 = OpTypeArray %7 %56 
                                              %61 = OpTypeStruct %7 %57 %58 %59 %60 %6 %6 %7 %6 %6 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32; f32;}* %63 = OpVariable Uniform 
                                          i32 %64 = OpConstant 7 
                                              %65 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 5 
                                              %80 = OpTypePointer Uniform %6 
                                          i32 %83 = OpConstant 6 
                                              %93 = OpTypePointer Private %6 
                                 Private f32* %94 = OpVariable Private 
                                              %95 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %96 = OpTypePointer UniformConstant %95 
         UniformConstant read_only Texture2D* %97 = OpVariable UniformConstant 
                                              %99 = OpTypeSampler 
                                             %100 = OpTypePointer UniformConstant %99 
                    UniformConstant sampler* %101 = OpVariable UniformConstant 
                                             %103 = OpTypeSampledImage %95 
                                         f32 %107 = OpConstant 3.674022E-40 
                                         u32 %109 = OpConstant 0 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                    UniformConstant sampler* %113 = OpVariable UniformConstant 
                              Private f32_4* %134 = OpVariable Private 
                                             %137 = OpTypeArray %10 %17 
                                             %138 = OpTypePointer Input %137 
                            Input f32_3[32]* %139 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         u32 %179 = OpConstant 2 
                                         u32 %187 = OpConstant 1 
                                Private f32* %189 = OpVariable Private 
                                         i32 %202 = OpConstant 8 
                                             %207 = OpTypePointer Output %10 
                               Output f32_3* %208 = OpVariable Output 
                                         f32 %222 = OpConstant 3.674022E-40 
                            Input f32_4[32]* %236 = OpVariable Input 
                                         i32 %256 = OpConstant 9 
                                         i32 %294 = OpConstant 3 
                              Private f32_4* %298 = OpVariable Private 
                                             %318 = OpTypeArray %6 %187 
                                             %319 = OpTypeStruct %7 %6 %318 
                                             %320 = OpTypePointer Output %319 
        Output struct {f32_4; f32; f32[1];}* %321 = OpVariable Output 
                                             %329 = OpTypePointer Output %7 
                               Output f32_3* %331 = OpVariable Output 
                                         i32 %350 = OpConstant 4 
                               Output f32_4* %368 = OpVariable Output 
                                             %376 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 1 1 
                                 Input f32_4* %24 = OpAccessChain %20 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                                        f32_2 %27 = OpFMul %15 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                                 Input f32_4* %31 = OpAccessChain %20 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_3 %34 = OpLoad %12 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 0 
                                        f32_2 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                                        f32_2 %39 = OpFAdd %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                 Input f32_4* %43 = OpAccessChain %20 %42 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_3 %46 = OpLoad %12 
                                        f32_2 %47 = OpVectorShuffle %46 %46 2 2 
                                        f32_2 %48 = OpFMul %45 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                                        f32_2 %51 = OpFAdd %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               Uniform f32_4* %66 = OpAccessChain %63 %64 
                                        f32_4 %67 = OpLoad %66 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                        f32_2 %69 = OpFMul %55 %68 
                               Uniform f32_4* %70 = OpAccessChain %63 %64 
                                        f32_4 %71 = OpLoad %70 
                                        f32_2 %72 = OpVectorShuffle %71 %71 2 3 
                                        f32_2 %73 = OpFAdd %69 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %73 4 5 2 3 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %63 %30 
                                        f32_4 %77 = OpLoad %76 
                                        f32_2 %78 = OpVectorShuffle %77 %77 1 1 
                                 Uniform f32* %81 = OpAccessChain %63 %79 
                                          f32 %82 = OpLoad %81 
                                 Uniform f32* %84 = OpAccessChain %63 %83 
                                          f32 %85 = OpLoad %84 
                                        f32_2 %86 = OpCompositeConstruct %82 %85 
                                        f32_2 %87 = OpFMul %78 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_2 %90 = OpFAdd %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 2 3 
                                                      OpStore %9 %92 
                          read_only Texture2D %98 = OpLoad %97 
                                     sampler %102 = OpLoad %101 
                  read_only Texture2DSampled %104 = OpSampledImage %98 %102 
                                       f32_4 %105 = OpLoad %9 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %108 = OpImageSampleExplicitLod %104 %106 Lod %7 
                                         f32 %110 = OpCompositeExtract %108 0 
                                                      OpStore %94 %110 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %114 = OpLoad %113 
                  read_only Texture2DSampled %115 = OpSampledImage %112 %114 
                                       f32_4 %116 = OpLoad %9 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpImageSampleExplicitLod %115 %117 Lod %7 
                                         f32 %119 = OpCompositeExtract %118 0 
                                Private f32* %120 = OpAccessChain %9 %109 
                                                      OpStore %120 %119 
                                Private f32* %121 = OpAccessChain %9 %109 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpLoad %94 
                                         f32 %124 = OpFMul %122 %123 
                                Private f32* %125 = OpAccessChain %9 %109 
                                                      OpStore %125 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                              Uniform f32_4* %128 = OpAccessChain %63 %42 %22 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %127 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %9 %133 
                                       f32_3 %135 = OpLoad %12 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                                Input f32_3* %140 = OpAccessChain %139 %22 
                                       f32_3 %141 = OpLoad %140 
                                       f32_3 %142 = OpFMul %136 %141 
                                       f32_4 %143 = OpLoad %134 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %134 %144 
                                Input f32_3* %145 = OpAccessChain %139 %30 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpLoad %12 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 0 0 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %134 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %149 %151 
                                       f32_4 %153 = OpLoad %134 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %134 %154 
                                Input f32_3* %155 = OpAccessChain %139 %42 
                                       f32_3 %156 = OpLoad %155 
                                       f32_3 %157 = OpLoad %12 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %134 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %134 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %134 %164 
                                       f32_4 %166 = OpLoad %134 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                              Uniform f32_4* %168 = OpAccessChain %63 %42 %30 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %167 %170 
                                Private f32* %172 = OpAccessChain %165 %109 
                                                      OpStore %172 %171 
                                       f32_4 %173 = OpLoad %134 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                              Uniform f32_4* %175 = OpAccessChain %63 %42 %42 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %165 %179 
                                                      OpStore %180 %178 
                                       f32_4 %181 = OpLoad %134 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                              Uniform f32_4* %183 = OpAccessChain %63 %42 %22 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %182 %185 
                                Private f32* %188 = OpAccessChain %165 %187 
                                                      OpStore %188 %186 
                                       f32_4 %190 = OpLoad %165 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %165 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %191 %193 
                                                      OpStore %189 %194 
                                         f32 %195 = OpLoad %189 
                                         f32 %196 = OpExtInst %1 32 %195 
                                                      OpStore %189 %196 
                                Private f32* %197 = OpAccessChain %165 %187 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFNegate %198 
                                         f32 %200 = OpLoad %189 
                                         f32 %201 = OpFMul %199 %200 
                                Uniform f32* %203 = OpAccessChain %63 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFAdd %201 %204 
                                Private f32* %206 = OpAccessChain %134 %109 
                                                      OpStore %206 %205 
                                         f32 %209 = OpLoad %189 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_4 %211 = OpLoad %165 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFMul %210 %212 
                                                      OpStore %208 %213 
                                Private f32* %214 = OpAccessChain %134 %109 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpExtInst %1 4 %215 
                                Uniform f32* %217 = OpAccessChain %63 %202 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                         f32 %220 = OpFAdd %216 %219 
                                                      OpStore %189 %220 
                                         f32 %221 = OpLoad %189 
                                         f32 %223 = OpExtInst %1 43 %221 %107 %222 
                                                      OpStore %189 %223 
                                         f32 %224 = OpLoad %189 
                                         f32 %225 = OpFNegate %224 
                                         f32 %226 = OpFAdd %225 %222 
                                                      OpStore %189 %226 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                         f32 %229 = OpLoad %189 
                                       f32_3 %230 = OpCompositeConstruct %229 %229 %229 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_3 %234 = OpLoad %12 
                                       f32_4 %235 = OpVectorShuffle %234 %234 1 1 1 1 
                                Input f32_4* %237 = OpAccessChain %236 %22 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpFMul %235 %238 
                                                      OpStore %134 %239 
                                Input f32_4* %240 = OpAccessChain %236 %30 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpLoad %12 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpFMul %241 %243 
                                       f32_4 %245 = OpLoad %134 
                                       f32_4 %246 = OpFAdd %244 %245 
                                                      OpStore %134 %246 
                                Input f32_4* %247 = OpAccessChain %236 %42 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpLoad %12 
                                       f32_4 %250 = OpVectorShuffle %249 %249 2 2 2 2 
                                       f32_4 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %134 
                                       f32_4 %253 = OpFAdd %251 %252 
                                                      OpStore %134 %253 
                                       f32_4 %254 = OpLoad %9 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                Uniform f32* %257 = OpAccessChain %63 %256 
                                         f32 %258 = OpLoad %257 
                                Uniform f32* %259 = OpAccessChain %63 %256 
                                         f32 %260 = OpLoad %259 
                                Uniform f32* %261 = OpAccessChain %63 %256 
                                         f32 %262 = OpLoad %261 
                                       f32_3 %263 = OpCompositeConstruct %258 %260 %262 
                                         f32 %264 = OpCompositeExtract %263 0 
                                         f32 %265 = OpCompositeExtract %263 1 
                                         f32 %266 = OpCompositeExtract %263 2 
                                       f32_3 %267 = OpCompositeConstruct %264 %265 %266 
                                       f32_3 %268 = OpFMul %255 %267 
                                       f32_4 %269 = OpLoad %134 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %9 %273 
                                       f32_4 %274 = OpLoad %9 
                                       f32_4 %275 = OpVectorShuffle %274 %274 1 1 1 1 
                              Uniform f32_4* %276 = OpAccessChain %63 %22 %22 
                                       f32_4 %277 = OpLoad %276 
                                       f32_4 %278 = OpFMul %275 %277 
                                                      OpStore %165 %278 
                              Uniform f32_4* %279 = OpAccessChain %63 %22 %30 
                                       f32_4 %280 = OpLoad %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %281 0 0 0 0 
                                       f32_4 %283 = OpFMul %280 %282 
                                       f32_4 %284 = OpLoad %165 
                                       f32_4 %285 = OpFAdd %283 %284 
                                                      OpStore %165 %285 
                              Uniform f32_4* %286 = OpAccessChain %63 %22 %42 
                                       f32_4 %287 = OpLoad %286 
                                       f32_4 %288 = OpLoad %9 
                                       f32_4 %289 = OpVectorShuffle %288 %288 2 2 2 2 
                                       f32_4 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %165 
                                       f32_4 %292 = OpFAdd %290 %291 
                                                      OpStore %9 %292 
                                       f32_4 %293 = OpLoad %9 
                              Uniform f32_4* %295 = OpAccessChain %63 %22 %294 
                                       f32_4 %296 = OpLoad %295 
                                       f32_4 %297 = OpFAdd %293 %296 
                                                      OpStore %165 %297 
                                       f32_4 %299 = OpLoad %165 
                                       f32_4 %300 = OpVectorShuffle %299 %299 1 1 1 1 
                              Uniform f32_4* %301 = OpAccessChain %63 %294 %22 
                                       f32_4 %302 = OpLoad %301 
                                       f32_4 %303 = OpFMul %300 %302 
                                                      OpStore %298 %303 
                              Uniform f32_4* %304 = OpAccessChain %63 %294 %30 
                                       f32_4 %305 = OpLoad %304 
                                       f32_4 %306 = OpLoad %165 
                                       f32_4 %307 = OpVectorShuffle %306 %306 0 0 0 0 
                                       f32_4 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %298 
                                       f32_4 %310 = OpFAdd %308 %309 
                                                      OpStore %298 %310 
                              Uniform f32_4* %311 = OpAccessChain %63 %294 %42 
                                       f32_4 %312 = OpLoad %311 
                                       f32_4 %313 = OpLoad %165 
                                       f32_4 %314 = OpVectorShuffle %313 %313 2 2 2 2 
                                       f32_4 %315 = OpFMul %312 %314 
                                       f32_4 %316 = OpLoad %298 
                                       f32_4 %317 = OpFAdd %315 %316 
                                                      OpStore %298 %317 
                              Uniform f32_4* %322 = OpAccessChain %63 %294 %294 
                                       f32_4 %323 = OpLoad %322 
                                       f32_4 %324 = OpLoad %165 
                                       f32_4 %325 = OpVectorShuffle %324 %324 3 3 3 3 
                                       f32_4 %326 = OpFMul %323 %325 
                                       f32_4 %327 = OpLoad %298 
                                       f32_4 %328 = OpFAdd %326 %327 
                               Output f32_4* %330 = OpAccessChain %321 %30 
                                                      OpStore %330 %328 
                              Uniform f32_4* %332 = OpAccessChain %63 %22 %294 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_4 %335 = OpLoad %134 
                                       f32_3 %336 = OpVectorShuffle %335 %335 3 3 3 
                                       f32_3 %337 = OpFMul %334 %336 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_3 %340 = OpFAdd %337 %339 
                                                      OpStore %331 %340 
                              Uniform f32_4* %341 = OpAccessChain %63 %22 %294 
                                       f32_4 %342 = OpLoad %341 
                                       f32_4 %343 = OpLoad %134 
                                       f32_4 %344 = OpVectorShuffle %343 %343 3 3 3 3 
                                       f32_4 %345 = OpFMul %342 %344 
                                       f32_4 %346 = OpLoad %9 
                                       f32_4 %347 = OpFAdd %345 %346 
                                                      OpStore %9 %347 
                                       f32_4 %348 = OpLoad %9 
                                       f32_4 %349 = OpVectorShuffle %348 %348 1 1 1 1 
                              Uniform f32_4* %351 = OpAccessChain %63 %350 %22 
                                       f32_4 %352 = OpLoad %351 
                                       f32_4 %353 = OpFMul %349 %352 
                                                      OpStore %134 %353 
                              Uniform f32_4* %354 = OpAccessChain %63 %350 %30 
                                       f32_4 %355 = OpLoad %354 
                                       f32_4 %356 = OpLoad %9 
                                       f32_4 %357 = OpVectorShuffle %356 %356 0 0 0 0 
                                       f32_4 %358 = OpFMul %355 %357 
                                       f32_4 %359 = OpLoad %134 
                                       f32_4 %360 = OpFAdd %358 %359 
                                                      OpStore %134 %360 
                              Uniform f32_4* %361 = OpAccessChain %63 %350 %42 
                                       f32_4 %362 = OpLoad %361 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %364 = OpVectorShuffle %363 %363 2 2 2 2 
                                       f32_4 %365 = OpFMul %362 %364 
                                       f32_4 %366 = OpLoad %134 
                                       f32_4 %367 = OpFAdd %365 %366 
                                                      OpStore %134 %367 
                              Uniform f32_4* %369 = OpAccessChain %63 %350 %294 
                                       f32_4 %370 = OpLoad %369 
                                       f32_4 %371 = OpLoad %9 
                                       f32_4 %372 = OpVectorShuffle %371 %371 3 3 3 3 
                                       f32_4 %373 = OpFMul %370 %372 
                                       f32_4 %374 = OpLoad %134 
                                       f32_4 %375 = OpFAdd %373 %374 
                                                      OpStore %368 %375 
                                 Output f32* %377 = OpAccessChain %321 %30 %187 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpFNegate %378 
                                 Output f32* %380 = OpAccessChain %321 %30 %187 
                                                      OpStore %380 %379 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 410
#extension GL_ARB_explicit_attrib_location : require

in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
in  vec4 in_TEXCOORD3;
in  vec4 in_COLOR0;
layout(location = 0) out vec4 vs_INTERNALTESSPOS0;
layout(location = 1) out vec4 vs_TANGENT0;
layout(location = 2) out vec3 vs_NORMAL0;
layout(location = 3) out vec4 vs_TEXCOORD0;
layout(location = 4) out vec4 vs_TEXCOORD1;
layout(location = 5) out vec4 vs_TEXCOORD2;
layout(location = 6) out vec4 vs_TEXCOORD3;
layout(location = 7) out vec4 vs_COLOR0;
void main()
{
    vs_INTERNALTESSPOS0 = in_POSITION0;
    vs_TANGENT0 = in_TANGENT0;
    vs_NORMAL0.xyz = in_NORMAL0.xyz;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD3;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Y_Mask;
uniform 	float _FresnelBias;
uniform 	float _FresnelScale;
uniform 	float _FresnelPower;
uniform 	float _Alpha;
UNITY_LOCATION(0) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(1) uniform  samplerCube _LightTexture0;
layout(location = 0) in  vec3 ds_TEXCOORD0;
layout(location = 1) in  vec3 ds_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
float u_xlat3;
float u_xlat6;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlat0.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = max(u_xlat9, 0.00100000005);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat10 = u_xlat9 * u_xlat9;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat9 = u_xlat9 * u_xlat10;
    u_xlat9 = u_xlat9 * 0.959999979 + 0.0399999991;
    u_xlat10 = dot(ds_TEXCOORD0.xyz, ds_TEXCOORD0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat2.xyz = vec3(u_xlat10) * ds_TEXCOORD0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat3 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat6 = abs(u_xlat0.x) + u_xlat3;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = _FresnelScale * u_xlat0.x + _FresnelBias;
    u_xlat6 = u_xlat6 + 9.99999975e-06;
    u_xlat6 = 0.5 / u_xlat6;
    u_xlat6 = u_xlat6 * 0.999999881;
    u_xlat3 = u_xlat3 * u_xlat6;
    u_xlat1.xyz = ds_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * ds_TEXCOORD1.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * ds_TEXCOORD1.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
    u_xlat6 = texture(_LightTextureB0, vec2(u_xlat6)).x;
    u_xlat6 = u_xlat1.x * u_xlat6;
    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
    u_xlat1.xyz = vec3(u_xlat3) * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat3 = (-ds_TEXCOORD0.y) + _Y_Mask;
    u_xlat3 = abs(u_xlat3) + (-_Y_Mask);
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat3 = (-u_xlat3) + 1.0;
    u_xlat0.x = u_xlat3 * u_xlat0.x;
    SV_Target0.w = u_xlat0.x * _Alpha;
    return;
}

#endif
#ifdef HULL
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(vertices=3) out;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	float _EdgeLength;
layout(location = 0) in vec4 vs_INTERNALTESSPOS0[];
layout(location = 0) out vec4 hs_INTERNALTESSPOS0[];
layout(location = 1) in vec4 vs_TANGENT0[];
layout(location = 1) out vec4 hs_TANGENT0[];
layout(location = 2) in vec3 vs_NORMAL0[];
layout(location = 2) out vec3 hs_NORMAL0[];
layout(location = 3) in vec4 vs_TEXCOORD0[];
layout(location = 3) out vec4 hs_TEXCOORD0[];
layout(location = 4) in vec4 vs_TEXCOORD1[];
layout(location = 4) out vec4 hs_TEXCOORD1[];
layout(location = 5) in vec4 vs_TEXCOORD2[];
layout(location = 5) out vec4 hs_TEXCOORD2[];
layout(location = 6) in vec4 vs_TEXCOORD3[];
layout(location = 6) out vec4 hs_TEXCOORD3[];
layout(location = 7) in vec4 vs_COLOR0[];
layout(location = 7) out vec4 hs_COLOR0[];
void passthrough_ctrl_points()
{
    hs_INTERNALTESSPOS0[gl_InvocationID] = vs_INTERNALTESSPOS0[gl_InvocationID];
    hs_TANGENT0[gl_InvocationID] = vs_TANGENT0[gl_InvocationID];
    hs_NORMAL0[gl_InvocationID] = vs_NORMAL0[gl_InvocationID];
    hs_TEXCOORD0[gl_InvocationID] = vs_TEXCOORD0[gl_InvocationID];
    hs_TEXCOORD1[gl_InvocationID] = vs_TEXCOORD1[gl_InvocationID];
    hs_TEXCOORD2[gl_InvocationID] = vs_TEXCOORD2[gl_InvocationID];
    hs_TEXCOORD3[gl_InvocationID] = vs_TEXCOORD3[gl_InvocationID];
    hs_COLOR0[gl_InvocationID] = vs_COLOR0[gl_InvocationID];
}
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
float u_xlat13;
void fork_phase2(int phaseInstanceID)
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[1].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[1].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[2].www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _EdgeLength;
    u_xlat2.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _ScreenParams.y;
    u_xlat12 = u_xlat13 / u_xlat12;
    gl_TessLevelOuter[0] = max(u_xlat12, 1.0);
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[0].www + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _ScreenParams.y;
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _EdgeLength;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    gl_TessLevelOuter[1] = max(u_xlat12, 1.0);
    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _ScreenParams.y;
    u_xlat4.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _EdgeLength;
    u_xlat0.x = u_xlat0.x / u_xlat4.x;
    gl_TessLevelOuter[2] = max(u_xlat0.x, 1.0);
}
void join_phase3(int phaseInstanceID)
{
    u_xlat0.x = gl_TessLevelOuter[2] + gl_TessLevelOuter[2];
    u_xlat0.x = u_xlat0.x + gl_TessLevelOuter[2];
    gl_TessLevelInner[0] = u_xlat0.x * 0.333333343;
}
void main()
{
    passthrough_ctrl_points();
    barrier();
    if (gl_InvocationID == 0)
    {
        fork_phase2(0);
        join_phase3(0);
    }
}

#endif
#ifdef DOMAIN
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(ccw) in;
layout(fractional_odd_spacing) in;
layout(triangles) in;
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _u;
uniform 	float _v;
uniform 	vec4 _Flamenoise_ST;
uniform 	float _Y_Mask;
uniform 	float _FlameHeight;
UNITY_LOCATION(2) uniform  sampler2D _FlameWave;
UNITY_LOCATION(3) uniform  sampler2D _Flamenoise;
layout(location = 0) in  vec4 hs_INTERNALTESSPOS0 [];
layout(location = 2) in  vec3 hs_NORMAL0 [];
layout(location = 3) in  vec4 hs_TEXCOORD0 [];
layout(location = 0) out vec3 ds_TEXCOORD0;
layout(location = 1) out vec3 ds_TEXCOORD1;
layout(location = 2) out vec3 ds_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = gl_TessCoord.yy * hs_TEXCOORD0[1].xy;
    u_xlat0.xy = hs_TEXCOORD0[0].xy * gl_TessCoord.xx + u_xlat0.xy;
    u_xlat0.xy = hs_TEXCOORD0[2].xy * gl_TessCoord.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _Flamenoise_ST.xy + _Flamenoise_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_u, _v) + u_xlat0.xy;
    u_xlat8 = textureLod(_FlameWave, u_xlat0.xy, 0.0).x;
    u_xlat0.x = textureLod(_Flamenoise, u_xlat0.xy, 0.0).x;
    u_xlat0.x = u_xlat0.x * u_xlat8;
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat1.xyz = gl_TessCoord.yyy * hs_NORMAL0[1].xyz;
    u_xlat1.xyz = hs_NORMAL0[0].xyz * gl_TessCoord.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hs_NORMAL0[2].xyz * gl_TessCoord.zzz + u_xlat1.xyz;
    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.x = (-u_xlat2.y) * u_xlat12 + _Y_Mask;
    ds_TEXCOORD0.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = abs(u_xlat1.x) + (-_Y_Mask);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
    u_xlat1 = gl_TessCoord.yyyy * hs_INTERNALTESSPOS0[1];
    u_xlat1 = hs_INTERNALTESSPOS0[0] * gl_TessCoord.xxxx + u_xlat1;
    u_xlat1 = hs_INTERNALTESSPOS0[2] * gl_TessCoord.zzzz + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_FlameHeight, _FlameHeight, _FlameHeight)) + u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    ds_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    ds_TEXCOORD2.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 38
; Schema: 0
                               OpCapability Shader 
                        %1 = OpExtInstImport "GLSL.std.450" 
                               OpMemoryModel Logical GLSL450 
                               OpEntryPoint Vertex %4 "main" %9 %11 %13 %14 %18 %20 %22 %23 %25 %26 %28 %29 %31 %32 %34 %35 
                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                               OpDecorate %9 Location 9 
                               OpDecorate %11 Location 11 
                               OpDecorate %13 Location 13 
                               OpDecorate %14 Location 14 
                               OpDecorate %18 Location 18 
                               OpDecorate %20 Location 20 
                               OpDecorate vs_TEXCOORD0 Location 22 
                               OpDecorate %23 Location 23 
                               OpDecorate vs_TEXCOORD1 Location 25 
                               OpDecorate %26 Location 26 
                               OpDecorate vs_TEXCOORD2 Location 28 
                               OpDecorate %29 Location 29 
                               OpDecorate vs_TEXCOORD3 Location 31 
                               OpDecorate %32 Location 32 
                               OpDecorate %34 Location 34 
                               OpDecorate %35 Location 35 
                        %2 = OpTypeVoid 
                        %3 = OpTypeFunction %2 
                        %6 = OpTypeFloat 32 
                        %7 = OpTypeVector %6 4 
                        %8 = OpTypePointer Output %7 
          Output f32_4* %9 = OpVariable Output 
                       %10 = OpTypePointer Input %7 
          Input f32_4* %11 = OpVariable Input 
         Output f32_4* %13 = OpVariable Output 
          Input f32_4* %14 = OpVariable Input 
                       %16 = OpTypeVector %6 3 
                       %17 = OpTypePointer Output %16 
         Output f32_3* %18 = OpVariable Output 
                       %19 = OpTypePointer Input %16 
          Input f32_3* %20 = OpVariable Input 
Output f32_4* vs_TEXCOORD0 = OpVariable Output 
          Input f32_4* %23 = OpVariable Input 
Output f32_4* vs_TEXCOORD1 = OpVariable Output 
          Input f32_4* %26 = OpVariable Input 
Output f32_4* vs_TEXCOORD2 = OpVariable Output 
          Input f32_4* %29 = OpVariable Input 
Output f32_4* vs_TEXCOORD3 = OpVariable Output 
          Input f32_4* %32 = OpVariable Input 
         Output f32_4* %34 = OpVariable Output 
          Input f32_4* %35 = OpVariable Input 
                   void %4 = OpFunction None %3 
                        %5 = OpLabel 
                 f32_4 %12 = OpLoad %11 
                               OpStore %9 %12 
                 f32_4 %15 = OpLoad %14 
                               OpStore %13 %15 
                 f32_3 %21 = OpLoad %20 
                               OpStore %18 %21 
                 f32_4 %24 = OpLoad %23 
                               OpStore vs_TEXCOORD0 %24 
                 f32_4 %27 = OpLoad %26 
                               OpStore vs_TEXCOORD1 %27 
                 f32_4 %30 = OpLoad %29 
                               OpStore vs_TEXCOORD2 %30 
                 f32_4 %33 = OpLoad %32 
                               OpStore vs_TEXCOORD3 %33 
                 f32_4 %36 = OpLoad %35 
                               OpStore %34 %36 
                               OpReturn
                               OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 287
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %246 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %205 DescriptorSet 205 
                                                      OpDecorate %205 Binding 205 
                                                      OpDecorate %209 DescriptorSet 209 
                                                      OpDecorate %209 Binding 209 
                                                      OpDecorate %220 DescriptorSet 220 
                                                      OpDecorate %220 Binding 220 
                                                      OpDecorate %222 DescriptorSet 222 
                                                      OpDecorate %222 Binding 222 
                                                      OpDecorate %246 Location 246 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %7 %14 %14 %17 %6 %6 %6 %6 %6 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32; f32; f32; f32; f32;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %7 
                                              %27 = OpTypePointer Private %6 
                                 Private f32* %28 = OpVariable Private 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 1 
                                              %42 = OpTypePointer Uniform %14 
                               Private f32_3* %52 = OpVariable Private 
                                          f32 %67 = OpConstant 3.674022E-40 
                                          f32 %79 = OpConstant 3.674022E-40 
                                          f32 %80 = OpConstant 3.674022E-40 
                                 Private f32* %85 = OpVariable Private 
                                          f32 %96 = OpConstant 3.674022E-40 
                                          f32 %98 = OpConstant 3.674022E-40 
                                Input f32_3* %100 = OpVariable Input 
                                         u32 %113 = OpConstant 0 
                                Private f32* %115 = OpVariable Private 
                                Private f32* %121 = OpVariable Private 
                                         i32 %138 = OpConstant 7 
                                             %139 = OpTypePointer Uniform %6 
                                         i32 %148 = OpConstant 6 
                                         i32 %154 = OpConstant 5 
                                         f32 %160 = OpConstant 3.674022E-40 
                                         f32 %162 = OpConstant 3.674022E-40 
                                         f32 %169 = OpConstant 3.674022E-40 
                                         i32 %173 = OpConstant 3 
                                         i32 %186 = OpConstant 2 
                                             %203 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %204 = OpTypePointer UniformConstant %203 
      UniformConstant read_only TextureCube* %205 = OpVariable UniformConstant 
                                             %207 = OpTypeSampler 
                                             %208 = OpTypePointer UniformConstant %207 
                    UniformConstant sampler* %209 = OpVariable UniformConstant 
                                             %211 = OpTypeSampledImage %203 
                                         u32 %215 = OpConstant 3 
                                             %218 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %219 = OpTypePointer UniformConstant %218 
        UniformConstant read_only Texture2D* %220 = OpVariable UniformConstant 
                    UniformConstant sampler* %222 = OpVariable UniformConstant 
                                             %224 = OpTypeSampledImage %218 
                                             %227 = OpTypeVector %6 2 
                                             %245 = OpTypePointer Output %14 
                               Output f32_4* %246 = OpVariable Output 
                                         u32 %253 = OpConstant 1 
                                             %254 = OpTypePointer Input %6 
                                         i32 %258 = OpConstant 4 
                                         i32 %280 = OpConstant 8 
                                             %284 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad %11 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %13 %25 
                                                      OpStore %9 %26 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpLoad %9 
                                          f32 %31 = OpDot %29 %30 
                                                      OpStore %28 %31 
                                          f32 %32 = OpLoad %28 
                                          f32 %33 = OpExtInst %1 32 %32 
                                                      OpStore %28 %33 
                                          f32 %34 = OpLoad %28 
                                        f32_3 %35 = OpCompositeConstruct %34 %34 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpFMul %35 %36 
                                                      OpStore %9 %37 
                                        f32_3 %39 = OpLoad %11 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_4* %43 = OpAccessChain %20 %41 
                                        f32_4 %44 = OpLoad %43 
                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                                        f32_3 %46 = OpFAdd %40 %45 
                                                      OpStore %38 %46 
                                        f32_3 %47 = OpLoad %38 
                                        f32_3 %48 = OpLoad %38 
                                          f32 %49 = OpDot %47 %48 
                                                      OpStore %28 %49 
                                          f32 %50 = OpLoad %28 
                                          f32 %51 = OpExtInst %1 32 %50 
                                                      OpStore %28 %51 
                                        f32_3 %53 = OpLoad %38 
                                          f32 %54 = OpLoad %28 
                                        f32_3 %55 = OpCompositeConstruct %54 %54 %54 
                                        f32_3 %56 = OpFMul %53 %55 
                                        f32_3 %57 = OpLoad %9 
                                        f32_3 %58 = OpFAdd %56 %57 
                                                      OpStore %52 %58 
                                          f32 %59 = OpLoad %28 
                                        f32_3 %60 = OpCompositeConstruct %59 %59 %59 
                                        f32_3 %61 = OpLoad %38 
                                        f32_3 %62 = OpFMul %60 %61 
                                                      OpStore %38 %62 
                                        f32_3 %63 = OpLoad %52 
                                        f32_3 %64 = OpLoad %52 
                                          f32 %65 = OpDot %63 %64 
                                                      OpStore %28 %65 
                                          f32 %66 = OpLoad %28 
                                          f32 %68 = OpExtInst %1 40 %66 %67 
                                                      OpStore %28 %68 
                                          f32 %69 = OpLoad %28 
                                          f32 %70 = OpExtInst %1 32 %69 
                                                      OpStore %28 %70 
                                          f32 %71 = OpLoad %28 
                                        f32_3 %72 = OpCompositeConstruct %71 %71 %71 
                                        f32_3 %73 = OpLoad %52 
                                        f32_3 %74 = OpFMul %72 %73 
                                                      OpStore %52 %74 
                                        f32_3 %75 = OpLoad %38 
                                        f32_3 %76 = OpLoad %52 
                                          f32 %77 = OpDot %75 %76 
                                                      OpStore %28 %77 
                                          f32 %78 = OpLoad %28 
                                          f32 %81 = OpExtInst %1 43 %78 %79 %80 
                                                      OpStore %28 %81 
                                          f32 %82 = OpLoad %28 
                                          f32 %83 = OpFNegate %82 
                                          f32 %84 = OpFAdd %83 %80 
                                                      OpStore %28 %84 
                                          f32 %86 = OpLoad %28 
                                          f32 %87 = OpLoad %28 
                                          f32 %88 = OpFMul %86 %87 
                                                      OpStore %85 %88 
                                          f32 %89 = OpLoad %85 
                                          f32 %90 = OpLoad %85 
                                          f32 %91 = OpFMul %89 %90 
                                                      OpStore %85 %91 
                                          f32 %92 = OpLoad %28 
                                          f32 %93 = OpLoad %85 
                                          f32 %94 = OpFMul %92 %93 
                                                      OpStore %28 %94 
                                          f32 %95 = OpLoad %28 
                                          f32 %97 = OpFMul %95 %96 
                                          f32 %99 = OpFAdd %97 %98 
                                                      OpStore %28 %99 
                                       f32_3 %101 = OpLoad %100 
                                       f32_3 %102 = OpLoad %100 
                                         f32 %103 = OpDot %101 %102 
                                                      OpStore %85 %103 
                                         f32 %104 = OpLoad %85 
                                         f32 %105 = OpExtInst %1 32 %104 
                                                      OpStore %85 %105 
                                         f32 %106 = OpLoad %85 
                                       f32_3 %107 = OpCompositeConstruct %106 %106 %106 
                                       f32_3 %108 = OpLoad %100 
                                       f32_3 %109 = OpFMul %107 %108 
                                                      OpStore %52 %109 
                                       f32_3 %110 = OpLoad %52 
                                       f32_3 %111 = OpLoad %9 
                                         f32 %112 = OpDot %110 %111 
                                Private f32* %114 = OpAccessChain %9 %113 
                                                      OpStore %114 %112 
                                       f32_3 %116 = OpLoad %52 
                                       f32_3 %117 = OpLoad %38 
                                         f32 %118 = OpDot %116 %117 
                                                      OpStore %115 %118 
                                         f32 %119 = OpLoad %115 
                                         f32 %120 = OpExtInst %1 43 %119 %79 %80 
                                                      OpStore %115 %120 
                                Private f32* %122 = OpAccessChain %9 %113 
                                         f32 %123 = OpLoad %122 
                                         f32 %124 = OpExtInst %1 4 %123 
                                         f32 %125 = OpLoad %115 
                                         f32 %126 = OpFAdd %124 %125 
                                                      OpStore %121 %126 
                                Private f32* %127 = OpAccessChain %9 %113 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFNegate %128 
                                         f32 %130 = OpFAdd %129 %80 
                                Private f32* %131 = OpAccessChain %9 %113 
                                                      OpStore %131 %130 
                                Private f32* %132 = OpAccessChain %9 %113 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpExtInst %1 30 %133 
                                Private f32* %135 = OpAccessChain %9 %113 
                                                      OpStore %135 %134 
                                Private f32* %136 = OpAccessChain %9 %113 
                                         f32 %137 = OpLoad %136 
                                Uniform f32* %140 = OpAccessChain %20 %138 
                                         f32 %141 = OpLoad %140 
                                         f32 %142 = OpFMul %137 %141 
                                Private f32* %143 = OpAccessChain %9 %113 
                                                      OpStore %143 %142 
                                Private f32* %144 = OpAccessChain %9 %113 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpExtInst %1 29 %145 
                                Private f32* %147 = OpAccessChain %9 %113 
                                                      OpStore %147 %146 
                                Uniform f32* %149 = OpAccessChain %20 %148 
                                         f32 %150 = OpLoad %149 
                                Private f32* %151 = OpAccessChain %9 %113 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %150 %152 
                                Uniform f32* %155 = OpAccessChain %20 %154 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFAdd %153 %156 
                                Private f32* %158 = OpAccessChain %9 %113 
                                                      OpStore %158 %157 
                                         f32 %159 = OpLoad %121 
                                         f32 %161 = OpFAdd %159 %160 
                                                      OpStore %121 %161 
                                         f32 %163 = OpLoad %121 
                                         f32 %164 = OpFDiv %162 %163 
                                                      OpStore %121 %164 
                                         f32 %165 = OpLoad %115 
                                         f32 %166 = OpLoad %121 
                                         f32 %167 = OpFMul %165 %166 
                                                      OpStore %115 %167 
                                         f32 %168 = OpLoad %115 
                                         f32 %170 = OpFMul %168 %169 
                                                      OpStore %115 %170 
                                       f32_3 %171 = OpLoad %11 
                                       f32_3 %172 = OpVectorShuffle %171 %171 1 1 1 
                              Uniform f32_4* %174 = OpAccessChain %20 %173 %41 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpFMul %172 %176 
                                                      OpStore %38 %177 
                              Uniform f32_4* %178 = OpAccessChain %20 %173 %22 
                                       f32_4 %179 = OpLoad %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpLoad %11 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 0 0 
                                       f32_3 %183 = OpFMul %180 %182 
                                       f32_3 %184 = OpLoad %38 
                                       f32_3 %185 = OpFAdd %183 %184 
                                                      OpStore %38 %185 
                              Uniform f32_4* %187 = OpAccessChain %20 %173 %186 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpLoad %11 
                                       f32_3 %191 = OpVectorShuffle %190 %190 2 2 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_3 %193 = OpLoad %38 
                                       f32_3 %194 = OpFAdd %192 %193 
                                                      OpStore %38 %194 
                                       f32_3 %195 = OpLoad %38 
                              Uniform f32_4* %196 = OpAccessChain %20 %173 %173 
                                       f32_4 %197 = OpLoad %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFAdd %195 %198 
                                                      OpStore %38 %199 
                                       f32_3 %200 = OpLoad %38 
                                       f32_3 %201 = OpLoad %38 
                                         f32 %202 = OpDot %200 %201 
                                                      OpStore %121 %202 
                       read_only TextureCube %206 = OpLoad %205 
                                     sampler %210 = OpLoad %209 
                read_only TextureCubeSampled %212 = OpSampledImage %206 %210 
                                       f32_3 %213 = OpLoad %38 
                                       f32_4 %214 = OpImageSampleImplicitLod %212 %213 
                                         f32 %216 = OpCompositeExtract %214 3 
                                Private f32* %217 = OpAccessChain %38 %113 
                                                      OpStore %217 %216 
                         read_only Texture2D %221 = OpLoad %220 
                                     sampler %223 = OpLoad %222 
                  read_only Texture2DSampled %225 = OpSampledImage %221 %223 
                                         f32 %226 = OpLoad %121 
                                       f32_2 %228 = OpCompositeConstruct %226 %226 
                                       f32_4 %229 = OpImageSampleImplicitLod %225 %228 
                                         f32 %230 = OpCompositeExtract %229 0 
                                                      OpStore %121 %230 
                                Private f32* %231 = OpAccessChain %38 %113 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpLoad %121 
                                         f32 %234 = OpFMul %232 %233 
                                                      OpStore %121 %234 
                                         f32 %235 = OpLoad %121 
                                       f32_3 %236 = OpCompositeConstruct %235 %235 %235 
                              Uniform f32_4* %237 = OpAccessChain %20 %186 
                                       f32_4 %238 = OpLoad %237 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpFMul %236 %239 
                                                      OpStore %38 %240 
                                         f32 %241 = OpLoad %115 
                                       f32_3 %242 = OpCompositeConstruct %241 %241 %241 
                                       f32_3 %243 = OpLoad %38 
                                       f32_3 %244 = OpFMul %242 %243 
                                                      OpStore %38 %244 
                                         f32 %247 = OpLoad %28 
                                       f32_3 %248 = OpCompositeConstruct %247 %247 %247 
                                       f32_3 %249 = OpLoad %38 
                                       f32_3 %250 = OpFMul %248 %249 
                                       f32_4 %251 = OpLoad %246 
                                       f32_4 %252 = OpVectorShuffle %251 %250 4 5 6 3 
                                                      OpStore %246 %252 
                                  Input f32* %255 = OpAccessChain %100 %253 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpFNegate %256 
                                Uniform f32* %259 = OpAccessChain %20 %258 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFAdd %257 %260 
                                                      OpStore %115 %261 
                                         f32 %262 = OpLoad %115 
                                         f32 %263 = OpExtInst %1 4 %262 
                                Uniform f32* %264 = OpAccessChain %20 %258 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFNegate %265 
                                         f32 %267 = OpFAdd %263 %266 
                                                      OpStore %115 %267 
                                         f32 %268 = OpLoad %115 
                                         f32 %269 = OpExtInst %1 43 %268 %79 %80 
                                                      OpStore %115 %269 
                                         f32 %270 = OpLoad %115 
                                         f32 %271 = OpFNegate %270 
                                         f32 %272 = OpFAdd %271 %80 
                                                      OpStore %115 %272 
                                         f32 %273 = OpLoad %115 
                                Private f32* %274 = OpAccessChain %9 %113 
                                         f32 %275 = OpLoad %274 
                                         f32 %276 = OpFMul %273 %275 
                                Private f32* %277 = OpAccessChain %9 %113 
                                                      OpStore %277 %276 
                                Private f32* %278 = OpAccessChain %9 %113 
                                         f32 %279 = OpLoad %278 
                                Uniform f32* %281 = OpAccessChain %20 %280 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpFMul %279 %282 
                                 Output f32* %285 = OpAccessChain %246 %215 
                                                      OpStore %285 %283 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 387
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationControl %4 "main" %23 %25 %30 %37 %39 %47 %51 %58 %60 %65 %67 %72 %74 %79 %81 %86 %88 %219 %371 
                                                      OpExecutionMode %4 OutputVertices 4 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %25 BuiltIn WorkgroupSize 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %37 Location 37 
                                                      OpDecorate %39 Location 39 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %51 Location 51 
                                                      OpDecorate %58 Location 58 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate %65 Location 65 
                                                      OpDecorate vs_TEXCOORD1 Location 67 
                                                      OpDecorate %72 Location 72 
                                                      OpDecorate vs_TEXCOORD2 Location 74 
                                                      OpDecorate %79 Location 79 
                                                      OpDecorate vs_TEXCOORD3 Location 81 
                                                      OpDecorate %86 Location 86 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %96 ArrayStride 96 
                                                      OpMemberDecorate %97 0 Offset 97 
                                                      OpMemberDecorate %97 1 Offset 97 
                                                      OpMemberDecorate %97 2 Offset 97 
                                                      OpMemberDecorate %97 3 Offset 97 
                                                      OpDecorate %97 Block 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate %219 Patch 
                                                      OpDecorate %219 BuiltIn 219 
                                                      OpDecorate %371 Patch 
                                                      OpDecorate %371 BuiltIn 371 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %8 = OpTypeInt 32 1 
                                               %9 = OpTypePointer Function %8 
                                              %10 = OpTypeFunction %2 %9 
                                              %17 = OpTypeFloat 32 
                                              %18 = OpTypeVector %17 4 
                                              %19 = OpTypeInt 32 0 
                                          u32 %20 = OpConstant 3 
                                              %21 = OpTypeArray %18 %20 
                                              %22 = OpTypePointer Output %21 
                             Output f32_4[3]* %23 = OpVariable Output 
                                              %24 = OpTypePointer Input %8 
                                   Input i32* %25 = OpVariable Input 
                                          u32 %27 = OpConstant 32 
                                              %28 = OpTypeArray %18 %27 
                                              %29 = OpTypePointer Input %28 
                             Input f32_4[32]* %30 = OpVariable Input 
                                              %32 = OpTypePointer Input %18 
                                              %35 = OpTypePointer Output %18 
                             Output f32_4[3]* %37 = OpVariable Output 
                             Input f32_4[32]* %39 = OpVariable Input 
                                              %44 = OpTypeVector %17 3 
                                              %45 = OpTypeArray %44 %20 
                                              %46 = OpTypePointer Output %45 
                             Output f32_3[3]* %47 = OpVariable Output 
                                              %49 = OpTypeArray %44 %27 
                                              %50 = OpTypePointer Input %49 
                             Input f32_3[32]* %51 = OpVariable Input 
                                              %53 = OpTypePointer Input %44 
                                              %56 = OpTypePointer Output %44 
                             Output f32_4[3]* %58 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD0 = OpVariable Input 
                             Output f32_4[3]* %65 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD1 = OpVariable Input 
                             Output f32_4[3]* %72 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD2 = OpVariable Input 
                             Output f32_4[3]* %79 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD3 = OpVariable Input 
                             Output f32_4[3]* %86 = OpVariable Output 
                             Input f32_4[32]* %88 = OpVariable Input 
                                              %93 = OpTypePointer Private %44 
                               Private f32_3* %94 = OpVariable Private 
                                          u32 %95 = OpConstant 4 
                                              %96 = OpTypeArray %18 %95 
                                              %97 = OpTypeStruct %44 %18 %96 %17 
                                              %98 = OpTypePointer Uniform %97 
Uniform struct {f32_3; f32_4; f32_4[4]; f32;}* %99 = OpVariable Uniform 
                                         i32 %100 = OpConstant 2 
                                         i32 %101 = OpConstant 1 
                                             %102 = OpTypePointer Uniform %18 
                                         i32 %110 = OpConstant 0 
                                         i32 %129 = OpConstant 3 
                              Private f32_3* %139 = OpVariable Private 
                              Private f32_3* %174 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                             %182 = OpTypePointer Uniform %44 
                                             %187 = OpTypePointer Private %17 
                                Private f32* %188 = OpVariable Private 
                                             %195 = OpTypePointer Uniform %17 
                                Private f32* %203 = OpVariable Private 
                                         u32 %210 = OpConstant 1 
                                             %217 = OpTypeArray %17 %95 
                                             %218 = OpTypePointer Output %217 
                              Output f32[4]* %219 = OpVariable Output 
                                         f32 %221 = OpConstant 3.674022E-40 
                                             %223 = OpTypePointer Output %17 
                              Private f32_3* %259 = OpVariable Private 
                                         u32 %285 = OpConstant 0 
                              Private f32_3* %325 = OpVariable Private 
                                         u32 %368 = OpConstant 2 
                                             %369 = OpTypeArray %17 %368 
                                             %370 = OpTypePointer Output %369 
                              Output f32[2]* %371 = OpVariable Output 
                                         f32 %374 = OpConstant 3.674022E-40 
                                             %379 = OpTypeBool 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %383 = OpVariable Function 
                               Function i32* %385 = OpVariable Function 
                                        void %377 = OpFunctionCall %6 
                                                      OpControlBarrier 368 95 285 
                                         i32 %378 = OpLoad %25 
                                        bool %380 = OpIEqual %378 %110 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %380 %381 %382 
                                             %381 = OpLabel 
                                                      OpStore %383 %110 
                                        void %384 = OpFunctionCall %12 %383 
                                                      OpStore %385 %110 
                                        void %386 = OpFunctionCall %15 %385 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
                                          void %6 = OpFunction None %3 
                                               %7 = OpLabel 
                                          i32 %26 = OpLoad %25 
                                          i32 %31 = OpLoad %25 
                                 Input f32_4* %33 = OpAccessChain %30 %31 
                                        f32_4 %34 = OpLoad %33 
                                Output f32_4* %36 = OpAccessChain %23 %26 
                                                      OpStore %36 %34 
                                          i32 %38 = OpLoad %25 
                                          i32 %40 = OpLoad %25 
                                 Input f32_4* %41 = OpAccessChain %39 %40 
                                        f32_4 %42 = OpLoad %41 
                                Output f32_4* %43 = OpAccessChain %37 %38 
                                                      OpStore %43 %42 
                                          i32 %48 = OpLoad %25 
                                          i32 %52 = OpLoad %25 
                                 Input f32_3* %54 = OpAccessChain %51 %52 
                                        f32_3 %55 = OpLoad %54 
                                Output f32_3* %57 = OpAccessChain %47 %48 
                                                      OpStore %57 %55 
                                          i32 %59 = OpLoad %25 
                                          i32 %61 = OpLoad %25 
                                 Input f32_4* %62 = OpAccessChain vs_TEXCOORD0 %61 
                                        f32_4 %63 = OpLoad %62 
                                Output f32_4* %64 = OpAccessChain %58 %59 
                                                      OpStore %64 %63 
                                          i32 %66 = OpLoad %25 
                                          i32 %68 = OpLoad %25 
                                 Input f32_4* %69 = OpAccessChain vs_TEXCOORD1 %68 
                                        f32_4 %70 = OpLoad %69 
                                Output f32_4* %71 = OpAccessChain %65 %66 
                                                      OpStore %71 %70 
                                          i32 %73 = OpLoad %25 
                                          i32 %75 = OpLoad %25 
                                 Input f32_4* %76 = OpAccessChain vs_TEXCOORD2 %75 
                                        f32_4 %77 = OpLoad %76 
                                Output f32_4* %78 = OpAccessChain %72 %73 
                                                      OpStore %78 %77 
                                          i32 %80 = OpLoad %25 
                                          i32 %82 = OpLoad %25 
                                 Input f32_4* %83 = OpAccessChain vs_TEXCOORD3 %82 
                                        f32_4 %84 = OpLoad %83 
                                Output f32_4* %85 = OpAccessChain %79 %80 
                                                      OpStore %85 %84 
                                          i32 %87 = OpLoad %25 
                                          i32 %89 = OpLoad %25 
                                 Input f32_4* %90 = OpAccessChain %88 %89 
                                        f32_4 %91 = OpLoad %90 
                                Output f32_4* %92 = OpAccessChain %86 %87 
                                                      OpStore %92 %91 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %12 = OpFunction None %10 
                                Function i32* %11 = OpFunctionParameter 
                                              %13 = OpLabel 
                              Uniform f32_4* %103 = OpAccessChain %99 %100 %101 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                Input f32_4* %106 = OpAccessChain %30 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 1 1 1 
                                       f32_3 %109 = OpFMul %105 %108 
                                                      OpStore %94 %109 
                              Uniform f32_4* %111 = OpAccessChain %99 %100 %110 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                Input f32_4* %114 = OpAccessChain %30 %101 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %113 %116 
                                       f32_3 %118 = OpLoad %94 
                                       f32_3 %119 = OpFAdd %117 %118 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %99 %100 %100 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                Input f32_4* %123 = OpAccessChain %30 %101 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 2 2 2 
                                       f32_3 %126 = OpFMul %122 %125 
                                       f32_3 %127 = OpLoad %94 
                                       f32_3 %128 = OpFAdd %126 %127 
                                                      OpStore %94 %128 
                              Uniform f32_4* %130 = OpAccessChain %99 %100 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                Input f32_4* %133 = OpAccessChain %30 %101 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 3 3 3 
                                       f32_3 %136 = OpFMul %132 %135 
                                       f32_3 %137 = OpLoad %94 
                                       f32_3 %138 = OpFAdd %136 %137 
                                                      OpStore %94 %138 
                              Uniform f32_4* %140 = OpAccessChain %99 %100 %101 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                Input f32_4* %143 = OpAccessChain %30 %100 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 1 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                                      OpStore %139 %146 
                              Uniform f32_4* %147 = OpAccessChain %99 %100 %110 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                Input f32_4* %150 = OpAccessChain %30 %100 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 0 0 
                                       f32_3 %153 = OpFMul %149 %152 
                                       f32_3 %154 = OpLoad %139 
                                       f32_3 %155 = OpFAdd %153 %154 
                                                      OpStore %139 %155 
                              Uniform f32_4* %156 = OpAccessChain %99 %100 %100 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                Input f32_4* %159 = OpAccessChain %30 %100 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 2 2 2 
                                       f32_3 %162 = OpFMul %158 %161 
                                       f32_3 %163 = OpLoad %139 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %139 %164 
                              Uniform f32_4* %165 = OpAccessChain %99 %100 %129 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                Input f32_4* %168 = OpAccessChain %30 %100 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 3 3 3 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_3 %172 = OpLoad %139 
                                       f32_3 %173 = OpFAdd %171 %172 
                                                      OpStore %139 %173 
                                       f32_3 %175 = OpLoad %94 
                                       f32_3 %176 = OpLoad %139 
                                       f32_3 %177 = OpFAdd %175 %176 
                                                      OpStore %174 %177 
                                       f32_3 %178 = OpLoad %174 
                                       f32_3 %181 = OpFMul %178 %180 
                              Uniform f32_3* %183 = OpAccessChain %99 %110 
                                       f32_3 %184 = OpLoad %183 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpFAdd %181 %185 
                                                      OpStore %174 %186 
                                       f32_3 %189 = OpLoad %174 
                                       f32_3 %190 = OpLoad %174 
                                         f32 %191 = OpDot %189 %190 
                                                      OpStore %188 %191 
                                         f32 %192 = OpLoad %188 
                                         f32 %193 = OpExtInst %1 31 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                Uniform f32* %196 = OpAccessChain %99 %129 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %194 %197 
                                                      OpStore %188 %198 
                                       f32_3 %199 = OpLoad %94 
                                       f32_3 %200 = OpLoad %139 
                                       f32_3 %201 = OpFNegate %200 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore %174 %202 
                                       f32_3 %204 = OpLoad %174 
                                       f32_3 %205 = OpLoad %174 
                                         f32 %206 = OpDot %204 %205 
                                                      OpStore %203 %206 
                                         f32 %207 = OpLoad %203 
                                         f32 %208 = OpExtInst %1 31 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                Uniform f32* %211 = OpAccessChain %99 %101 %210 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %209 %212 
                                                      OpStore %203 %213 
                                         f32 %214 = OpLoad %203 
                                         f32 %215 = OpLoad %188 
                                         f32 %216 = OpFDiv %214 %215 
                                                      OpStore %188 %216 
                                         f32 %220 = OpLoad %188 
                                         f32 %222 = OpExtInst %1 40 %220 %221 
                                 Output f32* %224 = OpAccessChain %219 %110 
                                                      OpStore %224 %222 
                              Uniform f32_4* %225 = OpAccessChain %99 %100 %101 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                Input f32_4* %228 = OpAccessChain %30 %110 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 1 1 1 
                                       f32_3 %231 = OpFMul %227 %230 
                                                      OpStore %174 %231 
                              Uniform f32_4* %232 = OpAccessChain %99 %100 %110 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                Input f32_4* %235 = OpAccessChain %30 %110 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 0 0 
                                       f32_3 %238 = OpFMul %234 %237 
                                       f32_3 %239 = OpLoad %174 
                                       f32_3 %240 = OpFAdd %238 %239 
                                                      OpStore %174 %240 
                              Uniform f32_4* %241 = OpAccessChain %99 %100 %100 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                Input f32_4* %244 = OpAccessChain %30 %110 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 2 2 2 
                                       f32_3 %247 = OpFMul %243 %246 
                                       f32_3 %248 = OpLoad %174 
                                       f32_3 %249 = OpFAdd %247 %248 
                                                      OpStore %174 %249 
                              Uniform f32_4* %250 = OpAccessChain %99 %100 %129 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                Input f32_4* %253 = OpAccessChain %30 %110 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 3 3 3 
                                       f32_3 %256 = OpFMul %252 %255 
                                       f32_3 %257 = OpLoad %174 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore %174 %258 
                                       f32_3 %260 = OpLoad %139 
                                       f32_3 %261 = OpLoad %174 
                                       f32_3 %262 = OpFAdd %260 %261 
                                                      OpStore %259 %262 
                                       f32_3 %263 = OpLoad %139 
                                       f32_3 %264 = OpLoad %174 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_3 %266 = OpFAdd %263 %265 
                                                      OpStore %139 %266 
                                       f32_3 %267 = OpLoad %139 
                                       f32_3 %268 = OpLoad %139 
                                         f32 %269 = OpDot %267 %268 
                                                      OpStore %188 %269 
                                         f32 %270 = OpLoad %188 
                                         f32 %271 = OpExtInst %1 31 %270 
                                                      OpStore %188 %271 
                                         f32 %272 = OpLoad %188 
                                Uniform f32* %273 = OpAccessChain %99 %101 %210 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                                      OpStore %188 %275 
                                       f32_3 %276 = OpLoad %259 
                                       f32_3 %277 = OpFMul %276 %180 
                              Uniform f32_3* %278 = OpAccessChain %99 %110 
                                       f32_3 %279 = OpLoad %278 
                                       f32_3 %280 = OpFNegate %279 
                                       f32_3 %281 = OpFAdd %277 %280 
                                                      OpStore %139 %281 
                                       f32_3 %282 = OpLoad %139 
                                       f32_3 %283 = OpLoad %139 
                                         f32 %284 = OpDot %282 %283 
                                Private f32* %286 = OpAccessChain %139 %285 
                                                      OpStore %286 %284 
                                Private f32* %287 = OpAccessChain %139 %285 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 31 %288 
                                Private f32* %290 = OpAccessChain %139 %285 
                                                      OpStore %290 %289 
                                Private f32* %291 = OpAccessChain %139 %285 
                                         f32 %292 = OpLoad %291 
                                Uniform f32* %293 = OpAccessChain %99 %129 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFMul %292 %294 
                                Private f32* %296 = OpAccessChain %139 %285 
                                                      OpStore %296 %295 
                                         f32 %297 = OpLoad %188 
                                Private f32* %298 = OpAccessChain %139 %285 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFDiv %297 %299 
                                                      OpStore %188 %300 
                                         f32 %301 = OpLoad %188 
                                         f32 %302 = OpExtInst %1 40 %301 %221 
                                 Output f32* %303 = OpAccessChain %219 %101 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %94 
                                       f32_3 %305 = OpLoad %174 
                                       f32_3 %306 = OpFAdd %304 %305 
                                                      OpStore %139 %306 
                                       f32_3 %307 = OpLoad %94 
                                       f32_3 %308 = OpFNegate %307 
                                       f32_3 %309 = OpLoad %174 
                                       f32_3 %310 = OpFAdd %308 %309 
                                                      OpStore %94 %310 
                                       f32_3 %311 = OpLoad %94 
                                       f32_3 %312 = OpLoad %94 
                                         f32 %313 = OpDot %311 %312 
                                Private f32* %314 = OpAccessChain %94 %285 
                                                      OpStore %314 %313 
                                Private f32* %315 = OpAccessChain %94 %285 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpExtInst %1 31 %316 
                                Private f32* %318 = OpAccessChain %94 %285 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %94 %285 
                                         f32 %320 = OpLoad %319 
                                Uniform f32* %321 = OpAccessChain %99 %101 %210 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %320 %322 
                                Private f32* %324 = OpAccessChain %94 %285 
                                                      OpStore %324 %323 
                                       f32_3 %326 = OpLoad %139 
                                       f32_3 %327 = OpFMul %326 %180 
                              Uniform f32_3* %328 = OpAccessChain %99 %110 
                                       f32_3 %329 = OpLoad %328 
                                       f32_3 %330 = OpFNegate %329 
                                       f32_3 %331 = OpFAdd %327 %330 
                                                      OpStore %325 %331 
                                       f32_3 %332 = OpLoad %325 
                                       f32_3 %333 = OpLoad %325 
                                         f32 %334 = OpDot %332 %333 
                                Private f32* %335 = OpAccessChain %325 %285 
                                                      OpStore %335 %334 
                                Private f32* %336 = OpAccessChain %325 %285 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpExtInst %1 31 %337 
                                Private f32* %339 = OpAccessChain %325 %285 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %325 %285 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %99 %129 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFMul %341 %343 
                                Private f32* %345 = OpAccessChain %325 %285 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %94 %285 
                                         f32 %347 = OpLoad %346 
                                Private f32* %348 = OpAccessChain %325 %285 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFDiv %347 %349 
                                Private f32* %351 = OpAccessChain %94 %285 
                                                      OpStore %351 %350 
                                Private f32* %352 = OpAccessChain %94 %285 
                                         f32 %353 = OpLoad %352 
                                         f32 %354 = OpExtInst %1 40 %353 %221 
                                 Output f32* %355 = OpAccessChain %219 %100 
                                                      OpStore %355 %354 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %15 = OpFunction None %10 
                                Function i32* %14 = OpFunctionParameter 
                                              %16 = OpLabel 
                                 Output f32* %356 = OpAccessChain %219 %100 
                                         f32 %357 = OpLoad %356 
                                 Output f32* %358 = OpAccessChain %219 %100 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                Private f32* %361 = OpAccessChain %94 %285 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %94 %285 
                                         f32 %363 = OpLoad %362 
                                 Output f32* %364 = OpAccessChain %219 %100 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFAdd %363 %365 
                                Private f32* %367 = OpAccessChain %94 %285 
                                                      OpStore %367 %366 
                                Private f32* %372 = OpAccessChain %94 %285 
                                         f32 %373 = OpLoad %372 
                                         f32 %375 = OpFMul %373 %374 
                                 Output f32* %376 = OpAccessChain %371 %110 
                                                      OpStore %376 %375 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 395
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationEvaluation %4 "main" %12 %20 %139 %208 %236 %321 %331 %379 
                                                      OpExecutionMode %4 Triangles 
                                                      OpExecutionMode %4 SpacingFractionalOdd 
                                                      OpExecutionMode %4 VertexOrderCw 
                                                      OpDecorate %12 BuiltIn TessLevelInner 
                                                      OpDecorate %20 Location 20 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpMemberDecorate %61 5 Offset 61 
                                                      OpMemberDecorate %61 6 Offset 61 
                                                      OpMemberDecorate %61 7 Offset 61 
                                                      OpMemberDecorate %61 8 Offset 61 
                                                      OpMemberDecorate %61 9 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %97 DescriptorSet 97 
                                                      OpDecorate %97 Binding 97 
                                                      OpDecorate %101 DescriptorSet 101 
                                                      OpDecorate %101 Binding 101 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %113 DescriptorSet 113 
                                                      OpDecorate %113 Binding 113 
                                                      OpDecorate %139 Location 139 
                                                      OpDecorate %208 Location 208 
                                                      OpDecorate %236 Location 236 
                                                      OpMemberDecorate %319 0 BuiltIn 319 
                                                      OpMemberDecorate %319 1 BuiltIn 319 
                                                      OpMemberDecorate %319 2 BuiltIn 319 
                                                      OpDecorate %319 Block 
                                                      OpDecorate %331 Location 331 
                                                      OpDecorate %379 Location 379 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 32 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypePointer Input %18 
                             Input f32_4[32]* %20 = OpVariable Input 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Input %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %42 = OpConstant 2 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                              %60 = OpTypeArray %7 %56 
                                              %61 = OpTypeStruct %7 %57 %58 %59 %60 %6 %6 %7 %6 %6 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32; f32;}* %63 = OpVariable Uniform 
                                          i32 %64 = OpConstant 7 
                                              %65 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 5 
                                              %80 = OpTypePointer Uniform %6 
                                          i32 %83 = OpConstant 6 
                                              %93 = OpTypePointer Private %6 
                                 Private f32* %94 = OpVariable Private 
                                              %95 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %96 = OpTypePointer UniformConstant %95 
         UniformConstant read_only Texture2D* %97 = OpVariable UniformConstant 
                                              %99 = OpTypeSampler 
                                             %100 = OpTypePointer UniformConstant %99 
                    UniformConstant sampler* %101 = OpVariable UniformConstant 
                                             %103 = OpTypeSampledImage %95 
                                         f32 %107 = OpConstant 3.674022E-40 
                                         u32 %109 = OpConstant 0 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                    UniformConstant sampler* %113 = OpVariable UniformConstant 
                              Private f32_4* %134 = OpVariable Private 
                                             %137 = OpTypeArray %10 %17 
                                             %138 = OpTypePointer Input %137 
                            Input f32_3[32]* %139 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         u32 %179 = OpConstant 2 
                                         u32 %187 = OpConstant 1 
                                Private f32* %189 = OpVariable Private 
                                         i32 %202 = OpConstant 8 
                                             %207 = OpTypePointer Output %10 
                               Output f32_3* %208 = OpVariable Output 
                                         f32 %222 = OpConstant 3.674022E-40 
                            Input f32_4[32]* %236 = OpVariable Input 
                                         i32 %256 = OpConstant 9 
                                         i32 %294 = OpConstant 3 
                              Private f32_4* %298 = OpVariable Private 
                                             %318 = OpTypeArray %6 %187 
                                             %319 = OpTypeStruct %7 %6 %318 
                                             %320 = OpTypePointer Output %319 
        Output struct {f32_4; f32; f32[1];}* %321 = OpVariable Output 
                                             %329 = OpTypePointer Output %7 
                               Output f32_3* %331 = OpVariable Output 
                                         i32 %350 = OpConstant 4 
                               Output f32_3* %379 = OpVariable Output 
                                             %389 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 1 1 
                                 Input f32_4* %24 = OpAccessChain %20 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                                        f32_2 %27 = OpFMul %15 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                                 Input f32_4* %31 = OpAccessChain %20 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_3 %34 = OpLoad %12 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 0 
                                        f32_2 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                                        f32_2 %39 = OpFAdd %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                 Input f32_4* %43 = OpAccessChain %20 %42 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_3 %46 = OpLoad %12 
                                        f32_2 %47 = OpVectorShuffle %46 %46 2 2 
                                        f32_2 %48 = OpFMul %45 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                                        f32_2 %51 = OpFAdd %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               Uniform f32_4* %66 = OpAccessChain %63 %64 
                                        f32_4 %67 = OpLoad %66 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                        f32_2 %69 = OpFMul %55 %68 
                               Uniform f32_4* %70 = OpAccessChain %63 %64 
                                        f32_4 %71 = OpLoad %70 
                                        f32_2 %72 = OpVectorShuffle %71 %71 2 3 
                                        f32_2 %73 = OpFAdd %69 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %73 4 5 2 3 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %63 %30 
                                        f32_4 %77 = OpLoad %76 
                                        f32_2 %78 = OpVectorShuffle %77 %77 1 1 
                                 Uniform f32* %81 = OpAccessChain %63 %79 
                                          f32 %82 = OpLoad %81 
                                 Uniform f32* %84 = OpAccessChain %63 %83 
                                          f32 %85 = OpLoad %84 
                                        f32_2 %86 = OpCompositeConstruct %82 %85 
                                        f32_2 %87 = OpFMul %78 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_2 %90 = OpFAdd %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 2 3 
                                                      OpStore %9 %92 
                          read_only Texture2D %98 = OpLoad %97 
                                     sampler %102 = OpLoad %101 
                  read_only Texture2DSampled %104 = OpSampledImage %98 %102 
                                       f32_4 %105 = OpLoad %9 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %108 = OpImageSampleExplicitLod %104 %106 Lod %7 
                                         f32 %110 = OpCompositeExtract %108 0 
                                                      OpStore %94 %110 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %114 = OpLoad %113 
                  read_only Texture2DSampled %115 = OpSampledImage %112 %114 
                                       f32_4 %116 = OpLoad %9 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpImageSampleExplicitLod %115 %117 Lod %7 
                                         f32 %119 = OpCompositeExtract %118 0 
                                Private f32* %120 = OpAccessChain %9 %109 
                                                      OpStore %120 %119 
                                Private f32* %121 = OpAccessChain %9 %109 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpLoad %94 
                                         f32 %124 = OpFMul %122 %123 
                                Private f32* %125 = OpAccessChain %9 %109 
                                                      OpStore %125 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                              Uniform f32_4* %128 = OpAccessChain %63 %42 %22 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %127 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %9 %133 
                                       f32_3 %135 = OpLoad %12 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                                Input f32_3* %140 = OpAccessChain %139 %22 
                                       f32_3 %141 = OpLoad %140 
                                       f32_3 %142 = OpFMul %136 %141 
                                       f32_4 %143 = OpLoad %134 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %134 %144 
                                Input f32_3* %145 = OpAccessChain %139 %30 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpLoad %12 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 0 0 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %134 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %149 %151 
                                       f32_4 %153 = OpLoad %134 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %134 %154 
                                Input f32_3* %155 = OpAccessChain %139 %42 
                                       f32_3 %156 = OpLoad %155 
                                       f32_3 %157 = OpLoad %12 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %134 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %134 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %134 %164 
                                       f32_4 %166 = OpLoad %134 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                              Uniform f32_4* %168 = OpAccessChain %63 %42 %30 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %167 %170 
                                Private f32* %172 = OpAccessChain %165 %109 
                                                      OpStore %172 %171 
                                       f32_4 %173 = OpLoad %134 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                              Uniform f32_4* %175 = OpAccessChain %63 %42 %42 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %165 %179 
                                                      OpStore %180 %178 
                                       f32_4 %181 = OpLoad %134 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                              Uniform f32_4* %183 = OpAccessChain %63 %42 %22 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %182 %185 
                                Private f32* %188 = OpAccessChain %165 %187 
                                                      OpStore %188 %186 
                                       f32_4 %190 = OpLoad %165 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %165 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %191 %193 
                                                      OpStore %189 %194 
                                         f32 %195 = OpLoad %189 
                                         f32 %196 = OpExtInst %1 32 %195 
                                                      OpStore %189 %196 
                                Private f32* %197 = OpAccessChain %165 %187 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFNegate %198 
                                         f32 %200 = OpLoad %189 
                                         f32 %201 = OpFMul %199 %200 
                                Uniform f32* %203 = OpAccessChain %63 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFAdd %201 %204 
                                Private f32* %206 = OpAccessChain %134 %109 
                                                      OpStore %206 %205 
                                         f32 %209 = OpLoad %189 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_4 %211 = OpLoad %165 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFMul %210 %212 
                                                      OpStore %208 %213 
                                Private f32* %214 = OpAccessChain %134 %109 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpExtInst %1 4 %215 
                                Uniform f32* %217 = OpAccessChain %63 %202 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                         f32 %220 = OpFAdd %216 %219 
                                                      OpStore %189 %220 
                                         f32 %221 = OpLoad %189 
                                         f32 %223 = OpExtInst %1 43 %221 %107 %222 
                                                      OpStore %189 %223 
                                         f32 %224 = OpLoad %189 
                                         f32 %225 = OpFNegate %224 
                                         f32 %226 = OpFAdd %225 %222 
                                                      OpStore %189 %226 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                         f32 %229 = OpLoad %189 
                                       f32_3 %230 = OpCompositeConstruct %229 %229 %229 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_3 %234 = OpLoad %12 
                                       f32_4 %235 = OpVectorShuffle %234 %234 1 1 1 1 
                                Input f32_4* %237 = OpAccessChain %236 %22 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpFMul %235 %238 
                                                      OpStore %134 %239 
                                Input f32_4* %240 = OpAccessChain %236 %30 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpLoad %12 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpFMul %241 %243 
                                       f32_4 %245 = OpLoad %134 
                                       f32_4 %246 = OpFAdd %244 %245 
                                                      OpStore %134 %246 
                                Input f32_4* %247 = OpAccessChain %236 %42 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpLoad %12 
                                       f32_4 %250 = OpVectorShuffle %249 %249 2 2 2 2 
                                       f32_4 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %134 
                                       f32_4 %253 = OpFAdd %251 %252 
                                                      OpStore %134 %253 
                                       f32_4 %254 = OpLoad %9 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                Uniform f32* %257 = OpAccessChain %63 %256 
                                         f32 %258 = OpLoad %257 
                                Uniform f32* %259 = OpAccessChain %63 %256 
                                         f32 %260 = OpLoad %259 
                                Uniform f32* %261 = OpAccessChain %63 %256 
                                         f32 %262 = OpLoad %261 
                                       f32_3 %263 = OpCompositeConstruct %258 %260 %262 
                                         f32 %264 = OpCompositeExtract %263 0 
                                         f32 %265 = OpCompositeExtract %263 1 
                                         f32 %266 = OpCompositeExtract %263 2 
                                       f32_3 %267 = OpCompositeConstruct %264 %265 %266 
                                       f32_3 %268 = OpFMul %255 %267 
                                       f32_4 %269 = OpLoad %134 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %9 %273 
                                       f32_4 %274 = OpLoad %9 
                                       f32_4 %275 = OpVectorShuffle %274 %274 1 1 1 1 
                              Uniform f32_4* %276 = OpAccessChain %63 %22 %22 
                                       f32_4 %277 = OpLoad %276 
                                       f32_4 %278 = OpFMul %275 %277 
                                                      OpStore %165 %278 
                              Uniform f32_4* %279 = OpAccessChain %63 %22 %30 
                                       f32_4 %280 = OpLoad %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %281 0 0 0 0 
                                       f32_4 %283 = OpFMul %280 %282 
                                       f32_4 %284 = OpLoad %165 
                                       f32_4 %285 = OpFAdd %283 %284 
                                                      OpStore %165 %285 
                              Uniform f32_4* %286 = OpAccessChain %63 %22 %42 
                                       f32_4 %287 = OpLoad %286 
                                       f32_4 %288 = OpLoad %9 
                                       f32_4 %289 = OpVectorShuffle %288 %288 2 2 2 2 
                                       f32_4 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %165 
                                       f32_4 %292 = OpFAdd %290 %291 
                                                      OpStore %9 %292 
                                       f32_4 %293 = OpLoad %9 
                              Uniform f32_4* %295 = OpAccessChain %63 %22 %294 
                                       f32_4 %296 = OpLoad %295 
                                       f32_4 %297 = OpFAdd %293 %296 
                                                      OpStore %165 %297 
                                       f32_4 %299 = OpLoad %165 
                                       f32_4 %300 = OpVectorShuffle %299 %299 1 1 1 1 
                              Uniform f32_4* %301 = OpAccessChain %63 %294 %22 
                                       f32_4 %302 = OpLoad %301 
                                       f32_4 %303 = OpFMul %300 %302 
                                                      OpStore %298 %303 
                              Uniform f32_4* %304 = OpAccessChain %63 %294 %30 
                                       f32_4 %305 = OpLoad %304 
                                       f32_4 %306 = OpLoad %165 
                                       f32_4 %307 = OpVectorShuffle %306 %306 0 0 0 0 
                                       f32_4 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %298 
                                       f32_4 %310 = OpFAdd %308 %309 
                                                      OpStore %298 %310 
                              Uniform f32_4* %311 = OpAccessChain %63 %294 %42 
                                       f32_4 %312 = OpLoad %311 
                                       f32_4 %313 = OpLoad %165 
                                       f32_4 %314 = OpVectorShuffle %313 %313 2 2 2 2 
                                       f32_4 %315 = OpFMul %312 %314 
                                       f32_4 %316 = OpLoad %298 
                                       f32_4 %317 = OpFAdd %315 %316 
                                                      OpStore %298 %317 
                              Uniform f32_4* %322 = OpAccessChain %63 %294 %294 
                                       f32_4 %323 = OpLoad %322 
                                       f32_4 %324 = OpLoad %165 
                                       f32_4 %325 = OpVectorShuffle %324 %324 3 3 3 3 
                                       f32_4 %326 = OpFMul %323 %325 
                                       f32_4 %327 = OpLoad %298 
                                       f32_4 %328 = OpFAdd %326 %327 
                               Output f32_4* %330 = OpAccessChain %321 %30 
                                                      OpStore %330 %328 
                              Uniform f32_4* %332 = OpAccessChain %63 %22 %294 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_4 %335 = OpLoad %134 
                                       f32_3 %336 = OpVectorShuffle %335 %335 3 3 3 
                                       f32_3 %337 = OpFMul %334 %336 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_3 %340 = OpFAdd %337 %339 
                                                      OpStore %331 %340 
                              Uniform f32_4* %341 = OpAccessChain %63 %22 %294 
                                       f32_4 %342 = OpLoad %341 
                                       f32_4 %343 = OpLoad %134 
                                       f32_4 %344 = OpVectorShuffle %343 %343 3 3 3 3 
                                       f32_4 %345 = OpFMul %342 %344 
                                       f32_4 %346 = OpLoad %9 
                                       f32_4 %347 = OpFAdd %345 %346 
                                                      OpStore %9 %347 
                                       f32_4 %348 = OpLoad %9 
                                       f32_3 %349 = OpVectorShuffle %348 %348 1 1 1 
                              Uniform f32_4* %351 = OpAccessChain %63 %350 %22 
                                       f32_4 %352 = OpLoad %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                       f32_3 %354 = OpFMul %349 %353 
                                       f32_4 %355 = OpLoad %134 
                                       f32_4 %356 = OpVectorShuffle %355 %354 4 5 6 3 
                                                      OpStore %134 %356 
                              Uniform f32_4* %357 = OpAccessChain %63 %350 %30 
                                       f32_4 %358 = OpLoad %357 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_4 %360 = OpLoad %9 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 0 0 
                                       f32_3 %362 = OpFMul %359 %361 
                                       f32_4 %363 = OpLoad %134 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_3 %365 = OpFAdd %362 %364 
                                       f32_4 %366 = OpLoad %134 
                                       f32_4 %367 = OpVectorShuffle %366 %365 4 5 6 3 
                                                      OpStore %134 %367 
                              Uniform f32_4* %368 = OpAccessChain %63 %350 %42 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_4 %371 = OpLoad %9 
                                       f32_3 %372 = OpVectorShuffle %371 %371 2 2 2 
                                       f32_3 %373 = OpFMul %370 %372 
                                       f32_4 %374 = OpLoad %134 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpFAdd %373 %375 
                                       f32_4 %377 = OpLoad %9 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 6 3 
                                                      OpStore %9 %378 
                              Uniform f32_4* %380 = OpAccessChain %63 %350 %294 
                                       f32_4 %381 = OpLoad %380 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_4 %383 = OpLoad %9 
                                       f32_3 %384 = OpVectorShuffle %383 %383 3 3 3 
                                       f32_3 %385 = OpFMul %382 %384 
                                       f32_4 %386 = OpLoad %9 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                                       f32_3 %388 = OpFAdd %385 %387 
                                                      OpStore %379 %388 
                                 Output f32* %390 = OpAccessChain %321 %30 %187 
                                         f32 %391 = OpLoad %390 
                                         f32 %392 = OpFNegate %391 
                                 Output f32* %393 = OpAccessChain %321 %30 %187 
                                                      OpStore %393 %392 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 410
#extension GL_ARB_explicit_attrib_location : require

in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
in  vec4 in_TEXCOORD3;
in  vec4 in_COLOR0;
layout(location = 0) out vec4 vs_INTERNALTESSPOS0;
layout(location = 1) out vec4 vs_TANGENT0;
layout(location = 2) out vec3 vs_NORMAL0;
layout(location = 3) out vec4 vs_TEXCOORD0;
layout(location = 4) out vec4 vs_TEXCOORD1;
layout(location = 5) out vec4 vs_TEXCOORD2;
layout(location = 6) out vec4 vs_TEXCOORD3;
layout(location = 7) out vec4 vs_COLOR0;
void main()
{
    vs_INTERNALTESSPOS0 = in_POSITION0;
    vs_TANGENT0 = in_TANGENT0;
    vs_NORMAL0.xyz = in_NORMAL0.xyz;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD3;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Y_Mask;
uniform 	float _FresnelBias;
uniform 	float _FresnelScale;
uniform 	float _FresnelPower;
uniform 	float _Alpha;
UNITY_LOCATION(0) uniform  sampler2D _LightTexture0;
layout(location = 0) in  vec3 ds_TEXCOORD0;
layout(location = 1) in  vec3 ds_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat5;
float u_xlat12;
void main()
{
    u_xlat0.xy = ds_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * ds_TEXCOORD1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * ds_TEXCOORD1.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat12 = dot(ds_TEXCOORD0.xyz, ds_TEXCOORD0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * ds_TEXCOORD0.xyz;
    u_xlat2.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat5 = abs(u_xlat12) + u_xlat1.x;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = log2(u_xlat12);
    u_xlat12 = u_xlat12 * _FresnelPower;
    u_xlat12 = exp2(u_xlat12);
    u_xlat12 = _FresnelScale * u_xlat12 + _FresnelBias;
    u_xlat5 = u_xlat5 + 9.99999975e-06;
    u_xlat5 = 0.5 / u_xlat5;
    u_xlat5 = u_xlat5 * 0.999999881;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat5 = u_xlat1.x * u_xlat1.x;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat1.x = u_xlat1.x * u_xlat5;
    u_xlat1.x = u_xlat1.x * 0.959999979 + 0.0399999991;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat0.x = (-ds_TEXCOORD0.y) + _Y_Mask;
    u_xlat0.x = abs(u_xlat0.x) + (-_Y_Mask);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    SV_Target0.w = u_xlat0.x * _Alpha;
    return;
}

#endif
#ifdef HULL
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(vertices=3) out;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	float _EdgeLength;
layout(location = 0) in vec4 vs_INTERNALTESSPOS0[];
layout(location = 0) out vec4 hs_INTERNALTESSPOS0[];
layout(location = 1) in vec4 vs_TANGENT0[];
layout(location = 1) out vec4 hs_TANGENT0[];
layout(location = 2) in vec3 vs_NORMAL0[];
layout(location = 2) out vec3 hs_NORMAL0[];
layout(location = 3) in vec4 vs_TEXCOORD0[];
layout(location = 3) out vec4 hs_TEXCOORD0[];
layout(location = 4) in vec4 vs_TEXCOORD1[];
layout(location = 4) out vec4 hs_TEXCOORD1[];
layout(location = 5) in vec4 vs_TEXCOORD2[];
layout(location = 5) out vec4 hs_TEXCOORD2[];
layout(location = 6) in vec4 vs_TEXCOORD3[];
layout(location = 6) out vec4 hs_TEXCOORD3[];
layout(location = 7) in vec4 vs_COLOR0[];
layout(location = 7) out vec4 hs_COLOR0[];
void passthrough_ctrl_points()
{
    hs_INTERNALTESSPOS0[gl_InvocationID] = vs_INTERNALTESSPOS0[gl_InvocationID];
    hs_TANGENT0[gl_InvocationID] = vs_TANGENT0[gl_InvocationID];
    hs_NORMAL0[gl_InvocationID] = vs_NORMAL0[gl_InvocationID];
    hs_TEXCOORD0[gl_InvocationID] = vs_TEXCOORD0[gl_InvocationID];
    hs_TEXCOORD1[gl_InvocationID] = vs_TEXCOORD1[gl_InvocationID];
    hs_TEXCOORD2[gl_InvocationID] = vs_TEXCOORD2[gl_InvocationID];
    hs_TEXCOORD3[gl_InvocationID] = vs_TEXCOORD3[gl_InvocationID];
    hs_COLOR0[gl_InvocationID] = vs_COLOR0[gl_InvocationID];
}
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
float u_xlat13;
void fork_phase2(int phaseInstanceID)
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[1].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[1].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[2].www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _EdgeLength;
    u_xlat2.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _ScreenParams.y;
    u_xlat12 = u_xlat13 / u_xlat12;
    gl_TessLevelOuter[0] = max(u_xlat12, 1.0);
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[0].www + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _ScreenParams.y;
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _EdgeLength;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    gl_TessLevelOuter[1] = max(u_xlat12, 1.0);
    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _ScreenParams.y;
    u_xlat4.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _EdgeLength;
    u_xlat0.x = u_xlat0.x / u_xlat4.x;
    gl_TessLevelOuter[2] = max(u_xlat0.x, 1.0);
}
void join_phase3(int phaseInstanceID)
{
    u_xlat0.x = gl_TessLevelOuter[2] + gl_TessLevelOuter[2];
    u_xlat0.x = u_xlat0.x + gl_TessLevelOuter[2];
    gl_TessLevelInner[0] = u_xlat0.x * 0.333333343;
}
void main()
{
    passthrough_ctrl_points();
    barrier();
    if (gl_InvocationID == 0)
    {
        fork_phase2(0);
        join_phase3(0);
    }
}

#endif
#ifdef DOMAIN
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(ccw) in;
layout(fractional_odd_spacing) in;
layout(triangles) in;
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _u;
uniform 	float _v;
uniform 	vec4 _Flamenoise_ST;
uniform 	float _Y_Mask;
uniform 	float _FlameHeight;
UNITY_LOCATION(1) uniform  sampler2D _FlameWave;
UNITY_LOCATION(2) uniform  sampler2D _Flamenoise;
layout(location = 0) in  vec4 hs_INTERNALTESSPOS0 [];
layout(location = 2) in  vec3 hs_NORMAL0 [];
layout(location = 3) in  vec4 hs_TEXCOORD0 [];
layout(location = 0) out vec3 ds_TEXCOORD0;
layout(location = 1) out vec3 ds_TEXCOORD1;
layout(location = 2) out vec2 ds_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = gl_TessCoord.yy * hs_TEXCOORD0[1].xy;
    u_xlat0.xy = hs_TEXCOORD0[0].xy * gl_TessCoord.xx + u_xlat0.xy;
    u_xlat0.xy = hs_TEXCOORD0[2].xy * gl_TessCoord.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _Flamenoise_ST.xy + _Flamenoise_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_u, _v) + u_xlat0.xy;
    u_xlat8 = textureLod(_FlameWave, u_xlat0.xy, 0.0).x;
    u_xlat0.x = textureLod(_Flamenoise, u_xlat0.xy, 0.0).x;
    u_xlat0.x = u_xlat0.x * u_xlat8;
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat1.xyz = gl_TessCoord.yyy * hs_NORMAL0[1].xyz;
    u_xlat1.xyz = hs_NORMAL0[0].xyz * gl_TessCoord.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hs_NORMAL0[2].xyz * gl_TessCoord.zzz + u_xlat1.xyz;
    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.x = (-u_xlat2.y) * u_xlat12 + _Y_Mask;
    ds_TEXCOORD0.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = abs(u_xlat1.x) + (-_Y_Mask);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
    u_xlat1 = gl_TessCoord.yyyy * hs_INTERNALTESSPOS0[1];
    u_xlat1 = hs_INTERNALTESSPOS0[0] * gl_TessCoord.xxxx + u_xlat1;
    u_xlat1 = hs_INTERNALTESSPOS0[2] * gl_TessCoord.zzzz + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_FlameHeight, _FlameHeight, _FlameHeight)) + u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    ds_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
    ds_TEXCOORD2.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 38
; Schema: 0
                               OpCapability Shader 
                        %1 = OpExtInstImport "GLSL.std.450" 
                               OpMemoryModel Logical GLSL450 
                               OpEntryPoint Vertex %4 "main" %9 %11 %13 %14 %18 %20 %22 %23 %25 %26 %28 %29 %31 %32 %34 %35 
                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                               OpDecorate %9 Location 9 
                               OpDecorate %11 Location 11 
                               OpDecorate %13 Location 13 
                               OpDecorate %14 Location 14 
                               OpDecorate %18 Location 18 
                               OpDecorate %20 Location 20 
                               OpDecorate vs_TEXCOORD0 Location 22 
                               OpDecorate %23 Location 23 
                               OpDecorate vs_TEXCOORD1 Location 25 
                               OpDecorate %26 Location 26 
                               OpDecorate vs_TEXCOORD2 Location 28 
                               OpDecorate %29 Location 29 
                               OpDecorate vs_TEXCOORD3 Location 31 
                               OpDecorate %32 Location 32 
                               OpDecorate %34 Location 34 
                               OpDecorate %35 Location 35 
                        %2 = OpTypeVoid 
                        %3 = OpTypeFunction %2 
                        %6 = OpTypeFloat 32 
                        %7 = OpTypeVector %6 4 
                        %8 = OpTypePointer Output %7 
          Output f32_4* %9 = OpVariable Output 
                       %10 = OpTypePointer Input %7 
          Input f32_4* %11 = OpVariable Input 
         Output f32_4* %13 = OpVariable Output 
          Input f32_4* %14 = OpVariable Input 
                       %16 = OpTypeVector %6 3 
                       %17 = OpTypePointer Output %16 
         Output f32_3* %18 = OpVariable Output 
                       %19 = OpTypePointer Input %16 
          Input f32_3* %20 = OpVariable Input 
Output f32_4* vs_TEXCOORD0 = OpVariable Output 
          Input f32_4* %23 = OpVariable Input 
Output f32_4* vs_TEXCOORD1 = OpVariable Output 
          Input f32_4* %26 = OpVariable Input 
Output f32_4* vs_TEXCOORD2 = OpVariable Output 
          Input f32_4* %29 = OpVariable Input 
Output f32_4* vs_TEXCOORD3 = OpVariable Output 
          Input f32_4* %32 = OpVariable Input 
         Output f32_4* %34 = OpVariable Output 
          Input f32_4* %35 = OpVariable Input 
                   void %4 = OpFunction None %3 
                        %5 = OpLabel 
                 f32_4 %12 = OpLoad %11 
                               OpStore %9 %12 
                 f32_4 %15 = OpLoad %14 
                               OpStore %13 %15 
                 f32_3 %21 = OpLoad %20 
                               OpStore %18 %21 
                 f32_4 %24 = OpLoad %23 
                               OpStore vs_TEXCOORD0 %24 
                 f32_4 %27 = OpLoad %26 
                               OpStore vs_TEXCOORD1 %27 
                 f32_4 %30 = OpLoad %29 
                               OpStore vs_TEXCOORD2 %30 
                 f32_4 %33 = OpLoad %32 
                               OpStore vs_TEXCOORD3 %33 
                 f32_4 %36 = OpLoad %35 
                               OpStore %34 %36 
                               OpReturn
                               OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 289
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %89 %241 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %66 DescriptorSet 66 
                                                      OpDecorate %66 Binding 66 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %89 Location 89 
                                                      OpDecorate %241 Location 241 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeVector %6 4 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %15 %17 
                                              %19 = OpTypeStruct %7 %15 %15 %18 %6 %6 %6 %6 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32; f32; f32; f32; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 3 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %15 
                                          i32 %32 = OpConstant 0 
                                          i32 %44 = OpConstant 2 
                                              %64 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %65 = OpTypePointer UniformConstant %64 
         UniformConstant read_only Texture2D* %66 = OpVariable UniformConstant 
                                              %68 = OpTypeSampler 
                                              %69 = OpTypePointer UniformConstant %68 
                     UniformConstant sampler* %70 = OpVariable UniformConstant 
                                              %72 = OpTypeSampledImage %64 
                                          u32 %77 = OpConstant 3 
                                          u32 %79 = OpConstant 0 
                                              %80 = OpTypePointer Private %6 
                                 Private f32* %88 = OpVariable Private 
                                 Input f32_3* %89 = OpVariable Input 
                               Private f32_3* %95 = OpVariable Private 
                              Private f32_3* %100 = OpVariable Private 
                                             %103 = OpTypePointer Uniform %7 
                              Private f32_3* %112 = OpVariable Private 
                                         f32 %136 = OpConstant 3.674022E-40 
                                         f32 %137 = OpConstant 3.674022E-40 
                                Private f32* %140 = OpVariable Private 
                                         i32 %152 = OpConstant 7 
                                             %153 = OpTypePointer Uniform %6 
                                         i32 %159 = OpConstant 6 
                                         i32 %164 = OpConstant 5 
                                         f32 %169 = OpConstant 3.674022E-40 
                                         f32 %171 = OpConstant 3.674022E-40 
                                         f32 %181 = OpConstant 3.674022E-40 
                                         f32 %194 = OpConstant 3.674022E-40 
                                         f32 %235 = OpConstant 3.674022E-40 
                                         f32 %237 = OpConstant 3.674022E-40 
                                             %240 = OpTypePointer Output %15 
                               Output f32_4* %241 = OpVariable Output 
                                         u32 %248 = OpConstant 1 
                                             %249 = OpTypePointer Input %6 
                                         i32 %253 = OpConstant 4 
                                         i32 %282 = OpConstant 8 
                                             %286 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                        f32_2 %29 = OpFMul %14 %28 
                                        f32_3 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %29 3 4 2 
                                                      OpStore %9 %31 
                               Uniform f32_4* %33 = OpAccessChain %21 %23 %32 
                                        f32_4 %34 = OpLoad %33 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                                        f32_3 %36 = OpLoad %11 
                                        f32_2 %37 = OpVectorShuffle %36 %36 0 0 
                                        f32_2 %38 = OpFMul %35 %37 
                                        f32_3 %39 = OpLoad %9 
                                        f32_2 %40 = OpVectorShuffle %39 %39 0 1 
                                        f32_2 %41 = OpFAdd %38 %40 
                                        f32_3 %42 = OpLoad %9 
                                        f32_3 %43 = OpVectorShuffle %42 %41 3 4 2 
                                                      OpStore %9 %43 
                               Uniform f32_4* %45 = OpAccessChain %21 %23 %44 
                                        f32_4 %46 = OpLoad %45 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_3 %48 = OpLoad %11 
                                        f32_2 %49 = OpVectorShuffle %48 %48 2 2 
                                        f32_2 %50 = OpFMul %47 %49 
                                        f32_3 %51 = OpLoad %9 
                                        f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                        f32_2 %53 = OpFAdd %50 %52 
                                        f32_3 %54 = OpLoad %9 
                                        f32_3 %55 = OpVectorShuffle %54 %53 3 4 2 
                                                      OpStore %9 %55 
                                        f32_3 %56 = OpLoad %9 
                                        f32_2 %57 = OpVectorShuffle %56 %56 0 1 
                               Uniform f32_4* %58 = OpAccessChain %21 %23 %23 
                                        f32_4 %59 = OpLoad %58 
                                        f32_2 %60 = OpVectorShuffle %59 %59 0 1 
                                        f32_2 %61 = OpFAdd %57 %60 
                                        f32_3 %62 = OpLoad %9 
                                        f32_3 %63 = OpVectorShuffle %62 %61 3 4 2 
                                                      OpStore %9 %63 
                          read_only Texture2D %67 = OpLoad %66 
                                      sampler %71 = OpLoad %70 
                   read_only Texture2DSampled %73 = OpSampledImage %67 %71 
                                        f32_3 %74 = OpLoad %9 
                                        f32_2 %75 = OpVectorShuffle %74 %74 0 1 
                                        f32_4 %76 = OpImageSampleImplicitLod %73 %75 
                                          f32 %78 = OpCompositeExtract %76 3 
                                 Private f32* %81 = OpAccessChain %9 %79 
                                                      OpStore %81 %78 
                                        f32_3 %82 = OpLoad %9 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 0 0 
                               Uniform f32_4* %84 = OpAccessChain %21 %44 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_3 %87 = OpFMul %83 %86 
                                                      OpStore %9 %87 
                                        f32_3 %90 = OpLoad %89 
                                        f32_3 %91 = OpLoad %89 
                                          f32 %92 = OpDot %90 %91 
                                                      OpStore %88 %92 
                                          f32 %93 = OpLoad %88 
                                          f32 %94 = OpExtInst %1 32 %93 
                                                      OpStore %88 %94 
                                          f32 %96 = OpLoad %88 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpLoad %89 
                                        f32_3 %99 = OpFMul %97 %98 
                                                      OpStore %95 %99 
                                       f32_3 %101 = OpLoad %11 
                                       f32_3 %102 = OpFNegate %101 
                              Uniform f32_3* %104 = OpAccessChain %21 %32 
                                       f32_3 %105 = OpLoad %104 
                                       f32_3 %106 = OpFAdd %102 %105 
                                                      OpStore %100 %106 
                                       f32_3 %107 = OpLoad %100 
                                       f32_3 %108 = OpLoad %100 
                                         f32 %109 = OpDot %107 %108 
                                                      OpStore %88 %109 
                                         f32 %110 = OpLoad %88 
                                         f32 %111 = OpExtInst %1 32 %110 
                                                      OpStore %88 %111 
                                         f32 %113 = OpLoad %88 
                                       f32_3 %114 = OpCompositeConstruct %113 %113 %113 
                                       f32_3 %115 = OpLoad %100 
                                       f32_3 %116 = OpFMul %114 %115 
                                                      OpStore %112 %116 
                                       f32_3 %117 = OpLoad %100 
                                         f32 %118 = OpLoad %88 
                                       f32_3 %119 = OpCompositeConstruct %118 %118 %118 
                                       f32_3 %120 = OpFMul %117 %119 
                              Uniform f32_4* %121 = OpAccessChain %21 %24 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFAdd %120 %123 
                                                      OpStore %100 %124 
                                       f32_3 %125 = OpLoad %95 
                                       f32_3 %126 = OpLoad %112 
                                         f32 %127 = OpDot %125 %126 
                                                      OpStore %88 %127 
                                       f32_3 %128 = OpLoad %95 
                              Uniform f32_4* %129 = OpAccessChain %21 %24 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                         f32 %132 = OpDot %128 %131 
                                Private f32* %133 = OpAccessChain %95 %79 
                                                      OpStore %133 %132 
                                Private f32* %134 = OpAccessChain %95 %79 
                                         f32 %135 = OpLoad %134 
                                         f32 %138 = OpExtInst %1 43 %135 %136 %137 
                                Private f32* %139 = OpAccessChain %95 %79 
                                                      OpStore %139 %138 
                                         f32 %141 = OpLoad %88 
                                         f32 %142 = OpExtInst %1 4 %141 
                                Private f32* %143 = OpAccessChain %95 %79 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFAdd %142 %144 
                                                      OpStore %140 %145 
                                         f32 %146 = OpLoad %88 
                                         f32 %147 = OpFNegate %146 
                                         f32 %148 = OpFAdd %147 %137 
                                                      OpStore %88 %148 
                                         f32 %149 = OpLoad %88 
                                         f32 %150 = OpExtInst %1 30 %149 
                                                      OpStore %88 %150 
                                         f32 %151 = OpLoad %88 
                                Uniform f32* %154 = OpAccessChain %21 %152 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFMul %151 %155 
                                                      OpStore %88 %156 
                                         f32 %157 = OpLoad %88 
                                         f32 %158 = OpExtInst %1 29 %157 
                                                      OpStore %88 %158 
                                Uniform f32* %160 = OpAccessChain %21 %159 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpLoad %88 
                                         f32 %163 = OpFMul %161 %162 
                                Uniform f32* %165 = OpAccessChain %21 %164 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFAdd %163 %166 
                                                      OpStore %88 %167 
                                         f32 %168 = OpLoad %140 
                                         f32 %170 = OpFAdd %168 %169 
                                                      OpStore %140 %170 
                                         f32 %172 = OpLoad %140 
                                         f32 %173 = OpFDiv %171 %172 
                                                      OpStore %140 %173 
                                Private f32* %174 = OpAccessChain %95 %79 
                                         f32 %175 = OpLoad %174 
                                         f32 %176 = OpLoad %140 
                                         f32 %177 = OpFMul %175 %176 
                                Private f32* %178 = OpAccessChain %95 %79 
                                                      OpStore %178 %177 
                                Private f32* %179 = OpAccessChain %95 %79 
                                         f32 %180 = OpLoad %179 
                                         f32 %182 = OpFMul %180 %181 
                                Private f32* %183 = OpAccessChain %95 %79 
                                                      OpStore %183 %182 
                                       f32_3 %184 = OpLoad %9 
                                       f32_3 %185 = OpLoad %95 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 0 0 
                                       f32_3 %187 = OpFMul %184 %186 
                                                      OpStore %9 %187 
                                       f32_3 %188 = OpLoad %100 
                                       f32_3 %189 = OpLoad %100 
                                         f32 %190 = OpDot %188 %189 
                                Private f32* %191 = OpAccessChain %95 %79 
                                                      OpStore %191 %190 
                                Private f32* %192 = OpAccessChain %95 %79 
                                         f32 %193 = OpLoad %192 
                                         f32 %195 = OpExtInst %1 40 %193 %194 
                                Private f32* %196 = OpAccessChain %95 %79 
                                                      OpStore %196 %195 
                                Private f32* %197 = OpAccessChain %95 %79 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpExtInst %1 32 %198 
                                Private f32* %200 = OpAccessChain %95 %79 
                                                      OpStore %200 %199 
                                       f32_3 %201 = OpLoad %95 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 0 0 
                                       f32_3 %203 = OpLoad %100 
                                       f32_3 %204 = OpFMul %202 %203 
                                                      OpStore %95 %204 
                              Uniform f32_4* %205 = OpAccessChain %21 %24 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpLoad %95 
                                         f32 %209 = OpDot %207 %208 
                                Private f32* %210 = OpAccessChain %95 %79 
                                                      OpStore %210 %209 
                                Private f32* %211 = OpAccessChain %95 %79 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpExtInst %1 43 %212 %136 %137 
                                Private f32* %214 = OpAccessChain %95 %79 
                                                      OpStore %214 %213 
                                Private f32* %215 = OpAccessChain %95 %79 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %137 
                                Private f32* %219 = OpAccessChain %95 %79 
                                                      OpStore %219 %218 
                                Private f32* %220 = OpAccessChain %95 %79 
                                         f32 %221 = OpLoad %220 
                                Private f32* %222 = OpAccessChain %95 %79 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                                      OpStore %140 %224 
                                         f32 %225 = OpLoad %140 
                                         f32 %226 = OpLoad %140 
                                         f32 %227 = OpFMul %225 %226 
                                                      OpStore %140 %227 
                                Private f32* %228 = OpAccessChain %95 %79 
                                         f32 %229 = OpLoad %228 
                                         f32 %230 = OpLoad %140 
                                         f32 %231 = OpFMul %229 %230 
                                Private f32* %232 = OpAccessChain %95 %79 
                                                      OpStore %232 %231 
                                Private f32* %233 = OpAccessChain %95 %79 
                                         f32 %234 = OpLoad %233 
                                         f32 %236 = OpFMul %234 %235 
                                         f32 %238 = OpFAdd %236 %237 
                                Private f32* %239 = OpAccessChain %95 %79 
                                                      OpStore %239 %238 
                                       f32_3 %242 = OpLoad %9 
                                       f32_3 %243 = OpLoad %95 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 0 0 
                                       f32_3 %245 = OpFMul %242 %244 
                                       f32_4 %246 = OpLoad %241 
                                       f32_4 %247 = OpVectorShuffle %246 %245 4 5 6 3 
                                                      OpStore %241 %247 
                                  Input f32* %250 = OpAccessChain %89 %248 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFNegate %251 
                                Uniform f32* %254 = OpAccessChain %21 %253 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFAdd %252 %255 
                                Private f32* %257 = OpAccessChain %9 %79 
                                                      OpStore %257 %256 
                                Private f32* %258 = OpAccessChain %9 %79 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpExtInst %1 4 %259 
                                Uniform f32* %261 = OpAccessChain %21 %253 
                                         f32 %262 = OpLoad %261 
                                         f32 %263 = OpFNegate %262 
                                         f32 %264 = OpFAdd %260 %263 
                                Private f32* %265 = OpAccessChain %9 %79 
                                                      OpStore %265 %264 
                                Private f32* %266 = OpAccessChain %9 %79 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpExtInst %1 43 %267 %136 %137 
                                Private f32* %269 = OpAccessChain %9 %79 
                                                      OpStore %269 %268 
                                Private f32* %270 = OpAccessChain %9 %79 
                                         f32 %271 = OpLoad %270 
                                         f32 %272 = OpFNegate %271 
                                         f32 %273 = OpFAdd %272 %137 
                                Private f32* %274 = OpAccessChain %9 %79 
                                                      OpStore %274 %273 
                                Private f32* %275 = OpAccessChain %9 %79 
                                         f32 %276 = OpLoad %275 
                                         f32 %277 = OpLoad %88 
                                         f32 %278 = OpFMul %276 %277 
                                Private f32* %279 = OpAccessChain %9 %79 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %9 %79 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %283 = OpAccessChain %21 %282 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpFMul %281 %284 
                                 Output f32* %287 = OpAccessChain %241 %77 
                                                      OpStore %287 %285 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 387
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationControl %4 "main" %23 %25 %30 %37 %39 %47 %51 %58 %60 %65 %67 %72 %74 %79 %81 %86 %88 %219 %371 
                                                      OpExecutionMode %4 OutputVertices 4 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %25 BuiltIn WorkgroupSize 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %37 Location 37 
                                                      OpDecorate %39 Location 39 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %51 Location 51 
                                                      OpDecorate %58 Location 58 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate %65 Location 65 
                                                      OpDecorate vs_TEXCOORD1 Location 67 
                                                      OpDecorate %72 Location 72 
                                                      OpDecorate vs_TEXCOORD2 Location 74 
                                                      OpDecorate %79 Location 79 
                                                      OpDecorate vs_TEXCOORD3 Location 81 
                                                      OpDecorate %86 Location 86 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %96 ArrayStride 96 
                                                      OpMemberDecorate %97 0 Offset 97 
                                                      OpMemberDecorate %97 1 Offset 97 
                                                      OpMemberDecorate %97 2 Offset 97 
                                                      OpMemberDecorate %97 3 Offset 97 
                                                      OpDecorate %97 Block 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate %219 Patch 
                                                      OpDecorate %219 BuiltIn 219 
                                                      OpDecorate %371 Patch 
                                                      OpDecorate %371 BuiltIn 371 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %8 = OpTypeInt 32 1 
                                               %9 = OpTypePointer Function %8 
                                              %10 = OpTypeFunction %2 %9 
                                              %17 = OpTypeFloat 32 
                                              %18 = OpTypeVector %17 4 
                                              %19 = OpTypeInt 32 0 
                                          u32 %20 = OpConstant 3 
                                              %21 = OpTypeArray %18 %20 
                                              %22 = OpTypePointer Output %21 
                             Output f32_4[3]* %23 = OpVariable Output 
                                              %24 = OpTypePointer Input %8 
                                   Input i32* %25 = OpVariable Input 
                                          u32 %27 = OpConstant 32 
                                              %28 = OpTypeArray %18 %27 
                                              %29 = OpTypePointer Input %28 
                             Input f32_4[32]* %30 = OpVariable Input 
                                              %32 = OpTypePointer Input %18 
                                              %35 = OpTypePointer Output %18 
                             Output f32_4[3]* %37 = OpVariable Output 
                             Input f32_4[32]* %39 = OpVariable Input 
                                              %44 = OpTypeVector %17 3 
                                              %45 = OpTypeArray %44 %20 
                                              %46 = OpTypePointer Output %45 
                             Output f32_3[3]* %47 = OpVariable Output 
                                              %49 = OpTypeArray %44 %27 
                                              %50 = OpTypePointer Input %49 
                             Input f32_3[32]* %51 = OpVariable Input 
                                              %53 = OpTypePointer Input %44 
                                              %56 = OpTypePointer Output %44 
                             Output f32_4[3]* %58 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD0 = OpVariable Input 
                             Output f32_4[3]* %65 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD1 = OpVariable Input 
                             Output f32_4[3]* %72 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD2 = OpVariable Input 
                             Output f32_4[3]* %79 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD3 = OpVariable Input 
                             Output f32_4[3]* %86 = OpVariable Output 
                             Input f32_4[32]* %88 = OpVariable Input 
                                              %93 = OpTypePointer Private %44 
                               Private f32_3* %94 = OpVariable Private 
                                          u32 %95 = OpConstant 4 
                                              %96 = OpTypeArray %18 %95 
                                              %97 = OpTypeStruct %44 %18 %96 %17 
                                              %98 = OpTypePointer Uniform %97 
Uniform struct {f32_3; f32_4; f32_4[4]; f32;}* %99 = OpVariable Uniform 
                                         i32 %100 = OpConstant 2 
                                         i32 %101 = OpConstant 1 
                                             %102 = OpTypePointer Uniform %18 
                                         i32 %110 = OpConstant 0 
                                         i32 %129 = OpConstant 3 
                              Private f32_3* %139 = OpVariable Private 
                              Private f32_3* %174 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                             %182 = OpTypePointer Uniform %44 
                                             %187 = OpTypePointer Private %17 
                                Private f32* %188 = OpVariable Private 
                                             %195 = OpTypePointer Uniform %17 
                                Private f32* %203 = OpVariable Private 
                                         u32 %210 = OpConstant 1 
                                             %217 = OpTypeArray %17 %95 
                                             %218 = OpTypePointer Output %217 
                              Output f32[4]* %219 = OpVariable Output 
                                         f32 %221 = OpConstant 3.674022E-40 
                                             %223 = OpTypePointer Output %17 
                              Private f32_3* %259 = OpVariable Private 
                                         u32 %285 = OpConstant 0 
                              Private f32_3* %325 = OpVariable Private 
                                         u32 %368 = OpConstant 2 
                                             %369 = OpTypeArray %17 %368 
                                             %370 = OpTypePointer Output %369 
                              Output f32[2]* %371 = OpVariable Output 
                                         f32 %374 = OpConstant 3.674022E-40 
                                             %379 = OpTypeBool 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %383 = OpVariable Function 
                               Function i32* %385 = OpVariable Function 
                                        void %377 = OpFunctionCall %6 
                                                      OpControlBarrier 368 95 285 
                                         i32 %378 = OpLoad %25 
                                        bool %380 = OpIEqual %378 %110 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %380 %381 %382 
                                             %381 = OpLabel 
                                                      OpStore %383 %110 
                                        void %384 = OpFunctionCall %12 %383 
                                                      OpStore %385 %110 
                                        void %386 = OpFunctionCall %15 %385 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
                                          void %6 = OpFunction None %3 
                                               %7 = OpLabel 
                                          i32 %26 = OpLoad %25 
                                          i32 %31 = OpLoad %25 
                                 Input f32_4* %33 = OpAccessChain %30 %31 
                                        f32_4 %34 = OpLoad %33 
                                Output f32_4* %36 = OpAccessChain %23 %26 
                                                      OpStore %36 %34 
                                          i32 %38 = OpLoad %25 
                                          i32 %40 = OpLoad %25 
                                 Input f32_4* %41 = OpAccessChain %39 %40 
                                        f32_4 %42 = OpLoad %41 
                                Output f32_4* %43 = OpAccessChain %37 %38 
                                                      OpStore %43 %42 
                                          i32 %48 = OpLoad %25 
                                          i32 %52 = OpLoad %25 
                                 Input f32_3* %54 = OpAccessChain %51 %52 
                                        f32_3 %55 = OpLoad %54 
                                Output f32_3* %57 = OpAccessChain %47 %48 
                                                      OpStore %57 %55 
                                          i32 %59 = OpLoad %25 
                                          i32 %61 = OpLoad %25 
                                 Input f32_4* %62 = OpAccessChain vs_TEXCOORD0 %61 
                                        f32_4 %63 = OpLoad %62 
                                Output f32_4* %64 = OpAccessChain %58 %59 
                                                      OpStore %64 %63 
                                          i32 %66 = OpLoad %25 
                                          i32 %68 = OpLoad %25 
                                 Input f32_4* %69 = OpAccessChain vs_TEXCOORD1 %68 
                                        f32_4 %70 = OpLoad %69 
                                Output f32_4* %71 = OpAccessChain %65 %66 
                                                      OpStore %71 %70 
                                          i32 %73 = OpLoad %25 
                                          i32 %75 = OpLoad %25 
                                 Input f32_4* %76 = OpAccessChain vs_TEXCOORD2 %75 
                                        f32_4 %77 = OpLoad %76 
                                Output f32_4* %78 = OpAccessChain %72 %73 
                                                      OpStore %78 %77 
                                          i32 %80 = OpLoad %25 
                                          i32 %82 = OpLoad %25 
                                 Input f32_4* %83 = OpAccessChain vs_TEXCOORD3 %82 
                                        f32_4 %84 = OpLoad %83 
                                Output f32_4* %85 = OpAccessChain %79 %80 
                                                      OpStore %85 %84 
                                          i32 %87 = OpLoad %25 
                                          i32 %89 = OpLoad %25 
                                 Input f32_4* %90 = OpAccessChain %88 %89 
                                        f32_4 %91 = OpLoad %90 
                                Output f32_4* %92 = OpAccessChain %86 %87 
                                                      OpStore %92 %91 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %12 = OpFunction None %10 
                                Function i32* %11 = OpFunctionParameter 
                                              %13 = OpLabel 
                              Uniform f32_4* %103 = OpAccessChain %99 %100 %101 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                Input f32_4* %106 = OpAccessChain %30 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 1 1 1 
                                       f32_3 %109 = OpFMul %105 %108 
                                                      OpStore %94 %109 
                              Uniform f32_4* %111 = OpAccessChain %99 %100 %110 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                Input f32_4* %114 = OpAccessChain %30 %101 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %113 %116 
                                       f32_3 %118 = OpLoad %94 
                                       f32_3 %119 = OpFAdd %117 %118 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %99 %100 %100 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                Input f32_4* %123 = OpAccessChain %30 %101 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 2 2 2 
                                       f32_3 %126 = OpFMul %122 %125 
                                       f32_3 %127 = OpLoad %94 
                                       f32_3 %128 = OpFAdd %126 %127 
                                                      OpStore %94 %128 
                              Uniform f32_4* %130 = OpAccessChain %99 %100 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                Input f32_4* %133 = OpAccessChain %30 %101 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 3 3 3 
                                       f32_3 %136 = OpFMul %132 %135 
                                       f32_3 %137 = OpLoad %94 
                                       f32_3 %138 = OpFAdd %136 %137 
                                                      OpStore %94 %138 
                              Uniform f32_4* %140 = OpAccessChain %99 %100 %101 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                Input f32_4* %143 = OpAccessChain %30 %100 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 1 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                                      OpStore %139 %146 
                              Uniform f32_4* %147 = OpAccessChain %99 %100 %110 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                Input f32_4* %150 = OpAccessChain %30 %100 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 0 0 
                                       f32_3 %153 = OpFMul %149 %152 
                                       f32_3 %154 = OpLoad %139 
                                       f32_3 %155 = OpFAdd %153 %154 
                                                      OpStore %139 %155 
                              Uniform f32_4* %156 = OpAccessChain %99 %100 %100 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                Input f32_4* %159 = OpAccessChain %30 %100 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 2 2 2 
                                       f32_3 %162 = OpFMul %158 %161 
                                       f32_3 %163 = OpLoad %139 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %139 %164 
                              Uniform f32_4* %165 = OpAccessChain %99 %100 %129 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                Input f32_4* %168 = OpAccessChain %30 %100 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 3 3 3 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_3 %172 = OpLoad %139 
                                       f32_3 %173 = OpFAdd %171 %172 
                                                      OpStore %139 %173 
                                       f32_3 %175 = OpLoad %94 
                                       f32_3 %176 = OpLoad %139 
                                       f32_3 %177 = OpFAdd %175 %176 
                                                      OpStore %174 %177 
                                       f32_3 %178 = OpLoad %174 
                                       f32_3 %181 = OpFMul %178 %180 
                              Uniform f32_3* %183 = OpAccessChain %99 %110 
                                       f32_3 %184 = OpLoad %183 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpFAdd %181 %185 
                                                      OpStore %174 %186 
                                       f32_3 %189 = OpLoad %174 
                                       f32_3 %190 = OpLoad %174 
                                         f32 %191 = OpDot %189 %190 
                                                      OpStore %188 %191 
                                         f32 %192 = OpLoad %188 
                                         f32 %193 = OpExtInst %1 31 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                Uniform f32* %196 = OpAccessChain %99 %129 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %194 %197 
                                                      OpStore %188 %198 
                                       f32_3 %199 = OpLoad %94 
                                       f32_3 %200 = OpLoad %139 
                                       f32_3 %201 = OpFNegate %200 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore %174 %202 
                                       f32_3 %204 = OpLoad %174 
                                       f32_3 %205 = OpLoad %174 
                                         f32 %206 = OpDot %204 %205 
                                                      OpStore %203 %206 
                                         f32 %207 = OpLoad %203 
                                         f32 %208 = OpExtInst %1 31 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                Uniform f32* %211 = OpAccessChain %99 %101 %210 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %209 %212 
                                                      OpStore %203 %213 
                                         f32 %214 = OpLoad %203 
                                         f32 %215 = OpLoad %188 
                                         f32 %216 = OpFDiv %214 %215 
                                                      OpStore %188 %216 
                                         f32 %220 = OpLoad %188 
                                         f32 %222 = OpExtInst %1 40 %220 %221 
                                 Output f32* %224 = OpAccessChain %219 %110 
                                                      OpStore %224 %222 
                              Uniform f32_4* %225 = OpAccessChain %99 %100 %101 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                Input f32_4* %228 = OpAccessChain %30 %110 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 1 1 1 
                                       f32_3 %231 = OpFMul %227 %230 
                                                      OpStore %174 %231 
                              Uniform f32_4* %232 = OpAccessChain %99 %100 %110 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                Input f32_4* %235 = OpAccessChain %30 %110 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 0 0 
                                       f32_3 %238 = OpFMul %234 %237 
                                       f32_3 %239 = OpLoad %174 
                                       f32_3 %240 = OpFAdd %238 %239 
                                                      OpStore %174 %240 
                              Uniform f32_4* %241 = OpAccessChain %99 %100 %100 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                Input f32_4* %244 = OpAccessChain %30 %110 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 2 2 2 
                                       f32_3 %247 = OpFMul %243 %246 
                                       f32_3 %248 = OpLoad %174 
                                       f32_3 %249 = OpFAdd %247 %248 
                                                      OpStore %174 %249 
                              Uniform f32_4* %250 = OpAccessChain %99 %100 %129 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                Input f32_4* %253 = OpAccessChain %30 %110 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 3 3 3 
                                       f32_3 %256 = OpFMul %252 %255 
                                       f32_3 %257 = OpLoad %174 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore %174 %258 
                                       f32_3 %260 = OpLoad %139 
                                       f32_3 %261 = OpLoad %174 
                                       f32_3 %262 = OpFAdd %260 %261 
                                                      OpStore %259 %262 
                                       f32_3 %263 = OpLoad %139 
                                       f32_3 %264 = OpLoad %174 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_3 %266 = OpFAdd %263 %265 
                                                      OpStore %139 %266 
                                       f32_3 %267 = OpLoad %139 
                                       f32_3 %268 = OpLoad %139 
                                         f32 %269 = OpDot %267 %268 
                                                      OpStore %188 %269 
                                         f32 %270 = OpLoad %188 
                                         f32 %271 = OpExtInst %1 31 %270 
                                                      OpStore %188 %271 
                                         f32 %272 = OpLoad %188 
                                Uniform f32* %273 = OpAccessChain %99 %101 %210 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                                      OpStore %188 %275 
                                       f32_3 %276 = OpLoad %259 
                                       f32_3 %277 = OpFMul %276 %180 
                              Uniform f32_3* %278 = OpAccessChain %99 %110 
                                       f32_3 %279 = OpLoad %278 
                                       f32_3 %280 = OpFNegate %279 
                                       f32_3 %281 = OpFAdd %277 %280 
                                                      OpStore %139 %281 
                                       f32_3 %282 = OpLoad %139 
                                       f32_3 %283 = OpLoad %139 
                                         f32 %284 = OpDot %282 %283 
                                Private f32* %286 = OpAccessChain %139 %285 
                                                      OpStore %286 %284 
                                Private f32* %287 = OpAccessChain %139 %285 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 31 %288 
                                Private f32* %290 = OpAccessChain %139 %285 
                                                      OpStore %290 %289 
                                Private f32* %291 = OpAccessChain %139 %285 
                                         f32 %292 = OpLoad %291 
                                Uniform f32* %293 = OpAccessChain %99 %129 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFMul %292 %294 
                                Private f32* %296 = OpAccessChain %139 %285 
                                                      OpStore %296 %295 
                                         f32 %297 = OpLoad %188 
                                Private f32* %298 = OpAccessChain %139 %285 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFDiv %297 %299 
                                                      OpStore %188 %300 
                                         f32 %301 = OpLoad %188 
                                         f32 %302 = OpExtInst %1 40 %301 %221 
                                 Output f32* %303 = OpAccessChain %219 %101 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %94 
                                       f32_3 %305 = OpLoad %174 
                                       f32_3 %306 = OpFAdd %304 %305 
                                                      OpStore %139 %306 
                                       f32_3 %307 = OpLoad %94 
                                       f32_3 %308 = OpFNegate %307 
                                       f32_3 %309 = OpLoad %174 
                                       f32_3 %310 = OpFAdd %308 %309 
                                                      OpStore %94 %310 
                                       f32_3 %311 = OpLoad %94 
                                       f32_3 %312 = OpLoad %94 
                                         f32 %313 = OpDot %311 %312 
                                Private f32* %314 = OpAccessChain %94 %285 
                                                      OpStore %314 %313 
                                Private f32* %315 = OpAccessChain %94 %285 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpExtInst %1 31 %316 
                                Private f32* %318 = OpAccessChain %94 %285 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %94 %285 
                                         f32 %320 = OpLoad %319 
                                Uniform f32* %321 = OpAccessChain %99 %101 %210 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %320 %322 
                                Private f32* %324 = OpAccessChain %94 %285 
                                                      OpStore %324 %323 
                                       f32_3 %326 = OpLoad %139 
                                       f32_3 %327 = OpFMul %326 %180 
                              Uniform f32_3* %328 = OpAccessChain %99 %110 
                                       f32_3 %329 = OpLoad %328 
                                       f32_3 %330 = OpFNegate %329 
                                       f32_3 %331 = OpFAdd %327 %330 
                                                      OpStore %325 %331 
                                       f32_3 %332 = OpLoad %325 
                                       f32_3 %333 = OpLoad %325 
                                         f32 %334 = OpDot %332 %333 
                                Private f32* %335 = OpAccessChain %325 %285 
                                                      OpStore %335 %334 
                                Private f32* %336 = OpAccessChain %325 %285 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpExtInst %1 31 %337 
                                Private f32* %339 = OpAccessChain %325 %285 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %325 %285 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %99 %129 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFMul %341 %343 
                                Private f32* %345 = OpAccessChain %325 %285 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %94 %285 
                                         f32 %347 = OpLoad %346 
                                Private f32* %348 = OpAccessChain %325 %285 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFDiv %347 %349 
                                Private f32* %351 = OpAccessChain %94 %285 
                                                      OpStore %351 %350 
                                Private f32* %352 = OpAccessChain %94 %285 
                                         f32 %353 = OpLoad %352 
                                         f32 %354 = OpExtInst %1 40 %353 %221 
                                 Output f32* %355 = OpAccessChain %219 %100 
                                                      OpStore %355 %354 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %15 = OpFunction None %10 
                                Function i32* %14 = OpFunctionParameter 
                                              %16 = OpLabel 
                                 Output f32* %356 = OpAccessChain %219 %100 
                                         f32 %357 = OpLoad %356 
                                 Output f32* %358 = OpAccessChain %219 %100 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                Private f32* %361 = OpAccessChain %94 %285 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %94 %285 
                                         f32 %363 = OpLoad %362 
                                 Output f32* %364 = OpAccessChain %219 %100 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFAdd %363 %365 
                                Private f32* %367 = OpAccessChain %94 %285 
                                                      OpStore %367 %366 
                                Private f32* %372 = OpAccessChain %94 %285 
                                         f32 %373 = OpLoad %372 
                                         f32 %375 = OpFMul %373 %374 
                                 Output f32* %376 = OpAccessChain %371 %110 
                                                      OpStore %376 %375 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 396
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationEvaluation %4 "main" %12 %20 %139 %208 %236 %321 %331 %380 
                                                      OpExecutionMode %4 Triangles 
                                                      OpExecutionMode %4 SpacingFractionalOdd 
                                                      OpExecutionMode %4 VertexOrderCw 
                                                      OpDecorate %12 BuiltIn TessLevelInner 
                                                      OpDecorate %20 Location 20 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpMemberDecorate %61 5 Offset 61 
                                                      OpMemberDecorate %61 6 Offset 61 
                                                      OpMemberDecorate %61 7 Offset 61 
                                                      OpMemberDecorate %61 8 Offset 61 
                                                      OpMemberDecorate %61 9 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %97 DescriptorSet 97 
                                                      OpDecorate %97 Binding 97 
                                                      OpDecorate %101 DescriptorSet 101 
                                                      OpDecorate %101 Binding 101 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %113 DescriptorSet 113 
                                                      OpDecorate %113 Binding 113 
                                                      OpDecorate %139 Location 139 
                                                      OpDecorate %208 Location 208 
                                                      OpDecorate %236 Location 236 
                                                      OpMemberDecorate %319 0 BuiltIn 319 
                                                      OpMemberDecorate %319 1 BuiltIn 319 
                                                      OpMemberDecorate %319 2 BuiltIn 319 
                                                      OpDecorate %319 Block 
                                                      OpDecorate %331 Location 331 
                                                      OpDecorate %380 Location 380 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 32 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypePointer Input %18 
                             Input f32_4[32]* %20 = OpVariable Input 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Input %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %42 = OpConstant 2 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                              %60 = OpTypeArray %7 %56 
                                              %61 = OpTypeStruct %7 %57 %58 %59 %60 %6 %6 %7 %6 %6 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32; f32;}* %63 = OpVariable Uniform 
                                          i32 %64 = OpConstant 7 
                                              %65 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 5 
                                              %80 = OpTypePointer Uniform %6 
                                          i32 %83 = OpConstant 6 
                                              %93 = OpTypePointer Private %6 
                                 Private f32* %94 = OpVariable Private 
                                              %95 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %96 = OpTypePointer UniformConstant %95 
         UniformConstant read_only Texture2D* %97 = OpVariable UniformConstant 
                                              %99 = OpTypeSampler 
                                             %100 = OpTypePointer UniformConstant %99 
                    UniformConstant sampler* %101 = OpVariable UniformConstant 
                                             %103 = OpTypeSampledImage %95 
                                         f32 %107 = OpConstant 3.674022E-40 
                                         u32 %109 = OpConstant 0 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                    UniformConstant sampler* %113 = OpVariable UniformConstant 
                              Private f32_4* %134 = OpVariable Private 
                                             %137 = OpTypeArray %10 %17 
                                             %138 = OpTypePointer Input %137 
                            Input f32_3[32]* %139 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         u32 %179 = OpConstant 2 
                                         u32 %187 = OpConstant 1 
                                Private f32* %189 = OpVariable Private 
                                         i32 %202 = OpConstant 8 
                                             %207 = OpTypePointer Output %10 
                               Output f32_3* %208 = OpVariable Output 
                                         f32 %222 = OpConstant 3.674022E-40 
                            Input f32_4[32]* %236 = OpVariable Input 
                                         i32 %256 = OpConstant 9 
                                         i32 %294 = OpConstant 3 
                              Private f32_4* %298 = OpVariable Private 
                                             %318 = OpTypeArray %6 %187 
                                             %319 = OpTypeStruct %7 %6 %318 
                                             %320 = OpTypePointer Output %319 
        Output struct {f32_4; f32; f32[1];}* %321 = OpVariable Output 
                                             %329 = OpTypePointer Output %7 
                               Output f32_3* %331 = OpVariable Output 
                                         i32 %350 = OpConstant 4 
                                             %379 = OpTypePointer Output %13 
                               Output f32_2* %380 = OpVariable Output 
                                             %390 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 1 1 
                                 Input f32_4* %24 = OpAccessChain %20 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                                        f32_2 %27 = OpFMul %15 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                                 Input f32_4* %31 = OpAccessChain %20 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_3 %34 = OpLoad %12 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 0 
                                        f32_2 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                                        f32_2 %39 = OpFAdd %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                 Input f32_4* %43 = OpAccessChain %20 %42 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_3 %46 = OpLoad %12 
                                        f32_2 %47 = OpVectorShuffle %46 %46 2 2 
                                        f32_2 %48 = OpFMul %45 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                                        f32_2 %51 = OpFAdd %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               Uniform f32_4* %66 = OpAccessChain %63 %64 
                                        f32_4 %67 = OpLoad %66 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                        f32_2 %69 = OpFMul %55 %68 
                               Uniform f32_4* %70 = OpAccessChain %63 %64 
                                        f32_4 %71 = OpLoad %70 
                                        f32_2 %72 = OpVectorShuffle %71 %71 2 3 
                                        f32_2 %73 = OpFAdd %69 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %73 4 5 2 3 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %63 %30 
                                        f32_4 %77 = OpLoad %76 
                                        f32_2 %78 = OpVectorShuffle %77 %77 1 1 
                                 Uniform f32* %81 = OpAccessChain %63 %79 
                                          f32 %82 = OpLoad %81 
                                 Uniform f32* %84 = OpAccessChain %63 %83 
                                          f32 %85 = OpLoad %84 
                                        f32_2 %86 = OpCompositeConstruct %82 %85 
                                        f32_2 %87 = OpFMul %78 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_2 %90 = OpFAdd %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 2 3 
                                                      OpStore %9 %92 
                          read_only Texture2D %98 = OpLoad %97 
                                     sampler %102 = OpLoad %101 
                  read_only Texture2DSampled %104 = OpSampledImage %98 %102 
                                       f32_4 %105 = OpLoad %9 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %108 = OpImageSampleExplicitLod %104 %106 Lod %7 
                                         f32 %110 = OpCompositeExtract %108 0 
                                                      OpStore %94 %110 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %114 = OpLoad %113 
                  read_only Texture2DSampled %115 = OpSampledImage %112 %114 
                                       f32_4 %116 = OpLoad %9 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpImageSampleExplicitLod %115 %117 Lod %7 
                                         f32 %119 = OpCompositeExtract %118 0 
                                Private f32* %120 = OpAccessChain %9 %109 
                                                      OpStore %120 %119 
                                Private f32* %121 = OpAccessChain %9 %109 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpLoad %94 
                                         f32 %124 = OpFMul %122 %123 
                                Private f32* %125 = OpAccessChain %9 %109 
                                                      OpStore %125 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                              Uniform f32_4* %128 = OpAccessChain %63 %42 %22 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %127 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %9 %133 
                                       f32_3 %135 = OpLoad %12 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                                Input f32_3* %140 = OpAccessChain %139 %22 
                                       f32_3 %141 = OpLoad %140 
                                       f32_3 %142 = OpFMul %136 %141 
                                       f32_4 %143 = OpLoad %134 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %134 %144 
                                Input f32_3* %145 = OpAccessChain %139 %30 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpLoad %12 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 0 0 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %134 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %149 %151 
                                       f32_4 %153 = OpLoad %134 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %134 %154 
                                Input f32_3* %155 = OpAccessChain %139 %42 
                                       f32_3 %156 = OpLoad %155 
                                       f32_3 %157 = OpLoad %12 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %134 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %134 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %134 %164 
                                       f32_4 %166 = OpLoad %134 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                              Uniform f32_4* %168 = OpAccessChain %63 %42 %30 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %167 %170 
                                Private f32* %172 = OpAccessChain %165 %109 
                                                      OpStore %172 %171 
                                       f32_4 %173 = OpLoad %134 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                              Uniform f32_4* %175 = OpAccessChain %63 %42 %42 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %165 %179 
                                                      OpStore %180 %178 
                                       f32_4 %181 = OpLoad %134 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                              Uniform f32_4* %183 = OpAccessChain %63 %42 %22 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %182 %185 
                                Private f32* %188 = OpAccessChain %165 %187 
                                                      OpStore %188 %186 
                                       f32_4 %190 = OpLoad %165 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %165 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %191 %193 
                                                      OpStore %189 %194 
                                         f32 %195 = OpLoad %189 
                                         f32 %196 = OpExtInst %1 32 %195 
                                                      OpStore %189 %196 
                                Private f32* %197 = OpAccessChain %165 %187 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFNegate %198 
                                         f32 %200 = OpLoad %189 
                                         f32 %201 = OpFMul %199 %200 
                                Uniform f32* %203 = OpAccessChain %63 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFAdd %201 %204 
                                Private f32* %206 = OpAccessChain %134 %109 
                                                      OpStore %206 %205 
                                         f32 %209 = OpLoad %189 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_4 %211 = OpLoad %165 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFMul %210 %212 
                                                      OpStore %208 %213 
                                Private f32* %214 = OpAccessChain %134 %109 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpExtInst %1 4 %215 
                                Uniform f32* %217 = OpAccessChain %63 %202 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                         f32 %220 = OpFAdd %216 %219 
                                                      OpStore %189 %220 
                                         f32 %221 = OpLoad %189 
                                         f32 %223 = OpExtInst %1 43 %221 %107 %222 
                                                      OpStore %189 %223 
                                         f32 %224 = OpLoad %189 
                                         f32 %225 = OpFNegate %224 
                                         f32 %226 = OpFAdd %225 %222 
                                                      OpStore %189 %226 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                         f32 %229 = OpLoad %189 
                                       f32_3 %230 = OpCompositeConstruct %229 %229 %229 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_3 %234 = OpLoad %12 
                                       f32_4 %235 = OpVectorShuffle %234 %234 1 1 1 1 
                                Input f32_4* %237 = OpAccessChain %236 %22 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpFMul %235 %238 
                                                      OpStore %134 %239 
                                Input f32_4* %240 = OpAccessChain %236 %30 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpLoad %12 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpFMul %241 %243 
                                       f32_4 %245 = OpLoad %134 
                                       f32_4 %246 = OpFAdd %244 %245 
                                                      OpStore %134 %246 
                                Input f32_4* %247 = OpAccessChain %236 %42 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpLoad %12 
                                       f32_4 %250 = OpVectorShuffle %249 %249 2 2 2 2 
                                       f32_4 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %134 
                                       f32_4 %253 = OpFAdd %251 %252 
                                                      OpStore %134 %253 
                                       f32_4 %254 = OpLoad %9 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                Uniform f32* %257 = OpAccessChain %63 %256 
                                         f32 %258 = OpLoad %257 
                                Uniform f32* %259 = OpAccessChain %63 %256 
                                         f32 %260 = OpLoad %259 
                                Uniform f32* %261 = OpAccessChain %63 %256 
                                         f32 %262 = OpLoad %261 
                                       f32_3 %263 = OpCompositeConstruct %258 %260 %262 
                                         f32 %264 = OpCompositeExtract %263 0 
                                         f32 %265 = OpCompositeExtract %263 1 
                                         f32 %266 = OpCompositeExtract %263 2 
                                       f32_3 %267 = OpCompositeConstruct %264 %265 %266 
                                       f32_3 %268 = OpFMul %255 %267 
                                       f32_4 %269 = OpLoad %134 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %9 %273 
                                       f32_4 %274 = OpLoad %9 
                                       f32_4 %275 = OpVectorShuffle %274 %274 1 1 1 1 
                              Uniform f32_4* %276 = OpAccessChain %63 %22 %22 
                                       f32_4 %277 = OpLoad %276 
                                       f32_4 %278 = OpFMul %275 %277 
                                                      OpStore %165 %278 
                              Uniform f32_4* %279 = OpAccessChain %63 %22 %30 
                                       f32_4 %280 = OpLoad %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %281 0 0 0 0 
                                       f32_4 %283 = OpFMul %280 %282 
                                       f32_4 %284 = OpLoad %165 
                                       f32_4 %285 = OpFAdd %283 %284 
                                                      OpStore %165 %285 
                              Uniform f32_4* %286 = OpAccessChain %63 %22 %42 
                                       f32_4 %287 = OpLoad %286 
                                       f32_4 %288 = OpLoad %9 
                                       f32_4 %289 = OpVectorShuffle %288 %288 2 2 2 2 
                                       f32_4 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %165 
                                       f32_4 %292 = OpFAdd %290 %291 
                                                      OpStore %9 %292 
                                       f32_4 %293 = OpLoad %9 
                              Uniform f32_4* %295 = OpAccessChain %63 %22 %294 
                                       f32_4 %296 = OpLoad %295 
                                       f32_4 %297 = OpFAdd %293 %296 
                                                      OpStore %165 %297 
                                       f32_4 %299 = OpLoad %165 
                                       f32_4 %300 = OpVectorShuffle %299 %299 1 1 1 1 
                              Uniform f32_4* %301 = OpAccessChain %63 %294 %22 
                                       f32_4 %302 = OpLoad %301 
                                       f32_4 %303 = OpFMul %300 %302 
                                                      OpStore %298 %303 
                              Uniform f32_4* %304 = OpAccessChain %63 %294 %30 
                                       f32_4 %305 = OpLoad %304 
                                       f32_4 %306 = OpLoad %165 
                                       f32_4 %307 = OpVectorShuffle %306 %306 0 0 0 0 
                                       f32_4 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %298 
                                       f32_4 %310 = OpFAdd %308 %309 
                                                      OpStore %298 %310 
                              Uniform f32_4* %311 = OpAccessChain %63 %294 %42 
                                       f32_4 %312 = OpLoad %311 
                                       f32_4 %313 = OpLoad %165 
                                       f32_4 %314 = OpVectorShuffle %313 %313 2 2 2 2 
                                       f32_4 %315 = OpFMul %312 %314 
                                       f32_4 %316 = OpLoad %298 
                                       f32_4 %317 = OpFAdd %315 %316 
                                                      OpStore %298 %317 
                              Uniform f32_4* %322 = OpAccessChain %63 %294 %294 
                                       f32_4 %323 = OpLoad %322 
                                       f32_4 %324 = OpLoad %165 
                                       f32_4 %325 = OpVectorShuffle %324 %324 3 3 3 3 
                                       f32_4 %326 = OpFMul %323 %325 
                                       f32_4 %327 = OpLoad %298 
                                       f32_4 %328 = OpFAdd %326 %327 
                               Output f32_4* %330 = OpAccessChain %321 %30 
                                                      OpStore %330 %328 
                              Uniform f32_4* %332 = OpAccessChain %63 %22 %294 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_4 %335 = OpLoad %134 
                                       f32_3 %336 = OpVectorShuffle %335 %335 3 3 3 
                                       f32_3 %337 = OpFMul %334 %336 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_3 %340 = OpFAdd %337 %339 
                                                      OpStore %331 %340 
                              Uniform f32_4* %341 = OpAccessChain %63 %22 %294 
                                       f32_4 %342 = OpLoad %341 
                                       f32_4 %343 = OpLoad %134 
                                       f32_4 %344 = OpVectorShuffle %343 %343 3 3 3 3 
                                       f32_4 %345 = OpFMul %342 %344 
                                       f32_4 %346 = OpLoad %9 
                                       f32_4 %347 = OpFAdd %345 %346 
                                                      OpStore %9 %347 
                                       f32_4 %348 = OpLoad %9 
                                       f32_2 %349 = OpVectorShuffle %348 %348 1 1 
                              Uniform f32_4* %351 = OpAccessChain %63 %350 %22 
                                       f32_4 %352 = OpLoad %351 
                                       f32_2 %353 = OpVectorShuffle %352 %352 0 1 
                                       f32_2 %354 = OpFMul %349 %353 
                                       f32_4 %355 = OpLoad %134 
                                       f32_4 %356 = OpVectorShuffle %355 %354 4 5 2 3 
                                                      OpStore %134 %356 
                              Uniform f32_4* %357 = OpAccessChain %63 %350 %30 
                                       f32_4 %358 = OpLoad %357 
                                       f32_2 %359 = OpVectorShuffle %358 %358 0 1 
                                       f32_4 %360 = OpLoad %9 
                                       f32_2 %361 = OpVectorShuffle %360 %360 0 0 
                                       f32_2 %362 = OpFMul %359 %361 
                                       f32_4 %363 = OpLoad %134 
                                       f32_2 %364 = OpVectorShuffle %363 %363 0 1 
                                       f32_2 %365 = OpFAdd %362 %364 
                                       f32_4 %366 = OpLoad %9 
                                       f32_4 %367 = OpVectorShuffle %366 %365 4 5 2 3 
                                                      OpStore %9 %367 
                              Uniform f32_4* %368 = OpAccessChain %63 %350 %42 
                                       f32_4 %369 = OpLoad %368 
                                       f32_2 %370 = OpVectorShuffle %369 %369 0 1 
                                       f32_4 %371 = OpLoad %9 
                                       f32_2 %372 = OpVectorShuffle %371 %371 2 2 
                                       f32_2 %373 = OpFMul %370 %372 
                                       f32_4 %374 = OpLoad %9 
                                       f32_2 %375 = OpVectorShuffle %374 %374 0 1 
                                       f32_2 %376 = OpFAdd %373 %375 
                                       f32_4 %377 = OpLoad %9 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 2 3 
                                                      OpStore %9 %378 
                              Uniform f32_4* %381 = OpAccessChain %63 %350 %294 
                                       f32_4 %382 = OpLoad %381 
                                       f32_2 %383 = OpVectorShuffle %382 %382 0 1 
                                       f32_4 %384 = OpLoad %9 
                                       f32_2 %385 = OpVectorShuffle %384 %384 3 3 
                                       f32_2 %386 = OpFMul %383 %385 
                                       f32_4 %387 = OpLoad %9 
                                       f32_2 %388 = OpVectorShuffle %387 %387 0 1 
                                       f32_2 %389 = OpFAdd %386 %388 
                                                      OpStore %380 %389 
                                 Output f32* %391 = OpAccessChain %321 %30 %187 
                                         f32 %392 = OpLoad %391 
                                         f32 %393 = OpFNegate %392 
                                 Output f32* %394 = OpAccessChain %321 %30 %187 
                                                      OpStore %394 %393 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT" }
"#ifdef VERTEX
#version 410
#extension GL_ARB_explicit_attrib_location : require

in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
in  vec4 in_TEXCOORD3;
in  vec4 in_COLOR0;
layout(location = 0) out vec4 vs_INTERNALTESSPOS0;
layout(location = 1) out vec4 vs_TANGENT0;
layout(location = 2) out vec3 vs_NORMAL0;
layout(location = 3) out vec4 vs_TEXCOORD0;
layout(location = 4) out vec4 vs_TEXCOORD1;
layout(location = 5) out vec4 vs_TEXCOORD2;
layout(location = 6) out vec4 vs_TEXCOORD3;
layout(location = 7) out vec4 vs_COLOR0;
void main()
{
    vs_INTERNALTESSPOS0 = in_POSITION0;
    vs_TANGENT0 = in_TANGENT0;
    vs_NORMAL0.xyz = in_NORMAL0.xyz;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD3;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Y_Mask;
uniform 	float _FresnelBias;
uniform 	float _FresnelScale;
uniform 	float _FresnelPower;
uniform 	float _Alpha;
UNITY_LOCATION(0) uniform  sampler2D _LightTexture0;
layout(location = 0) in  vec3 ds_TEXCOORD0;
layout(location = 1) in  float ds_TEXCOORD3;
layout(location = 2) in  vec3 ds_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat6;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlat0.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = max(u_xlat9, 0.00100000005);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat10 = u_xlat9 * u_xlat9;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat9 = u_xlat9 * u_xlat10;
    u_xlat9 = u_xlat9 * 0.959999979 + 0.0399999991;
    u_xlat10 = dot(ds_TEXCOORD0.xyz, ds_TEXCOORD0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat2.xyz = vec3(u_xlat10) * ds_TEXCOORD0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat3.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat6 = abs(u_xlat0.x) + u_xlat3.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = _FresnelScale * u_xlat0.x + _FresnelBias;
    u_xlat6 = u_xlat6 + 9.99999975e-06;
    u_xlat6 = 0.5 / u_xlat6;
    u_xlat6 = u_xlat6 * 0.999999881;
    u_xlat3.x = u_xlat3.x * u_xlat6;
    u_xlat1.xyz = ds_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * ds_TEXCOORD1.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * ds_TEXCOORD1.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = texture(_LightTexture0, vec2(u_xlat6)).x;
    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat1.x = ds_TEXCOORD3 * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xxx;
    u_xlat3.x = (-ds_TEXCOORD0.y) + _Y_Mask;
    u_xlat3.x = abs(u_xlat3.x) + (-_Y_Mask);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    SV_Target0.w = u_xlat0.x * _Alpha;
    return;
}

#endif
#ifdef HULL
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(vertices=3) out;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	float _EdgeLength;
layout(location = 0) in vec4 vs_INTERNALTESSPOS0[];
layout(location = 0) out vec4 hs_INTERNALTESSPOS0[];
layout(location = 1) in vec4 vs_TANGENT0[];
layout(location = 1) out vec4 hs_TANGENT0[];
layout(location = 2) in vec3 vs_NORMAL0[];
layout(location = 2) out vec3 hs_NORMAL0[];
layout(location = 3) in vec4 vs_TEXCOORD0[];
layout(location = 3) out vec4 hs_TEXCOORD0[];
layout(location = 4) in vec4 vs_TEXCOORD1[];
layout(location = 4) out vec4 hs_TEXCOORD1[];
layout(location = 5) in vec4 vs_TEXCOORD2[];
layout(location = 5) out vec4 hs_TEXCOORD2[];
layout(location = 6) in vec4 vs_TEXCOORD3[];
layout(location = 6) out vec4 hs_TEXCOORD3[];
layout(location = 7) in vec4 vs_COLOR0[];
layout(location = 7) out vec4 hs_COLOR0[];
void passthrough_ctrl_points()
{
    hs_INTERNALTESSPOS0[gl_InvocationID] = vs_INTERNALTESSPOS0[gl_InvocationID];
    hs_TANGENT0[gl_InvocationID] = vs_TANGENT0[gl_InvocationID];
    hs_NORMAL0[gl_InvocationID] = vs_NORMAL0[gl_InvocationID];
    hs_TEXCOORD0[gl_InvocationID] = vs_TEXCOORD0[gl_InvocationID];
    hs_TEXCOORD1[gl_InvocationID] = vs_TEXCOORD1[gl_InvocationID];
    hs_TEXCOORD2[gl_InvocationID] = vs_TEXCOORD2[gl_InvocationID];
    hs_TEXCOORD3[gl_InvocationID] = vs_TEXCOORD3[gl_InvocationID];
    hs_COLOR0[gl_InvocationID] = vs_COLOR0[gl_InvocationID];
}
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
float u_xlat13;
void fork_phase2(int phaseInstanceID)
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[1].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[1].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[2].www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _EdgeLength;
    u_xlat2.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _ScreenParams.y;
    u_xlat12 = u_xlat13 / u_xlat12;
    gl_TessLevelOuter[0] = max(u_xlat12, 1.0);
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[0].www + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _ScreenParams.y;
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _EdgeLength;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    gl_TessLevelOuter[1] = max(u_xlat12, 1.0);
    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _ScreenParams.y;
    u_xlat4.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _EdgeLength;
    u_xlat0.x = u_xlat0.x / u_xlat4.x;
    gl_TessLevelOuter[2] = max(u_xlat0.x, 1.0);
}
void join_phase3(int phaseInstanceID)
{
    u_xlat0.x = gl_TessLevelOuter[2] + gl_TessLevelOuter[2];
    u_xlat0.x = u_xlat0.x + gl_TessLevelOuter[2];
    gl_TessLevelInner[0] = u_xlat0.x * 0.333333343;
}
void main()
{
    passthrough_ctrl_points();
    barrier();
    if (gl_InvocationID == 0)
    {
        fork_phase2(0);
        join_phase3(0);
    }
}

#endif
#ifdef DOMAIN
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(ccw) in;
layout(fractional_odd_spacing) in;
layout(triangles) in;
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _u;
uniform 	float _v;
uniform 	vec4 _Flamenoise_ST;
uniform 	float _Y_Mask;
uniform 	float _FlameHeight;
UNITY_LOCATION(1) uniform  sampler2D _FlameWave;
UNITY_LOCATION(2) uniform  sampler2D _Flamenoise;
layout(location = 0) in  vec4 hs_INTERNALTESSPOS0 [];
layout(location = 2) in  vec3 hs_NORMAL0 [];
layout(location = 3) in  vec4 hs_TEXCOORD0 [];
layout(location = 0) out vec3 ds_TEXCOORD0;
layout(location = 1) out float ds_TEXCOORD3;
layout(location = 2) out vec3 ds_TEXCOORD1;
layout(location = 3) out vec3 ds_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = gl_TessCoord.yy * hs_TEXCOORD0[1].xy;
    u_xlat0.xy = hs_TEXCOORD0[0].xy * gl_TessCoord.xx + u_xlat0.xy;
    u_xlat0.xy = hs_TEXCOORD0[2].xy * gl_TessCoord.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _Flamenoise_ST.xy + _Flamenoise_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_u, _v) + u_xlat0.xy;
    u_xlat8 = textureLod(_FlameWave, u_xlat0.xy, 0.0).x;
    u_xlat0.x = textureLod(_Flamenoise, u_xlat0.xy, 0.0).x;
    u_xlat0.x = u_xlat0.x * u_xlat8;
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat1.xyz = gl_TessCoord.yyy * hs_NORMAL0[1].xyz;
    u_xlat1.xyz = hs_NORMAL0[0].xyz * gl_TessCoord.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hs_NORMAL0[2].xyz * gl_TessCoord.zzz + u_xlat1.xyz;
    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.x = (-u_xlat2.y) * u_xlat12 + _Y_Mask;
    ds_TEXCOORD0.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = abs(u_xlat1.x) + (-_Y_Mask);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
    u_xlat1 = gl_TessCoord.yyyy * hs_INTERNALTESSPOS0[1];
    u_xlat1 = hs_INTERNALTESSPOS0[0] * gl_TessCoord.xxxx + u_xlat1;
    u_xlat1 = hs_INTERNALTESSPOS0[2] * gl_TessCoord.zzzz + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_FlameHeight, _FlameHeight, _FlameHeight)) + u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    ds_TEXCOORD3 = u_xlat2.z;
    ds_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    ds_TEXCOORD2.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 38
; Schema: 0
                               OpCapability Shader 
                        %1 = OpExtInstImport "GLSL.std.450" 
                               OpMemoryModel Logical GLSL450 
                               OpEntryPoint Vertex %4 "main" %9 %11 %13 %14 %18 %20 %22 %23 %25 %26 %28 %29 %31 %32 %34 %35 
                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                               OpDecorate %9 Location 9 
                               OpDecorate %11 Location 11 
                               OpDecorate %13 Location 13 
                               OpDecorate %14 Location 14 
                               OpDecorate %18 Location 18 
                               OpDecorate %20 Location 20 
                               OpDecorate vs_TEXCOORD0 Location 22 
                               OpDecorate %23 Location 23 
                               OpDecorate vs_TEXCOORD1 Location 25 
                               OpDecorate %26 Location 26 
                               OpDecorate vs_TEXCOORD2 Location 28 
                               OpDecorate %29 Location 29 
                               OpDecorate vs_TEXCOORD3 Location 31 
                               OpDecorate %32 Location 32 
                               OpDecorate %34 Location 34 
                               OpDecorate %35 Location 35 
                        %2 = OpTypeVoid 
                        %3 = OpTypeFunction %2 
                        %6 = OpTypeFloat 32 
                        %7 = OpTypeVector %6 4 
                        %8 = OpTypePointer Output %7 
          Output f32_4* %9 = OpVariable Output 
                       %10 = OpTypePointer Input %7 
          Input f32_4* %11 = OpVariable Input 
         Output f32_4* %13 = OpVariable Output 
          Input f32_4* %14 = OpVariable Input 
                       %16 = OpTypeVector %6 3 
                       %17 = OpTypePointer Output %16 
         Output f32_3* %18 = OpVariable Output 
                       %19 = OpTypePointer Input %16 
          Input f32_3* %20 = OpVariable Input 
Output f32_4* vs_TEXCOORD0 = OpVariable Output 
          Input f32_4* %23 = OpVariable Input 
Output f32_4* vs_TEXCOORD1 = OpVariable Output 
          Input f32_4* %26 = OpVariable Input 
Output f32_4* vs_TEXCOORD2 = OpVariable Output 
          Input f32_4* %29 = OpVariable Input 
Output f32_4* vs_TEXCOORD3 = OpVariable Output 
          Input f32_4* %32 = OpVariable Input 
         Output f32_4* %34 = OpVariable Output 
          Input f32_4* %35 = OpVariable Input 
                   void %4 = OpFunction None %3 
                        %5 = OpLabel 
                 f32_4 %12 = OpLoad %11 
                               OpStore %9 %12 
                 f32_4 %15 = OpLoad %14 
                               OpStore %13 %15 
                 f32_3 %21 = OpLoad %20 
                               OpStore %18 %21 
                 f32_4 %24 = OpLoad %23 
                               OpStore vs_TEXCOORD0 %24 
                 f32_4 %27 = OpLoad %26 
                               OpStore vs_TEXCOORD1 %27 
                 f32_4 %30 = OpLoad %29 
                               OpStore vs_TEXCOORD2 %30 
                 f32_4 %33 = OpLoad %32 
                               OpStore vs_TEXCOORD3 %33 
                 f32_4 %36 = OpLoad %35 
                               OpStore %34 %36 
                               OpReturn
                               OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 328
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %243 %281 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpMemberDecorate %18 10 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %214 DescriptorSet 214 
                                                      OpDecorate %214 Binding 214 
                                                      OpDecorate %218 DescriptorSet 218 
                                                      OpDecorate %218 Binding 218 
                                                      OpDecorate %243 Location 243 
                                                      OpDecorate %281 Location 281 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %7 %14 %14 %14 %14 %17 %6 %6 %6 %6 %6 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32; f32; f32; f32; f32;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %7 
                                              %27 = OpTypePointer Private %6 
                                 Private f32* %28 = OpVariable Private 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 2 
                                              %42 = OpTypePointer Uniform %14 
                               Private f32_3* %52 = OpVariable Private 
                                          f32 %67 = OpConstant 3.674022E-40 
                                          f32 %79 = OpConstant 3.674022E-40 
                                          f32 %80 = OpConstant 3.674022E-40 
                                 Private f32* %85 = OpVariable Private 
                                          f32 %96 = OpConstant 3.674022E-40 
                                          f32 %98 = OpConstant 3.674022E-40 
                                Input f32_3* %100 = OpVariable Input 
                                         u32 %113 = OpConstant 0 
                              Private f32_3* %115 = OpVariable Private 
                                Private f32* %124 = OpVariable Private 
                                         i32 %142 = OpConstant 9 
                                             %143 = OpTypePointer Uniform %6 
                                         i32 %152 = OpConstant 8 
                                         i32 %158 = OpConstant 7 
                                         f32 %164 = OpConstant 3.674022E-40 
                                         f32 %166 = OpConstant 3.674022E-40 
                                         f32 %176 = OpConstant 3.674022E-40 
                                         i32 %181 = OpConstant 5 
                                         i32 %182 = OpConstant 1 
                                         i32 %204 = OpConstant 3 
                                             %212 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %213 = OpTypePointer UniformConstant %212 
        UniformConstant read_only Texture2D* %214 = OpVariable UniformConstant 
                                             %216 = OpTypeSampler 
                                             %217 = OpTypePointer UniformConstant %216 
                    UniformConstant sampler* %218 = OpVariable UniformConstant 
                                             %220 = OpTypeSampledImage %212 
                                             %223 = OpTypeVector %6 2 
                                         i32 %229 = OpConstant 4 
                                             %242 = OpTypePointer Input %6 
                                  Input f32* %243 = OpVariable Input 
                                         u32 %245 = OpConstant 1 
                                         u32 %257 = OpConstant 2 
                                         u32 %271 = OpConstant 3 
                                             %280 = OpTypePointer Output %14 
                               Output f32_4* %281 = OpVariable Output 
                                         i32 %291 = OpConstant 6 
                                         i32 %321 = OpConstant 10 
                                             %325 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad %11 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %13 %25 
                                                      OpStore %9 %26 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpLoad %9 
                                          f32 %31 = OpDot %29 %30 
                                                      OpStore %28 %31 
                                          f32 %32 = OpLoad %28 
                                          f32 %33 = OpExtInst %1 32 %32 
                                                      OpStore %28 %33 
                                          f32 %34 = OpLoad %28 
                                        f32_3 %35 = OpCompositeConstruct %34 %34 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpFMul %35 %36 
                                                      OpStore %9 %37 
                                        f32_3 %39 = OpLoad %11 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_4* %43 = OpAccessChain %20 %41 
                                        f32_4 %44 = OpLoad %43 
                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                                        f32_3 %46 = OpFAdd %40 %45 
                                                      OpStore %38 %46 
                                        f32_3 %47 = OpLoad %38 
                                        f32_3 %48 = OpLoad %38 
                                          f32 %49 = OpDot %47 %48 
                                                      OpStore %28 %49 
                                          f32 %50 = OpLoad %28 
                                          f32 %51 = OpExtInst %1 32 %50 
                                                      OpStore %28 %51 
                                        f32_3 %53 = OpLoad %38 
                                          f32 %54 = OpLoad %28 
                                        f32_3 %55 = OpCompositeConstruct %54 %54 %54 
                                        f32_3 %56 = OpFMul %53 %55 
                                        f32_3 %57 = OpLoad %9 
                                        f32_3 %58 = OpFAdd %56 %57 
                                                      OpStore %52 %58 
                                          f32 %59 = OpLoad %28 
                                        f32_3 %60 = OpCompositeConstruct %59 %59 %59 
                                        f32_3 %61 = OpLoad %38 
                                        f32_3 %62 = OpFMul %60 %61 
                                                      OpStore %38 %62 
                                        f32_3 %63 = OpLoad %52 
                                        f32_3 %64 = OpLoad %52 
                                          f32 %65 = OpDot %63 %64 
                                                      OpStore %28 %65 
                                          f32 %66 = OpLoad %28 
                                          f32 %68 = OpExtInst %1 40 %66 %67 
                                                      OpStore %28 %68 
                                          f32 %69 = OpLoad %28 
                                          f32 %70 = OpExtInst %1 32 %69 
                                                      OpStore %28 %70 
                                          f32 %71 = OpLoad %28 
                                        f32_3 %72 = OpCompositeConstruct %71 %71 %71 
                                        f32_3 %73 = OpLoad %52 
                                        f32_3 %74 = OpFMul %72 %73 
                                                      OpStore %52 %74 
                                        f32_3 %75 = OpLoad %38 
                                        f32_3 %76 = OpLoad %52 
                                          f32 %77 = OpDot %75 %76 
                                                      OpStore %28 %77 
                                          f32 %78 = OpLoad %28 
                                          f32 %81 = OpExtInst %1 43 %78 %79 %80 
                                                      OpStore %28 %81 
                                          f32 %82 = OpLoad %28 
                                          f32 %83 = OpFNegate %82 
                                          f32 %84 = OpFAdd %83 %80 
                                                      OpStore %28 %84 
                                          f32 %86 = OpLoad %28 
                                          f32 %87 = OpLoad %28 
                                          f32 %88 = OpFMul %86 %87 
                                                      OpStore %85 %88 
                                          f32 %89 = OpLoad %85 
                                          f32 %90 = OpLoad %85 
                                          f32 %91 = OpFMul %89 %90 
                                                      OpStore %85 %91 
                                          f32 %92 = OpLoad %28 
                                          f32 %93 = OpLoad %85 
                                          f32 %94 = OpFMul %92 %93 
                                                      OpStore %28 %94 
                                          f32 %95 = OpLoad %28 
                                          f32 %97 = OpFMul %95 %96 
                                          f32 %99 = OpFAdd %97 %98 
                                                      OpStore %28 %99 
                                       f32_3 %101 = OpLoad %100 
                                       f32_3 %102 = OpLoad %100 
                                         f32 %103 = OpDot %101 %102 
                                                      OpStore %85 %103 
                                         f32 %104 = OpLoad %85 
                                         f32 %105 = OpExtInst %1 32 %104 
                                                      OpStore %85 %105 
                                         f32 %106 = OpLoad %85 
                                       f32_3 %107 = OpCompositeConstruct %106 %106 %106 
                                       f32_3 %108 = OpLoad %100 
                                       f32_3 %109 = OpFMul %107 %108 
                                                      OpStore %52 %109 
                                       f32_3 %110 = OpLoad %52 
                                       f32_3 %111 = OpLoad %9 
                                         f32 %112 = OpDot %110 %111 
                                Private f32* %114 = OpAccessChain %9 %113 
                                                      OpStore %114 %112 
                                       f32_3 %116 = OpLoad %52 
                                       f32_3 %117 = OpLoad %38 
                                         f32 %118 = OpDot %116 %117 
                                Private f32* %119 = OpAccessChain %115 %113 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %115 %113 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpExtInst %1 43 %121 %79 %80 
                                Private f32* %123 = OpAccessChain %115 %113 
                                                      OpStore %123 %122 
                                Private f32* %125 = OpAccessChain %9 %113 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpExtInst %1 4 %126 
                                Private f32* %128 = OpAccessChain %115 %113 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpFAdd %127 %129 
                                                      OpStore %124 %130 
                                Private f32* %131 = OpAccessChain %9 %113 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpFNegate %132 
                                         f32 %134 = OpFAdd %133 %80 
                                Private f32* %135 = OpAccessChain %9 %113 
                                                      OpStore %135 %134 
                                Private f32* %136 = OpAccessChain %9 %113 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpExtInst %1 30 %137 
                                Private f32* %139 = OpAccessChain %9 %113 
                                                      OpStore %139 %138 
                                Private f32* %140 = OpAccessChain %9 %113 
                                         f32 %141 = OpLoad %140 
                                Uniform f32* %144 = OpAccessChain %20 %142 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpFMul %141 %145 
                                Private f32* %147 = OpAccessChain %9 %113 
                                                      OpStore %147 %146 
                                Private f32* %148 = OpAccessChain %9 %113 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpExtInst %1 29 %149 
                                Private f32* %151 = OpAccessChain %9 %113 
                                                      OpStore %151 %150 
                                Uniform f32* %153 = OpAccessChain %20 %152 
                                         f32 %154 = OpLoad %153 
                                Private f32* %155 = OpAccessChain %9 %113 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFMul %154 %156 
                                Uniform f32* %159 = OpAccessChain %20 %158 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFAdd %157 %160 
                                Private f32* %162 = OpAccessChain %9 %113 
                                                      OpStore %162 %161 
                                         f32 %163 = OpLoad %124 
                                         f32 %165 = OpFAdd %163 %164 
                                                      OpStore %124 %165 
                                         f32 %167 = OpLoad %124 
                                         f32 %168 = OpFDiv %166 %167 
                                                      OpStore %124 %168 
                                Private f32* %169 = OpAccessChain %115 %113 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpLoad %124 
                                         f32 %172 = OpFMul %170 %171 
                                Private f32* %173 = OpAccessChain %115 %113 
                                                      OpStore %173 %172 
                                Private f32* %174 = OpAccessChain %115 %113 
                                         f32 %175 = OpLoad %174 
                                         f32 %177 = OpFMul %175 %176 
                                Private f32* %178 = OpAccessChain %115 %113 
                                                      OpStore %178 %177 
                                       f32_3 %179 = OpLoad %11 
                                       f32_3 %180 = OpVectorShuffle %179 %179 1 1 1 
                              Uniform f32_4* %183 = OpAccessChain %20 %181 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %180 %185 
                                                      OpStore %38 %186 
                              Uniform f32_4* %187 = OpAccessChain %20 %181 %22 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpLoad %11 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 0 0 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_3 %193 = OpLoad %38 
                                       f32_3 %194 = OpFAdd %192 %193 
                                                      OpStore %38 %194 
                              Uniform f32_4* %195 = OpAccessChain %20 %181 %41 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_3 %198 = OpLoad %11 
                                       f32_3 %199 = OpVectorShuffle %198 %198 2 2 2 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_3 %201 = OpLoad %38 
                                       f32_3 %202 = OpFAdd %200 %201 
                                                      OpStore %38 %202 
                                       f32_3 %203 = OpLoad %38 
                              Uniform f32_4* %205 = OpAccessChain %20 %181 %204 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFAdd %203 %207 
                                                      OpStore %38 %208 
                                       f32_3 %209 = OpLoad %38 
                                       f32_3 %210 = OpLoad %38 
                                         f32 %211 = OpDot %209 %210 
                                                      OpStore %124 %211 
                         read_only Texture2D %215 = OpLoad %214 
                                     sampler %219 = OpLoad %218 
                  read_only Texture2DSampled %221 = OpSampledImage %215 %219 
                                         f32 %222 = OpLoad %124 
                                       f32_2 %224 = OpCompositeConstruct %222 %222 
                                       f32_4 %225 = OpImageSampleImplicitLod %221 %224 
                                         f32 %226 = OpCompositeExtract %225 0 
                                                      OpStore %124 %226 
                                         f32 %227 = OpLoad %124 
                                       f32_3 %228 = OpCompositeConstruct %227 %227 %227 
                              Uniform f32_4* %230 = OpAccessChain %20 %229 
                                       f32_4 %231 = OpLoad %230 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_3 %233 = OpFMul %228 %232 
                                                      OpStore %38 %233 
                                       f32_3 %234 = OpLoad %115 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
                                       f32_3 %236 = OpLoad %38 
                                       f32_3 %237 = OpFMul %235 %236 
                                                      OpStore %38 %237 
                                         f32 %238 = OpLoad %28 
                                       f32_3 %239 = OpCompositeConstruct %238 %238 %238 
                                       f32_3 %240 = OpLoad %38 
                                       f32_3 %241 = OpFMul %239 %240 
                                                      OpStore %115 %241 
                                         f32 %244 = OpLoad %243 
                                Uniform f32* %246 = OpAccessChain %20 %182 %245 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpFDiv %244 %247 
                                Private f32* %249 = OpAccessChain %38 %113 
                                                      OpStore %249 %248 
                                Private f32* %250 = OpAccessChain %38 %113 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFNegate %251 
                                         f32 %253 = OpFAdd %252 %80 
                                Private f32* %254 = OpAccessChain %38 %113 
                                                      OpStore %254 %253 
                                Private f32* %255 = OpAccessChain %38 %113 
                                         f32 %256 = OpLoad %255 
                                Uniform f32* %258 = OpAccessChain %20 %182 %257 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpFMul %256 %259 
                                Private f32* %261 = OpAccessChain %38 %113 
                                                      OpStore %261 %260 
                                Private f32* %262 = OpAccessChain %38 %113 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpExtInst %1 40 %263 %79 
                                Private f32* %265 = OpAccessChain %38 %113 
                                                      OpStore %265 %264 
                                Private f32* %266 = OpAccessChain %38 %113 
                                         f32 %267 = OpLoad %266 
                                Uniform f32* %268 = OpAccessChain %20 %204 %257 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFMul %267 %269 
                                Uniform f32* %272 = OpAccessChain %20 %204 %271 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFAdd %270 %273 
                                Private f32* %275 = OpAccessChain %38 %113 
                                                      OpStore %275 %274 
                                Private f32* %276 = OpAccessChain %38 %113 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpExtInst %1 43 %277 %79 %80 
                                Private f32* %279 = OpAccessChain %38 %113 
                                                      OpStore %279 %278 
                                       f32_3 %282 = OpLoad %115 
                                       f32_3 %283 = OpLoad %38 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 0 0 
                                       f32_3 %285 = OpFMul %282 %284 
                                       f32_4 %286 = OpLoad %281 
                                       f32_4 %287 = OpVectorShuffle %286 %285 4 5 6 3 
                                                      OpStore %281 %287 
                                  Input f32* %288 = OpAccessChain %100 %245 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                Uniform f32* %292 = OpAccessChain %20 %291 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %290 %293 
                                Private f32* %295 = OpAccessChain %115 %113 
                                                      OpStore %295 %294 
                                Private f32* %296 = OpAccessChain %115 %113 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpExtInst %1 4 %297 
                                Uniform f32* %299 = OpAccessChain %20 %291 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpFNegate %300 
                                         f32 %302 = OpFAdd %298 %301 
                                Private f32* %303 = OpAccessChain %115 %113 
                                                      OpStore %303 %302 
                                Private f32* %304 = OpAccessChain %115 %113 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpExtInst %1 43 %305 %79 %80 
                                Private f32* %307 = OpAccessChain %115 %113 
                                                      OpStore %307 %306 
                                Private f32* %308 = OpAccessChain %115 %113 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpFNegate %309 
                                         f32 %311 = OpFAdd %310 %80 
                                Private f32* %312 = OpAccessChain %115 %113 
                                                      OpStore %312 %311 
                                Private f32* %313 = OpAccessChain %115 %113 
                                         f32 %314 = OpLoad %313 
                                Private f32* %315 = OpAccessChain %9 %113 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpFMul %314 %316 
                                Private f32* %318 = OpAccessChain %9 %113 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %9 %113 
                                         f32 %320 = OpLoad %319 
                                Uniform f32* %322 = OpAccessChain %20 %321 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFMul %320 %323 
                                 Output f32* %326 = OpAccessChain %281 %271 
                                                      OpStore %326 %324 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 387
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationControl %4 "main" %23 %25 %30 %37 %39 %47 %51 %58 %60 %65 %67 %72 %74 %79 %81 %86 %88 %219 %371 
                                                      OpExecutionMode %4 OutputVertices 4 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %25 BuiltIn WorkgroupSize 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %37 Location 37 
                                                      OpDecorate %39 Location 39 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %51 Location 51 
                                                      OpDecorate %58 Location 58 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate %65 Location 65 
                                                      OpDecorate vs_TEXCOORD1 Location 67 
                                                      OpDecorate %72 Location 72 
                                                      OpDecorate vs_TEXCOORD2 Location 74 
                                                      OpDecorate %79 Location 79 
                                                      OpDecorate vs_TEXCOORD3 Location 81 
                                                      OpDecorate %86 Location 86 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %96 ArrayStride 96 
                                                      OpMemberDecorate %97 0 Offset 97 
                                                      OpMemberDecorate %97 1 Offset 97 
                                                      OpMemberDecorate %97 2 Offset 97 
                                                      OpMemberDecorate %97 3 Offset 97 
                                                      OpDecorate %97 Block 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate %219 Patch 
                                                      OpDecorate %219 BuiltIn 219 
                                                      OpDecorate %371 Patch 
                                                      OpDecorate %371 BuiltIn 371 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %8 = OpTypeInt 32 1 
                                               %9 = OpTypePointer Function %8 
                                              %10 = OpTypeFunction %2 %9 
                                              %17 = OpTypeFloat 32 
                                              %18 = OpTypeVector %17 4 
                                              %19 = OpTypeInt 32 0 
                                          u32 %20 = OpConstant 3 
                                              %21 = OpTypeArray %18 %20 
                                              %22 = OpTypePointer Output %21 
                             Output f32_4[3]* %23 = OpVariable Output 
                                              %24 = OpTypePointer Input %8 
                                   Input i32* %25 = OpVariable Input 
                                          u32 %27 = OpConstant 32 
                                              %28 = OpTypeArray %18 %27 
                                              %29 = OpTypePointer Input %28 
                             Input f32_4[32]* %30 = OpVariable Input 
                                              %32 = OpTypePointer Input %18 
                                              %35 = OpTypePointer Output %18 
                             Output f32_4[3]* %37 = OpVariable Output 
                             Input f32_4[32]* %39 = OpVariable Input 
                                              %44 = OpTypeVector %17 3 
                                              %45 = OpTypeArray %44 %20 
                                              %46 = OpTypePointer Output %45 
                             Output f32_3[3]* %47 = OpVariable Output 
                                              %49 = OpTypeArray %44 %27 
                                              %50 = OpTypePointer Input %49 
                             Input f32_3[32]* %51 = OpVariable Input 
                                              %53 = OpTypePointer Input %44 
                                              %56 = OpTypePointer Output %44 
                             Output f32_4[3]* %58 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD0 = OpVariable Input 
                             Output f32_4[3]* %65 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD1 = OpVariable Input 
                             Output f32_4[3]* %72 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD2 = OpVariable Input 
                             Output f32_4[3]* %79 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD3 = OpVariable Input 
                             Output f32_4[3]* %86 = OpVariable Output 
                             Input f32_4[32]* %88 = OpVariable Input 
                                              %93 = OpTypePointer Private %44 
                               Private f32_3* %94 = OpVariable Private 
                                          u32 %95 = OpConstant 4 
                                              %96 = OpTypeArray %18 %95 
                                              %97 = OpTypeStruct %44 %18 %96 %17 
                                              %98 = OpTypePointer Uniform %97 
Uniform struct {f32_3; f32_4; f32_4[4]; f32;}* %99 = OpVariable Uniform 
                                         i32 %100 = OpConstant 2 
                                         i32 %101 = OpConstant 1 
                                             %102 = OpTypePointer Uniform %18 
                                         i32 %110 = OpConstant 0 
                                         i32 %129 = OpConstant 3 
                              Private f32_3* %139 = OpVariable Private 
                              Private f32_3* %174 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                             %182 = OpTypePointer Uniform %44 
                                             %187 = OpTypePointer Private %17 
                                Private f32* %188 = OpVariable Private 
                                             %195 = OpTypePointer Uniform %17 
                                Private f32* %203 = OpVariable Private 
                                         u32 %210 = OpConstant 1 
                                             %217 = OpTypeArray %17 %95 
                                             %218 = OpTypePointer Output %217 
                              Output f32[4]* %219 = OpVariable Output 
                                         f32 %221 = OpConstant 3.674022E-40 
                                             %223 = OpTypePointer Output %17 
                              Private f32_3* %259 = OpVariable Private 
                                         u32 %285 = OpConstant 0 
                              Private f32_3* %325 = OpVariable Private 
                                         u32 %368 = OpConstant 2 
                                             %369 = OpTypeArray %17 %368 
                                             %370 = OpTypePointer Output %369 
                              Output f32[2]* %371 = OpVariable Output 
                                         f32 %374 = OpConstant 3.674022E-40 
                                             %379 = OpTypeBool 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %383 = OpVariable Function 
                               Function i32* %385 = OpVariable Function 
                                        void %377 = OpFunctionCall %6 
                                                      OpControlBarrier 368 95 285 
                                         i32 %378 = OpLoad %25 
                                        bool %380 = OpIEqual %378 %110 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %380 %381 %382 
                                             %381 = OpLabel 
                                                      OpStore %383 %110 
                                        void %384 = OpFunctionCall %12 %383 
                                                      OpStore %385 %110 
                                        void %386 = OpFunctionCall %15 %385 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
                                          void %6 = OpFunction None %3 
                                               %7 = OpLabel 
                                          i32 %26 = OpLoad %25 
                                          i32 %31 = OpLoad %25 
                                 Input f32_4* %33 = OpAccessChain %30 %31 
                                        f32_4 %34 = OpLoad %33 
                                Output f32_4* %36 = OpAccessChain %23 %26 
                                                      OpStore %36 %34 
                                          i32 %38 = OpLoad %25 
                                          i32 %40 = OpLoad %25 
                                 Input f32_4* %41 = OpAccessChain %39 %40 
                                        f32_4 %42 = OpLoad %41 
                                Output f32_4* %43 = OpAccessChain %37 %38 
                                                      OpStore %43 %42 
                                          i32 %48 = OpLoad %25 
                                          i32 %52 = OpLoad %25 
                                 Input f32_3* %54 = OpAccessChain %51 %52 
                                        f32_3 %55 = OpLoad %54 
                                Output f32_3* %57 = OpAccessChain %47 %48 
                                                      OpStore %57 %55 
                                          i32 %59 = OpLoad %25 
                                          i32 %61 = OpLoad %25 
                                 Input f32_4* %62 = OpAccessChain vs_TEXCOORD0 %61 
                                        f32_4 %63 = OpLoad %62 
                                Output f32_4* %64 = OpAccessChain %58 %59 
                                                      OpStore %64 %63 
                                          i32 %66 = OpLoad %25 
                                          i32 %68 = OpLoad %25 
                                 Input f32_4* %69 = OpAccessChain vs_TEXCOORD1 %68 
                                        f32_4 %70 = OpLoad %69 
                                Output f32_4* %71 = OpAccessChain %65 %66 
                                                      OpStore %71 %70 
                                          i32 %73 = OpLoad %25 
                                          i32 %75 = OpLoad %25 
                                 Input f32_4* %76 = OpAccessChain vs_TEXCOORD2 %75 
                                        f32_4 %77 = OpLoad %76 
                                Output f32_4* %78 = OpAccessChain %72 %73 
                                                      OpStore %78 %77 
                                          i32 %80 = OpLoad %25 
                                          i32 %82 = OpLoad %25 
                                 Input f32_4* %83 = OpAccessChain vs_TEXCOORD3 %82 
                                        f32_4 %84 = OpLoad %83 
                                Output f32_4* %85 = OpAccessChain %79 %80 
                                                      OpStore %85 %84 
                                          i32 %87 = OpLoad %25 
                                          i32 %89 = OpLoad %25 
                                 Input f32_4* %90 = OpAccessChain %88 %89 
                                        f32_4 %91 = OpLoad %90 
                                Output f32_4* %92 = OpAccessChain %86 %87 
                                                      OpStore %92 %91 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %12 = OpFunction None %10 
                                Function i32* %11 = OpFunctionParameter 
                                              %13 = OpLabel 
                              Uniform f32_4* %103 = OpAccessChain %99 %100 %101 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                Input f32_4* %106 = OpAccessChain %30 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 1 1 1 
                                       f32_3 %109 = OpFMul %105 %108 
                                                      OpStore %94 %109 
                              Uniform f32_4* %111 = OpAccessChain %99 %100 %110 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                Input f32_4* %114 = OpAccessChain %30 %101 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %113 %116 
                                       f32_3 %118 = OpLoad %94 
                                       f32_3 %119 = OpFAdd %117 %118 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %99 %100 %100 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                Input f32_4* %123 = OpAccessChain %30 %101 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 2 2 2 
                                       f32_3 %126 = OpFMul %122 %125 
                                       f32_3 %127 = OpLoad %94 
                                       f32_3 %128 = OpFAdd %126 %127 
                                                      OpStore %94 %128 
                              Uniform f32_4* %130 = OpAccessChain %99 %100 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                Input f32_4* %133 = OpAccessChain %30 %101 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 3 3 3 
                                       f32_3 %136 = OpFMul %132 %135 
                                       f32_3 %137 = OpLoad %94 
                                       f32_3 %138 = OpFAdd %136 %137 
                                                      OpStore %94 %138 
                              Uniform f32_4* %140 = OpAccessChain %99 %100 %101 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                Input f32_4* %143 = OpAccessChain %30 %100 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 1 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                                      OpStore %139 %146 
                              Uniform f32_4* %147 = OpAccessChain %99 %100 %110 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                Input f32_4* %150 = OpAccessChain %30 %100 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 0 0 
                                       f32_3 %153 = OpFMul %149 %152 
                                       f32_3 %154 = OpLoad %139 
                                       f32_3 %155 = OpFAdd %153 %154 
                                                      OpStore %139 %155 
                              Uniform f32_4* %156 = OpAccessChain %99 %100 %100 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                Input f32_4* %159 = OpAccessChain %30 %100 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 2 2 2 
                                       f32_3 %162 = OpFMul %158 %161 
                                       f32_3 %163 = OpLoad %139 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %139 %164 
                              Uniform f32_4* %165 = OpAccessChain %99 %100 %129 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                Input f32_4* %168 = OpAccessChain %30 %100 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 3 3 3 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_3 %172 = OpLoad %139 
                                       f32_3 %173 = OpFAdd %171 %172 
                                                      OpStore %139 %173 
                                       f32_3 %175 = OpLoad %94 
                                       f32_3 %176 = OpLoad %139 
                                       f32_3 %177 = OpFAdd %175 %176 
                                                      OpStore %174 %177 
                                       f32_3 %178 = OpLoad %174 
                                       f32_3 %181 = OpFMul %178 %180 
                              Uniform f32_3* %183 = OpAccessChain %99 %110 
                                       f32_3 %184 = OpLoad %183 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpFAdd %181 %185 
                                                      OpStore %174 %186 
                                       f32_3 %189 = OpLoad %174 
                                       f32_3 %190 = OpLoad %174 
                                         f32 %191 = OpDot %189 %190 
                                                      OpStore %188 %191 
                                         f32 %192 = OpLoad %188 
                                         f32 %193 = OpExtInst %1 31 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                Uniform f32* %196 = OpAccessChain %99 %129 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %194 %197 
                                                      OpStore %188 %198 
                                       f32_3 %199 = OpLoad %94 
                                       f32_3 %200 = OpLoad %139 
                                       f32_3 %201 = OpFNegate %200 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore %174 %202 
                                       f32_3 %204 = OpLoad %174 
                                       f32_3 %205 = OpLoad %174 
                                         f32 %206 = OpDot %204 %205 
                                                      OpStore %203 %206 
                                         f32 %207 = OpLoad %203 
                                         f32 %208 = OpExtInst %1 31 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                Uniform f32* %211 = OpAccessChain %99 %101 %210 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %209 %212 
                                                      OpStore %203 %213 
                                         f32 %214 = OpLoad %203 
                                         f32 %215 = OpLoad %188 
                                         f32 %216 = OpFDiv %214 %215 
                                                      OpStore %188 %216 
                                         f32 %220 = OpLoad %188 
                                         f32 %222 = OpExtInst %1 40 %220 %221 
                                 Output f32* %224 = OpAccessChain %219 %110 
                                                      OpStore %224 %222 
                              Uniform f32_4* %225 = OpAccessChain %99 %100 %101 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                Input f32_4* %228 = OpAccessChain %30 %110 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 1 1 1 
                                       f32_3 %231 = OpFMul %227 %230 
                                                      OpStore %174 %231 
                              Uniform f32_4* %232 = OpAccessChain %99 %100 %110 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                Input f32_4* %235 = OpAccessChain %30 %110 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 0 0 
                                       f32_3 %238 = OpFMul %234 %237 
                                       f32_3 %239 = OpLoad %174 
                                       f32_3 %240 = OpFAdd %238 %239 
                                                      OpStore %174 %240 
                              Uniform f32_4* %241 = OpAccessChain %99 %100 %100 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                Input f32_4* %244 = OpAccessChain %30 %110 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 2 2 2 
                                       f32_3 %247 = OpFMul %243 %246 
                                       f32_3 %248 = OpLoad %174 
                                       f32_3 %249 = OpFAdd %247 %248 
                                                      OpStore %174 %249 
                              Uniform f32_4* %250 = OpAccessChain %99 %100 %129 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                Input f32_4* %253 = OpAccessChain %30 %110 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 3 3 3 
                                       f32_3 %256 = OpFMul %252 %255 
                                       f32_3 %257 = OpLoad %174 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore %174 %258 
                                       f32_3 %260 = OpLoad %139 
                                       f32_3 %261 = OpLoad %174 
                                       f32_3 %262 = OpFAdd %260 %261 
                                                      OpStore %259 %262 
                                       f32_3 %263 = OpLoad %139 
                                       f32_3 %264 = OpLoad %174 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_3 %266 = OpFAdd %263 %265 
                                                      OpStore %139 %266 
                                       f32_3 %267 = OpLoad %139 
                                       f32_3 %268 = OpLoad %139 
                                         f32 %269 = OpDot %267 %268 
                                                      OpStore %188 %269 
                                         f32 %270 = OpLoad %188 
                                         f32 %271 = OpExtInst %1 31 %270 
                                                      OpStore %188 %271 
                                         f32 %272 = OpLoad %188 
                                Uniform f32* %273 = OpAccessChain %99 %101 %210 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                                      OpStore %188 %275 
                                       f32_3 %276 = OpLoad %259 
                                       f32_3 %277 = OpFMul %276 %180 
                              Uniform f32_3* %278 = OpAccessChain %99 %110 
                                       f32_3 %279 = OpLoad %278 
                                       f32_3 %280 = OpFNegate %279 
                                       f32_3 %281 = OpFAdd %277 %280 
                                                      OpStore %139 %281 
                                       f32_3 %282 = OpLoad %139 
                                       f32_3 %283 = OpLoad %139 
                                         f32 %284 = OpDot %282 %283 
                                Private f32* %286 = OpAccessChain %139 %285 
                                                      OpStore %286 %284 
                                Private f32* %287 = OpAccessChain %139 %285 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 31 %288 
                                Private f32* %290 = OpAccessChain %139 %285 
                                                      OpStore %290 %289 
                                Private f32* %291 = OpAccessChain %139 %285 
                                         f32 %292 = OpLoad %291 
                                Uniform f32* %293 = OpAccessChain %99 %129 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFMul %292 %294 
                                Private f32* %296 = OpAccessChain %139 %285 
                                                      OpStore %296 %295 
                                         f32 %297 = OpLoad %188 
                                Private f32* %298 = OpAccessChain %139 %285 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFDiv %297 %299 
                                                      OpStore %188 %300 
                                         f32 %301 = OpLoad %188 
                                         f32 %302 = OpExtInst %1 40 %301 %221 
                                 Output f32* %303 = OpAccessChain %219 %101 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %94 
                                       f32_3 %305 = OpLoad %174 
                                       f32_3 %306 = OpFAdd %304 %305 
                                                      OpStore %139 %306 
                                       f32_3 %307 = OpLoad %94 
                                       f32_3 %308 = OpFNegate %307 
                                       f32_3 %309 = OpLoad %174 
                                       f32_3 %310 = OpFAdd %308 %309 
                                                      OpStore %94 %310 
                                       f32_3 %311 = OpLoad %94 
                                       f32_3 %312 = OpLoad %94 
                                         f32 %313 = OpDot %311 %312 
                                Private f32* %314 = OpAccessChain %94 %285 
                                                      OpStore %314 %313 
                                Private f32* %315 = OpAccessChain %94 %285 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpExtInst %1 31 %316 
                                Private f32* %318 = OpAccessChain %94 %285 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %94 %285 
                                         f32 %320 = OpLoad %319 
                                Uniform f32* %321 = OpAccessChain %99 %101 %210 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %320 %322 
                                Private f32* %324 = OpAccessChain %94 %285 
                                                      OpStore %324 %323 
                                       f32_3 %326 = OpLoad %139 
                                       f32_3 %327 = OpFMul %326 %180 
                              Uniform f32_3* %328 = OpAccessChain %99 %110 
                                       f32_3 %329 = OpLoad %328 
                                       f32_3 %330 = OpFNegate %329 
                                       f32_3 %331 = OpFAdd %327 %330 
                                                      OpStore %325 %331 
                                       f32_3 %332 = OpLoad %325 
                                       f32_3 %333 = OpLoad %325 
                                         f32 %334 = OpDot %332 %333 
                                Private f32* %335 = OpAccessChain %325 %285 
                                                      OpStore %335 %334 
                                Private f32* %336 = OpAccessChain %325 %285 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpExtInst %1 31 %337 
                                Private f32* %339 = OpAccessChain %325 %285 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %325 %285 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %99 %129 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFMul %341 %343 
                                Private f32* %345 = OpAccessChain %325 %285 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %94 %285 
                                         f32 %347 = OpLoad %346 
                                Private f32* %348 = OpAccessChain %325 %285 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFDiv %347 %349 
                                Private f32* %351 = OpAccessChain %94 %285 
                                                      OpStore %351 %350 
                                Private f32* %352 = OpAccessChain %94 %285 
                                         f32 %353 = OpLoad %352 
                                         f32 %354 = OpExtInst %1 40 %353 %221 
                                 Output f32* %355 = OpAccessChain %219 %100 
                                                      OpStore %355 %354 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %15 = OpFunction None %10 
                                Function i32* %14 = OpFunctionParameter 
                                              %16 = OpLabel 
                                 Output f32* %356 = OpAccessChain %219 %100 
                                         f32 %357 = OpLoad %356 
                                 Output f32* %358 = OpAccessChain %219 %100 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                Private f32* %361 = OpAccessChain %94 %285 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %94 %285 
                                         f32 %363 = OpLoad %362 
                                 Output f32* %364 = OpAccessChain %219 %100 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFAdd %363 %365 
                                Private f32* %367 = OpAccessChain %94 %285 
                                                      OpStore %367 %366 
                                Private f32* %372 = OpAccessChain %94 %285 
                                         f32 %373 = OpLoad %372 
                                         f32 %375 = OpFMul %373 %374 
                                 Output f32* %376 = OpAccessChain %371 %110 
                                                      OpStore %376 %375 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 399
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationEvaluation %4 "main" %12 %20 %139 %208 %236 %328 %333 %336 %384 
                                                      OpExecutionMode %4 Triangles 
                                                      OpExecutionMode %4 SpacingFractionalOdd 
                                                      OpExecutionMode %4 VertexOrderCw 
                                                      OpDecorate %12 BuiltIn TessLevelInner 
                                                      OpDecorate %20 Location 20 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpMemberDecorate %61 5 Offset 61 
                                                      OpMemberDecorate %61 6 Offset 61 
                                                      OpMemberDecorate %61 7 Offset 61 
                                                      OpMemberDecorate %61 8 Offset 61 
                                                      OpMemberDecorate %61 9 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %97 DescriptorSet 97 
                                                      OpDecorate %97 Binding 97 
                                                      OpDecorate %101 DescriptorSet 101 
                                                      OpDecorate %101 Binding 101 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %113 DescriptorSet 113 
                                                      OpDecorate %113 Binding 113 
                                                      OpDecorate %139 Location 139 
                                                      OpDecorate %208 Location 208 
                                                      OpDecorate %236 Location 236 
                                                      OpMemberDecorate %326 0 BuiltIn 326 
                                                      OpMemberDecorate %326 1 BuiltIn 326 
                                                      OpMemberDecorate %326 2 BuiltIn 326 
                                                      OpDecorate %326 Block 
                                                      OpDecorate %333 Location 333 
                                                      OpDecorate %336 Location 336 
                                                      OpDecorate %384 Location 384 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 32 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypePointer Input %18 
                             Input f32_4[32]* %20 = OpVariable Input 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Input %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %42 = OpConstant 2 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                              %60 = OpTypeArray %7 %56 
                                              %61 = OpTypeStruct %7 %57 %58 %59 %60 %6 %6 %7 %6 %6 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32; f32;}* %63 = OpVariable Uniform 
                                          i32 %64 = OpConstant 7 
                                              %65 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 5 
                                              %80 = OpTypePointer Uniform %6 
                                          i32 %83 = OpConstant 6 
                                              %93 = OpTypePointer Private %6 
                                 Private f32* %94 = OpVariable Private 
                                              %95 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %96 = OpTypePointer UniformConstant %95 
         UniformConstant read_only Texture2D* %97 = OpVariable UniformConstant 
                                              %99 = OpTypeSampler 
                                             %100 = OpTypePointer UniformConstant %99 
                    UniformConstant sampler* %101 = OpVariable UniformConstant 
                                             %103 = OpTypeSampledImage %95 
                                         f32 %107 = OpConstant 3.674022E-40 
                                         u32 %109 = OpConstant 0 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                    UniformConstant sampler* %113 = OpVariable UniformConstant 
                              Private f32_4* %134 = OpVariable Private 
                                             %137 = OpTypeArray %10 %17 
                                             %138 = OpTypePointer Input %137 
                            Input f32_3[32]* %139 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         u32 %179 = OpConstant 2 
                                         u32 %187 = OpConstant 1 
                                Private f32* %189 = OpVariable Private 
                                         i32 %202 = OpConstant 8 
                                             %207 = OpTypePointer Output %10 
                               Output f32_3* %208 = OpVariable Output 
                                         f32 %222 = OpConstant 3.674022E-40 
                            Input f32_4[32]* %236 = OpVariable Input 
                                         i32 %256 = OpConstant 9 
                                         i32 %294 = OpConstant 3 
                              Private f32_4* %298 = OpVariable Private 
                                             %325 = OpTypeArray %6 %187 
                                             %326 = OpTypeStruct %7 %6 %325 
                                             %327 = OpTypePointer Output %326 
        Output struct {f32_4; f32; f32[1];}* %328 = OpVariable Output 
                                             %330 = OpTypePointer Output %7 
                                             %332 = OpTypePointer Output %6 
                                 Output f32* %333 = OpVariable Output 
                               Output f32_3* %336 = OpVariable Output 
                                         i32 %355 = OpConstant 4 
                               Output f32_3* %384 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 1 1 
                                 Input f32_4* %24 = OpAccessChain %20 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                                        f32_2 %27 = OpFMul %15 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                                 Input f32_4* %31 = OpAccessChain %20 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_3 %34 = OpLoad %12 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 0 
                                        f32_2 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                                        f32_2 %39 = OpFAdd %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                 Input f32_4* %43 = OpAccessChain %20 %42 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_3 %46 = OpLoad %12 
                                        f32_2 %47 = OpVectorShuffle %46 %46 2 2 
                                        f32_2 %48 = OpFMul %45 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                                        f32_2 %51 = OpFAdd %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               Uniform f32_4* %66 = OpAccessChain %63 %64 
                                        f32_4 %67 = OpLoad %66 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                        f32_2 %69 = OpFMul %55 %68 
                               Uniform f32_4* %70 = OpAccessChain %63 %64 
                                        f32_4 %71 = OpLoad %70 
                                        f32_2 %72 = OpVectorShuffle %71 %71 2 3 
                                        f32_2 %73 = OpFAdd %69 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %73 4 5 2 3 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %63 %30 
                                        f32_4 %77 = OpLoad %76 
                                        f32_2 %78 = OpVectorShuffle %77 %77 1 1 
                                 Uniform f32* %81 = OpAccessChain %63 %79 
                                          f32 %82 = OpLoad %81 
                                 Uniform f32* %84 = OpAccessChain %63 %83 
                                          f32 %85 = OpLoad %84 
                                        f32_2 %86 = OpCompositeConstruct %82 %85 
                                        f32_2 %87 = OpFMul %78 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_2 %90 = OpFAdd %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 2 3 
                                                      OpStore %9 %92 
                          read_only Texture2D %98 = OpLoad %97 
                                     sampler %102 = OpLoad %101 
                  read_only Texture2DSampled %104 = OpSampledImage %98 %102 
                                       f32_4 %105 = OpLoad %9 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %108 = OpImageSampleExplicitLod %104 %106 Lod %7 
                                         f32 %110 = OpCompositeExtract %108 0 
                                                      OpStore %94 %110 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %114 = OpLoad %113 
                  read_only Texture2DSampled %115 = OpSampledImage %112 %114 
                                       f32_4 %116 = OpLoad %9 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpImageSampleExplicitLod %115 %117 Lod %7 
                                         f32 %119 = OpCompositeExtract %118 0 
                                Private f32* %120 = OpAccessChain %9 %109 
                                                      OpStore %120 %119 
                                Private f32* %121 = OpAccessChain %9 %109 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpLoad %94 
                                         f32 %124 = OpFMul %122 %123 
                                Private f32* %125 = OpAccessChain %9 %109 
                                                      OpStore %125 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                              Uniform f32_4* %128 = OpAccessChain %63 %42 %22 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %127 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %9 %133 
                                       f32_3 %135 = OpLoad %12 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                                Input f32_3* %140 = OpAccessChain %139 %22 
                                       f32_3 %141 = OpLoad %140 
                                       f32_3 %142 = OpFMul %136 %141 
                                       f32_4 %143 = OpLoad %134 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %134 %144 
                                Input f32_3* %145 = OpAccessChain %139 %30 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpLoad %12 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 0 0 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %134 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %149 %151 
                                       f32_4 %153 = OpLoad %134 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %134 %154 
                                Input f32_3* %155 = OpAccessChain %139 %42 
                                       f32_3 %156 = OpLoad %155 
                                       f32_3 %157 = OpLoad %12 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %134 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %134 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %134 %164 
                                       f32_4 %166 = OpLoad %134 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                              Uniform f32_4* %168 = OpAccessChain %63 %42 %30 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %167 %170 
                                Private f32* %172 = OpAccessChain %165 %109 
                                                      OpStore %172 %171 
                                       f32_4 %173 = OpLoad %134 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                              Uniform f32_4* %175 = OpAccessChain %63 %42 %42 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %165 %179 
                                                      OpStore %180 %178 
                                       f32_4 %181 = OpLoad %134 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                              Uniform f32_4* %183 = OpAccessChain %63 %42 %22 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %182 %185 
                                Private f32* %188 = OpAccessChain %165 %187 
                                                      OpStore %188 %186 
                                       f32_4 %190 = OpLoad %165 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %165 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %191 %193 
                                                      OpStore %189 %194 
                                         f32 %195 = OpLoad %189 
                                         f32 %196 = OpExtInst %1 32 %195 
                                                      OpStore %189 %196 
                                Private f32* %197 = OpAccessChain %165 %187 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFNegate %198 
                                         f32 %200 = OpLoad %189 
                                         f32 %201 = OpFMul %199 %200 
                                Uniform f32* %203 = OpAccessChain %63 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFAdd %201 %204 
                                Private f32* %206 = OpAccessChain %134 %109 
                                                      OpStore %206 %205 
                                         f32 %209 = OpLoad %189 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_4 %211 = OpLoad %165 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFMul %210 %212 
                                                      OpStore %208 %213 
                                Private f32* %214 = OpAccessChain %134 %109 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpExtInst %1 4 %215 
                                Uniform f32* %217 = OpAccessChain %63 %202 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                         f32 %220 = OpFAdd %216 %219 
                                                      OpStore %189 %220 
                                         f32 %221 = OpLoad %189 
                                         f32 %223 = OpExtInst %1 43 %221 %107 %222 
                                                      OpStore %189 %223 
                                         f32 %224 = OpLoad %189 
                                         f32 %225 = OpFNegate %224 
                                         f32 %226 = OpFAdd %225 %222 
                                                      OpStore %189 %226 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                         f32 %229 = OpLoad %189 
                                       f32_3 %230 = OpCompositeConstruct %229 %229 %229 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_3 %234 = OpLoad %12 
                                       f32_4 %235 = OpVectorShuffle %234 %234 1 1 1 1 
                                Input f32_4* %237 = OpAccessChain %236 %22 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpFMul %235 %238 
                                                      OpStore %134 %239 
                                Input f32_4* %240 = OpAccessChain %236 %30 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpLoad %12 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpFMul %241 %243 
                                       f32_4 %245 = OpLoad %134 
                                       f32_4 %246 = OpFAdd %244 %245 
                                                      OpStore %134 %246 
                                Input f32_4* %247 = OpAccessChain %236 %42 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpLoad %12 
                                       f32_4 %250 = OpVectorShuffle %249 %249 2 2 2 2 
                                       f32_4 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %134 
                                       f32_4 %253 = OpFAdd %251 %252 
                                                      OpStore %134 %253 
                                       f32_4 %254 = OpLoad %9 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                Uniform f32* %257 = OpAccessChain %63 %256 
                                         f32 %258 = OpLoad %257 
                                Uniform f32* %259 = OpAccessChain %63 %256 
                                         f32 %260 = OpLoad %259 
                                Uniform f32* %261 = OpAccessChain %63 %256 
                                         f32 %262 = OpLoad %261 
                                       f32_3 %263 = OpCompositeConstruct %258 %260 %262 
                                         f32 %264 = OpCompositeExtract %263 0 
                                         f32 %265 = OpCompositeExtract %263 1 
                                         f32 %266 = OpCompositeExtract %263 2 
                                       f32_3 %267 = OpCompositeConstruct %264 %265 %266 
                                       f32_3 %268 = OpFMul %255 %267 
                                       f32_4 %269 = OpLoad %134 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %9 %273 
                                       f32_4 %274 = OpLoad %9 
                                       f32_4 %275 = OpVectorShuffle %274 %274 1 1 1 1 
                              Uniform f32_4* %276 = OpAccessChain %63 %22 %22 
                                       f32_4 %277 = OpLoad %276 
                                       f32_4 %278 = OpFMul %275 %277 
                                                      OpStore %165 %278 
                              Uniform f32_4* %279 = OpAccessChain %63 %22 %30 
                                       f32_4 %280 = OpLoad %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %281 0 0 0 0 
                                       f32_4 %283 = OpFMul %280 %282 
                                       f32_4 %284 = OpLoad %165 
                                       f32_4 %285 = OpFAdd %283 %284 
                                                      OpStore %165 %285 
                              Uniform f32_4* %286 = OpAccessChain %63 %22 %42 
                                       f32_4 %287 = OpLoad %286 
                                       f32_4 %288 = OpLoad %9 
                                       f32_4 %289 = OpVectorShuffle %288 %288 2 2 2 2 
                                       f32_4 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %165 
                                       f32_4 %292 = OpFAdd %290 %291 
                                                      OpStore %9 %292 
                                       f32_4 %293 = OpLoad %9 
                              Uniform f32_4* %295 = OpAccessChain %63 %22 %294 
                                       f32_4 %296 = OpLoad %295 
                                       f32_4 %297 = OpFAdd %293 %296 
                                                      OpStore %165 %297 
                                       f32_4 %299 = OpLoad %165 
                                       f32_4 %300 = OpVectorShuffle %299 %299 1 1 1 1 
                              Uniform f32_4* %301 = OpAccessChain %63 %294 %22 
                                       f32_4 %302 = OpLoad %301 
                                       f32_4 %303 = OpFMul %300 %302 
                                                      OpStore %298 %303 
                              Uniform f32_4* %304 = OpAccessChain %63 %294 %30 
                                       f32_4 %305 = OpLoad %304 
                                       f32_4 %306 = OpLoad %165 
                                       f32_4 %307 = OpVectorShuffle %306 %306 0 0 0 0 
                                       f32_4 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %298 
                                       f32_4 %310 = OpFAdd %308 %309 
                                                      OpStore %298 %310 
                              Uniform f32_4* %311 = OpAccessChain %63 %294 %42 
                                       f32_4 %312 = OpLoad %311 
                                       f32_4 %313 = OpLoad %165 
                                       f32_4 %314 = OpVectorShuffle %313 %313 2 2 2 2 
                                       f32_4 %315 = OpFMul %312 %314 
                                       f32_4 %316 = OpLoad %298 
                                       f32_4 %317 = OpFAdd %315 %316 
                                                      OpStore %298 %317 
                              Uniform f32_4* %318 = OpAccessChain %63 %294 %294 
                                       f32_4 %319 = OpLoad %318 
                                       f32_4 %320 = OpLoad %165 
                                       f32_4 %321 = OpVectorShuffle %320 %320 3 3 3 3 
                                       f32_4 %322 = OpFMul %319 %321 
                                       f32_4 %323 = OpLoad %298 
                                       f32_4 %324 = OpFAdd %322 %323 
                                                      OpStore %165 %324 
                                       f32_4 %329 = OpLoad %165 
                               Output f32_4* %331 = OpAccessChain %328 %30 
                                                      OpStore %331 %329 
                                Private f32* %334 = OpAccessChain %165 %179 
                                         f32 %335 = OpLoad %334 
                                                      OpStore %333 %335 
                              Uniform f32_4* %337 = OpAccessChain %63 %22 %294 
                                       f32_4 %338 = OpLoad %337 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_4 %340 = OpLoad %134 
                                       f32_3 %341 = OpVectorShuffle %340 %340 3 3 3 
                                       f32_3 %342 = OpFMul %339 %341 
                                       f32_4 %343 = OpLoad %9 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFAdd %342 %344 
                                                      OpStore %336 %345 
                              Uniform f32_4* %346 = OpAccessChain %63 %22 %294 
                                       f32_4 %347 = OpLoad %346 
                                       f32_4 %348 = OpLoad %134 
                                       f32_4 %349 = OpVectorShuffle %348 %348 3 3 3 3 
                                       f32_4 %350 = OpFMul %347 %349 
                                       f32_4 %351 = OpLoad %9 
                                       f32_4 %352 = OpFAdd %350 %351 
                                                      OpStore %9 %352 
                                       f32_4 %353 = OpLoad %9 
                                       f32_3 %354 = OpVectorShuffle %353 %353 1 1 1 
                              Uniform f32_4* %356 = OpAccessChain %63 %355 %22 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_3 %359 = OpFMul %354 %358 
                                       f32_4 %360 = OpLoad %134 
                                       f32_4 %361 = OpVectorShuffle %360 %359 4 5 6 3 
                                                      OpStore %134 %361 
                              Uniform f32_4* %362 = OpAccessChain %63 %355 %30 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_4 %365 = OpLoad %9 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 0 0 
                                       f32_3 %367 = OpFMul %364 %366 
                                       f32_4 %368 = OpLoad %134 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_3 %370 = OpFAdd %367 %369 
                                       f32_4 %371 = OpLoad %134 
                                       f32_4 %372 = OpVectorShuffle %371 %370 4 5 6 3 
                                                      OpStore %134 %372 
                              Uniform f32_4* %373 = OpAccessChain %63 %355 %42 
                                       f32_4 %374 = OpLoad %373 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_4 %376 = OpLoad %9 
                                       f32_3 %377 = OpVectorShuffle %376 %376 2 2 2 
                                       f32_3 %378 = OpFMul %375 %377 
                                       f32_4 %379 = OpLoad %134 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFAdd %378 %380 
                                       f32_4 %382 = OpLoad %9 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %9 %383 
                              Uniform f32_4* %385 = OpAccessChain %63 %355 %294 
                                       f32_4 %386 = OpLoad %385 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                                       f32_4 %388 = OpLoad %9 
                                       f32_3 %389 = OpVectorShuffle %388 %388 3 3 3 
                                       f32_3 %390 = OpFMul %387 %389 
                                       f32_4 %391 = OpLoad %9 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                       f32_3 %393 = OpFAdd %390 %392 
                                                      OpStore %384 %393 
                                 Output f32* %394 = OpAccessChain %328 %30 %187 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFNegate %395 
                                 Output f32* %397 = OpAccessChain %328 %30 %187 
                                                      OpStore %397 %396 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 410
#extension GL_ARB_explicit_attrib_location : require

in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
in  vec4 in_TEXCOORD3;
in  vec4 in_COLOR0;
layout(location = 0) out vec4 vs_INTERNALTESSPOS0;
layout(location = 1) out vec4 vs_TANGENT0;
layout(location = 2) out vec3 vs_NORMAL0;
layout(location = 3) out vec4 vs_TEXCOORD0;
layout(location = 4) out vec4 vs_TEXCOORD1;
layout(location = 5) out vec4 vs_TEXCOORD2;
layout(location = 6) out vec4 vs_TEXCOORD3;
layout(location = 7) out vec4 vs_COLOR0;
void main()
{
    vs_INTERNALTESSPOS0 = in_POSITION0;
    vs_TANGENT0 = in_TANGENT0;
    vs_NORMAL0.xyz = in_NORMAL0.xyz;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD3;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	float _Y_Mask;
uniform 	float _FresnelBias;
uniform 	float _FresnelScale;
uniform 	float _FresnelPower;
uniform 	float _Alpha;
layout(location = 0) in  vec3 ds_TEXCOORD0;
layout(location = 1) in  float ds_TEXCOORD3;
layout(location = 2) in  vec3 ds_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
float u_xlat4;
float u_xlat6;
void main()
{
    u_xlat0.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat6) + _WorldSpaceLightPos0.xyz;
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 0.00100000005);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat1.x = u_xlat6 * u_xlat6;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat6 = u_xlat6 * 0.959999979 + 0.0399999991;
    u_xlat1.x = dot(ds_TEXCOORD0.xyz, ds_TEXCOORD0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * ds_TEXCOORD0.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat4 = abs(u_xlat0.x) + u_xlat2.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = _FresnelScale * u_xlat0.x + _FresnelBias;
    u_xlat4 = u_xlat4 + 9.99999975e-06;
    u_xlat4 = 0.5 / u_xlat4;
    u_xlat4 = u_xlat4 * 0.999999881;
    u_xlat2.x = u_xlat2.x * u_xlat4;
    u_xlat1.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.x = ds_TEXCOORD3 * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xxx;
    u_xlat2.x = (-ds_TEXCOORD0.y) + _Y_Mask;
    u_xlat2.x = abs(u_xlat2.x) + (-_Y_Mask);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    SV_Target0.w = u_xlat0.x * _Alpha;
    return;
}

#endif
#ifdef HULL
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(vertices=3) out;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	float _EdgeLength;
layout(location = 0) in vec4 vs_INTERNALTESSPOS0[];
layout(location = 0) out vec4 hs_INTERNALTESSPOS0[];
layout(location = 1) in vec4 vs_TANGENT0[];
layout(location = 1) out vec4 hs_TANGENT0[];
layout(location = 2) in vec3 vs_NORMAL0[];
layout(location = 2) out vec3 hs_NORMAL0[];
layout(location = 3) in vec4 vs_TEXCOORD0[];
layout(location = 3) out vec4 hs_TEXCOORD0[];
layout(location = 4) in vec4 vs_TEXCOORD1[];
layout(location = 4) out vec4 hs_TEXCOORD1[];
layout(location = 5) in vec4 vs_TEXCOORD2[];
layout(location = 5) out vec4 hs_TEXCOORD2[];
layout(location = 6) in vec4 vs_TEXCOORD3[];
layout(location = 6) out vec4 hs_TEXCOORD3[];
layout(location = 7) in vec4 vs_COLOR0[];
layout(location = 7) out vec4 hs_COLOR0[];
void passthrough_ctrl_points()
{
    hs_INTERNALTESSPOS0[gl_InvocationID] = vs_INTERNALTESSPOS0[gl_InvocationID];
    hs_TANGENT0[gl_InvocationID] = vs_TANGENT0[gl_InvocationID];
    hs_NORMAL0[gl_InvocationID] = vs_NORMAL0[gl_InvocationID];
    hs_TEXCOORD0[gl_InvocationID] = vs_TEXCOORD0[gl_InvocationID];
    hs_TEXCOORD1[gl_InvocationID] = vs_TEXCOORD1[gl_InvocationID];
    hs_TEXCOORD2[gl_InvocationID] = vs_TEXCOORD2[gl_InvocationID];
    hs_TEXCOORD3[gl_InvocationID] = vs_TEXCOORD3[gl_InvocationID];
    hs_COLOR0[gl_InvocationID] = vs_COLOR0[gl_InvocationID];
}
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
float u_xlat13;
void fork_phase2(int phaseInstanceID)
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[1].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[1].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[2].www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _EdgeLength;
    u_xlat2.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _ScreenParams.y;
    u_xlat12 = u_xlat13 / u_xlat12;
    gl_TessLevelOuter[0] = max(u_xlat12, 1.0);
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[0].www + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _ScreenParams.y;
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _EdgeLength;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    gl_TessLevelOuter[1] = max(u_xlat12, 1.0);
    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _ScreenParams.y;
    u_xlat4.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _EdgeLength;
    u_xlat0.x = u_xlat0.x / u_xlat4.x;
    gl_TessLevelOuter[2] = max(u_xlat0.x, 1.0);
}
void join_phase3(int phaseInstanceID)
{
    u_xlat0.x = gl_TessLevelOuter[2] + gl_TessLevelOuter[2];
    u_xlat0.x = u_xlat0.x + gl_TessLevelOuter[2];
    gl_TessLevelInner[0] = u_xlat0.x * 0.333333343;
}
void main()
{
    passthrough_ctrl_points();
    barrier();
    if (gl_InvocationID == 0)
    {
        fork_phase2(0);
        join_phase3(0);
    }
}

#endif
#ifdef DOMAIN
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(ccw) in;
layout(fractional_odd_spacing) in;
layout(triangles) in;
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _u;
uniform 	float _v;
uniform 	vec4 _Flamenoise_ST;
uniform 	float _Y_Mask;
uniform 	float _FlameHeight;
UNITY_LOCATION(0) uniform  sampler2D _FlameWave;
UNITY_LOCATION(1) uniform  sampler2D _Flamenoise;
layout(location = 0) in  vec4 hs_INTERNALTESSPOS0 [];
layout(location = 2) in  vec3 hs_NORMAL0 [];
layout(location = 3) in  vec4 hs_TEXCOORD0 [];
layout(location = 0) out vec3 ds_TEXCOORD0;
layout(location = 1) out float ds_TEXCOORD3;
layout(location = 2) out vec3 ds_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat6;
float u_xlat9;
void main()
{
    u_xlat0.xy = gl_TessCoord.yy * hs_TEXCOORD0[1].xy;
    u_xlat0.xy = hs_TEXCOORD0[0].xy * gl_TessCoord.xx + u_xlat0.xy;
    u_xlat0.xy = hs_TEXCOORD0[2].xy * gl_TessCoord.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _Flamenoise_ST.xy + _Flamenoise_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_u, _v) + u_xlat0.xy;
    u_xlat6 = textureLod(_FlameWave, u_xlat0.xy, 0.0).x;
    u_xlat0.x = textureLod(_Flamenoise, u_xlat0.xy, 0.0).x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat1.xyz = gl_TessCoord.yyy * hs_NORMAL0[1].xyz;
    u_xlat1.xyz = hs_NORMAL0[0].xyz * gl_TessCoord.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hs_NORMAL0[2].xyz * gl_TessCoord.zzz + u_xlat1.xyz;
    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.x = (-u_xlat2.y) * u_xlat9 + _Y_Mask;
    ds_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = abs(u_xlat1.x) + (-_Y_Mask);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
    u_xlat1 = gl_TessCoord.yyyy * hs_INTERNALTESSPOS0[1];
    u_xlat1 = hs_INTERNALTESSPOS0[0] * gl_TessCoord.xxxx + u_xlat1;
    u_xlat1 = hs_INTERNALTESSPOS0[2] * gl_TessCoord.zzzz + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_FlameHeight, _FlameHeight, _FlameHeight)) + u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    ds_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat0.xyz;
    u_xlat0 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat0;
    gl_Position = u_xlat0;
    ds_TEXCOORD3 = u_xlat0.z;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 38
; Schema: 0
                               OpCapability Shader 
                        %1 = OpExtInstImport "GLSL.std.450" 
                               OpMemoryModel Logical GLSL450 
                               OpEntryPoint Vertex %4 "main" %9 %11 %13 %14 %18 %20 %22 %23 %25 %26 %28 %29 %31 %32 %34 %35 
                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                               OpDecorate %9 Location 9 
                               OpDecorate %11 Location 11 
                               OpDecorate %13 Location 13 
                               OpDecorate %14 Location 14 
                               OpDecorate %18 Location 18 
                               OpDecorate %20 Location 20 
                               OpDecorate vs_TEXCOORD0 Location 22 
                               OpDecorate %23 Location 23 
                               OpDecorate vs_TEXCOORD1 Location 25 
                               OpDecorate %26 Location 26 
                               OpDecorate vs_TEXCOORD2 Location 28 
                               OpDecorate %29 Location 29 
                               OpDecorate vs_TEXCOORD3 Location 31 
                               OpDecorate %32 Location 32 
                               OpDecorate %34 Location 34 
                               OpDecorate %35 Location 35 
                        %2 = OpTypeVoid 
                        %3 = OpTypeFunction %2 
                        %6 = OpTypeFloat 32 
                        %7 = OpTypeVector %6 4 
                        %8 = OpTypePointer Output %7 
          Output f32_4* %9 = OpVariable Output 
                       %10 = OpTypePointer Input %7 
          Input f32_4* %11 = OpVariable Input 
         Output f32_4* %13 = OpVariable Output 
          Input f32_4* %14 = OpVariable Input 
                       %16 = OpTypeVector %6 3 
                       %17 = OpTypePointer Output %16 
         Output f32_3* %18 = OpVariable Output 
                       %19 = OpTypePointer Input %16 
          Input f32_3* %20 = OpVariable Input 
Output f32_4* vs_TEXCOORD0 = OpVariable Output 
          Input f32_4* %23 = OpVariable Input 
Output f32_4* vs_TEXCOORD1 = OpVariable Output 
          Input f32_4* %26 = OpVariable Input 
Output f32_4* vs_TEXCOORD2 = OpVariable Output 
          Input f32_4* %29 = OpVariable Input 
Output f32_4* vs_TEXCOORD3 = OpVariable Output 
          Input f32_4* %32 = OpVariable Input 
         Output f32_4* %34 = OpVariable Output 
          Input f32_4* %35 = OpVariable Input 
                   void %4 = OpFunction None %3 
                        %5 = OpLabel 
                 f32_4 %12 = OpLoad %11 
                               OpStore %9 %12 
                 f32_4 %15 = OpLoad %14 
                               OpStore %13 %15 
                 f32_3 %21 = OpLoad %20 
                               OpStore %18 %21 
                 f32_4 %24 = OpLoad %23 
                               OpStore vs_TEXCOORD0 %24 
                 f32_4 %27 = OpLoad %26 
                               OpStore vs_TEXCOORD1 %27 
                 f32_4 %30 = OpLoad %29 
                               OpStore vs_TEXCOORD2 %30 
                 f32_4 %33 = OpLoad %32 
                               OpStore vs_TEXCOORD3 %33 
                 f32_4 %36 = OpLoad %35 
                               OpStore %34 %36 
                               OpReturn
                               OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 273
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %91 %186 %226 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %91 Location 91 
                                                      OpDecorate %186 Location 186 
                                                      OpDecorate %226 Location 226 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeStruct %7 %14 %14 %14 %14 %6 %6 %6 %6 %6 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 0 
                                              %20 = OpTypePointer Uniform %7 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %25 = OpVariable Private 
                               Private f32_3* %31 = OpVariable Private 
                                          i32 %36 = OpConstant 2 
                                              %37 = OpTypePointer Uniform %14 
                                          f32 %50 = OpConstant 3.674022E-40 
                                          f32 %64 = OpConstant 3.674022E-40 
                                          f32 %65 = OpConstant 3.674022E-40 
                                              %73 = OpTypeInt 32 0 
                                          u32 %74 = OpConstant 0 
                                          f32 %87 = OpConstant 3.674022E-40 
                                          f32 %89 = OpConstant 3.674022E-40 
                                 Input f32_3* %91 = OpVariable Input 
                              Private f32_3* %108 = OpVariable Private 
                                Private f32* %119 = OpVariable Private 
                                         i32 %137 = OpConstant 8 
                                             %138 = OpTypePointer Uniform %6 
                                         i32 %147 = OpConstant 7 
                                         i32 %153 = OpConstant 6 
                                         f32 %159 = OpConstant 3.674022E-40 
                                         f32 %161 = OpConstant 3.674022E-40 
                                         f32 %171 = OpConstant 3.674022E-40 
                                         i32 %176 = OpConstant 4 
                                             %185 = OpTypePointer Input %6 
                                  Input f32* %186 = OpVariable Input 
                                         i32 %188 = OpConstant 1 
                                         u32 %189 = OpConstant 1 
                                         u32 %201 = OpConstant 2 
                                         i32 %212 = OpConstant 3 
                                         u32 %216 = OpConstant 3 
                                             %225 = OpTypePointer Output %14 
                               Output f32_4* %226 = OpVariable Output 
                                         i32 %236 = OpConstant 5 
                                         i32 %266 = OpConstant 9 
                                             %270 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad %11 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %21 = OpAccessChain %17 %19 
                                        f32_3 %22 = OpLoad %21 
                                        f32_3 %23 = OpFAdd %13 %22 
                                                      OpStore %9 %23 
                                        f32_3 %26 = OpLoad %9 
                                        f32_3 %27 = OpLoad %9 
                                          f32 %28 = OpDot %26 %27 
                                                      OpStore %25 %28 
                                          f32 %29 = OpLoad %25 
                                          f32 %30 = OpExtInst %1 32 %29 
                                                      OpStore %25 %30 
                                        f32_3 %32 = OpLoad %9 
                                          f32 %33 = OpLoad %25 
                                        f32_3 %34 = OpCompositeConstruct %33 %33 %33 
                                        f32_3 %35 = OpFMul %32 %34 
                               Uniform f32_4* %38 = OpAccessChain %17 %36 
                                        f32_4 %39 = OpLoad %38 
                                        f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
                                        f32_3 %41 = OpFAdd %35 %40 
                                                      OpStore %31 %41 
                                          f32 %42 = OpLoad %25 
                                        f32_3 %43 = OpCompositeConstruct %42 %42 %42 
                                        f32_3 %44 = OpLoad %9 
                                        f32_3 %45 = OpFMul %43 %44 
                                                      OpStore %9 %45 
                                        f32_3 %46 = OpLoad %31 
                                        f32_3 %47 = OpLoad %31 
                                          f32 %48 = OpDot %46 %47 
                                                      OpStore %25 %48 
                                          f32 %49 = OpLoad %25 
                                          f32 %51 = OpExtInst %1 40 %49 %50 
                                                      OpStore %25 %51 
                                          f32 %52 = OpLoad %25 
                                          f32 %53 = OpExtInst %1 32 %52 
                                                      OpStore %25 %53 
                                          f32 %54 = OpLoad %25 
                                        f32_3 %55 = OpCompositeConstruct %54 %54 %54 
                                        f32_3 %56 = OpLoad %31 
                                        f32_3 %57 = OpFMul %55 %56 
                                                      OpStore %31 %57 
                               Uniform f32_4* %58 = OpAccessChain %17 %36 
                                        f32_4 %59 = OpLoad %58 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpLoad %31 
                                          f32 %62 = OpDot %60 %61 
                                                      OpStore %25 %62 
                                          f32 %63 = OpLoad %25 
                                          f32 %66 = OpExtInst %1 43 %63 %64 %65 
                                                      OpStore %25 %66 
                                          f32 %67 = OpLoad %25 
                                          f32 %68 = OpFNegate %67 
                                          f32 %69 = OpFAdd %68 %65 
                                                      OpStore %25 %69 
                                          f32 %70 = OpLoad %25 
                                          f32 %71 = OpLoad %25 
                                          f32 %72 = OpFMul %70 %71 
                                 Private f32* %75 = OpAccessChain %31 %74 
                                                      OpStore %75 %72 
                                 Private f32* %76 = OpAccessChain %31 %74 
                                          f32 %77 = OpLoad %76 
                                 Private f32* %78 = OpAccessChain %31 %74 
                                          f32 %79 = OpLoad %78 
                                          f32 %80 = OpFMul %77 %79 
                                 Private f32* %81 = OpAccessChain %31 %74 
                                                      OpStore %81 %80 
                                          f32 %82 = OpLoad %25 
                                 Private f32* %83 = OpAccessChain %31 %74 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpFMul %82 %84 
                                                      OpStore %25 %85 
                                          f32 %86 = OpLoad %25 
                                          f32 %88 = OpFMul %86 %87 
                                          f32 %90 = OpFAdd %88 %89 
                                                      OpStore %25 %90 
                                        f32_3 %92 = OpLoad %91 
                                        f32_3 %93 = OpLoad %91 
                                          f32 %94 = OpDot %92 %93 
                                 Private f32* %95 = OpAccessChain %31 %74 
                                                      OpStore %95 %94 
                                 Private f32* %96 = OpAccessChain %31 %74 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpExtInst %1 32 %97 
                                 Private f32* %99 = OpAccessChain %31 %74 
                                                      OpStore %99 %98 
                                       f32_3 %100 = OpLoad %31 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 0 0 
                                       f32_3 %102 = OpLoad %91 
                                       f32_3 %103 = OpFMul %101 %102 
                                                      OpStore %31 %103 
                                       f32_3 %104 = OpLoad %31 
                                       f32_3 %105 = OpLoad %9 
                                         f32 %106 = OpDot %104 %105 
                                Private f32* %107 = OpAccessChain %9 %74 
                                                      OpStore %107 %106 
                                       f32_3 %109 = OpLoad %31 
                              Uniform f32_4* %110 = OpAccessChain %17 %36 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                         f32 %113 = OpDot %109 %112 
                                Private f32* %114 = OpAccessChain %108 %74 
                                                      OpStore %114 %113 
                                Private f32* %115 = OpAccessChain %108 %74 
                                         f32 %116 = OpLoad %115 
                                         f32 %117 = OpExtInst %1 43 %116 %64 %65 
                                Private f32* %118 = OpAccessChain %108 %74 
                                                      OpStore %118 %117 
                                Private f32* %120 = OpAccessChain %9 %74 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpExtInst %1 4 %121 
                                Private f32* %123 = OpAccessChain %108 %74 
                                         f32 %124 = OpLoad %123 
                                         f32 %125 = OpFAdd %122 %124 
                                                      OpStore %119 %125 
                                Private f32* %126 = OpAccessChain %9 %74 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpFNegate %127 
                                         f32 %129 = OpFAdd %128 %65 
                                Private f32* %130 = OpAccessChain %9 %74 
                                                      OpStore %130 %129 
                                Private f32* %131 = OpAccessChain %9 %74 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpExtInst %1 30 %132 
                                Private f32* %134 = OpAccessChain %9 %74 
                                                      OpStore %134 %133 
                                Private f32* %135 = OpAccessChain %9 %74 
                                         f32 %136 = OpLoad %135 
                                Uniform f32* %139 = OpAccessChain %17 %137 
                                         f32 %140 = OpLoad %139 
                                         f32 %141 = OpFMul %136 %140 
                                Private f32* %142 = OpAccessChain %9 %74 
                                                      OpStore %142 %141 
                                Private f32* %143 = OpAccessChain %9 %74 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpExtInst %1 29 %144 
                                Private f32* %146 = OpAccessChain %9 %74 
                                                      OpStore %146 %145 
                                Uniform f32* %148 = OpAccessChain %17 %147 
                                         f32 %149 = OpLoad %148 
                                Private f32* %150 = OpAccessChain %9 %74 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFMul %149 %151 
                                Uniform f32* %154 = OpAccessChain %17 %153 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFAdd %152 %155 
                                Private f32* %157 = OpAccessChain %9 %74 
                                                      OpStore %157 %156 
                                         f32 %158 = OpLoad %119 
                                         f32 %160 = OpFAdd %158 %159 
                                                      OpStore %119 %160 
                                         f32 %162 = OpLoad %119 
                                         f32 %163 = OpFDiv %161 %162 
                                                      OpStore %119 %163 
                                Private f32* %164 = OpAccessChain %108 %74 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpLoad %119 
                                         f32 %167 = OpFMul %165 %166 
                                Private f32* %168 = OpAccessChain %108 %74 
                                                      OpStore %168 %167 
                                Private f32* %169 = OpAccessChain %108 %74 
                                         f32 %170 = OpLoad %169 
                                         f32 %172 = OpFMul %170 %171 
                                Private f32* %173 = OpAccessChain %108 %74 
                                                      OpStore %173 %172 
                                       f32_3 %174 = OpLoad %108 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 0 0 
                              Uniform f32_4* %177 = OpAccessChain %17 %176 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFMul %175 %179 
                                                      OpStore %31 %180 
                                         f32 %181 = OpLoad %25 
                                       f32_3 %182 = OpCompositeConstruct %181 %181 %181 
                                       f32_3 %183 = OpLoad %31 
                                       f32_3 %184 = OpFMul %182 %183 
                                                      OpStore %108 %184 
                                         f32 %187 = OpLoad %186 
                                Uniform f32* %190 = OpAccessChain %17 %188 %189 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFDiv %187 %191 
                                Private f32* %193 = OpAccessChain %31 %74 
                                                      OpStore %193 %192 
                                Private f32* %194 = OpAccessChain %31 %74 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %196 %65 
                                Private f32* %198 = OpAccessChain %31 %74 
                                                      OpStore %198 %197 
                                Private f32* %199 = OpAccessChain %31 %74 
                                         f32 %200 = OpLoad %199 
                                Uniform f32* %202 = OpAccessChain %17 %188 %201 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpFMul %200 %203 
                                Private f32* %205 = OpAccessChain %31 %74 
                                                      OpStore %205 %204 
                                Private f32* %206 = OpAccessChain %31 %74 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpExtInst %1 40 %207 %64 
                                Private f32* %209 = OpAccessChain %31 %74 
                                                      OpStore %209 %208 
                                Private f32* %210 = OpAccessChain %31 %74 
                                         f32 %211 = OpLoad %210 
                                Uniform f32* %213 = OpAccessChain %17 %212 %201 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFMul %211 %214 
                                Uniform f32* %217 = OpAccessChain %17 %212 %216 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFAdd %215 %218 
                                Private f32* %220 = OpAccessChain %31 %74 
                                                      OpStore %220 %219 
                                Private f32* %221 = OpAccessChain %31 %74 
                                         f32 %222 = OpLoad %221 
                                         f32 %223 = OpExtInst %1 43 %222 %64 %65 
                                Private f32* %224 = OpAccessChain %31 %74 
                                                      OpStore %224 %223 
                                       f32_3 %227 = OpLoad %108 
                                       f32_3 %228 = OpLoad %31 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_4 %231 = OpLoad %226 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %226 %232 
                                  Input f32* %233 = OpAccessChain %91 %189 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFNegate %234 
                                Uniform f32* %237 = OpAccessChain %17 %236 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFAdd %235 %238 
                                Private f32* %240 = OpAccessChain %108 %74 
                                                      OpStore %240 %239 
                                Private f32* %241 = OpAccessChain %108 %74 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpExtInst %1 4 %242 
                                Uniform f32* %244 = OpAccessChain %17 %236 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFNegate %245 
                                         f32 %247 = OpFAdd %243 %246 
                                Private f32* %248 = OpAccessChain %108 %74 
                                                      OpStore %248 %247 
                                Private f32* %249 = OpAccessChain %108 %74 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpExtInst %1 43 %250 %64 %65 
                                Private f32* %252 = OpAccessChain %108 %74 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %108 %74 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpFNegate %254 
                                         f32 %256 = OpFAdd %255 %65 
                                Private f32* %257 = OpAccessChain %108 %74 
                                                      OpStore %257 %256 
                                Private f32* %258 = OpAccessChain %108 %74 
                                         f32 %259 = OpLoad %258 
                                Private f32* %260 = OpAccessChain %9 %74 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpFMul %259 %261 
                                Private f32* %263 = OpAccessChain %9 %74 
                                                      OpStore %263 %262 
                                Private f32* %264 = OpAccessChain %9 %74 
                                         f32 %265 = OpLoad %264 
                                Uniform f32* %267 = OpAccessChain %17 %266 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFMul %265 %268 
                                 Output f32* %271 = OpAccessChain %226 %216 
                                                      OpStore %271 %269 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 387
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationControl %4 "main" %23 %25 %30 %37 %39 %47 %51 %58 %60 %65 %67 %72 %74 %79 %81 %86 %88 %219 %371 
                                                      OpExecutionMode %4 OutputVertices 4 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %25 BuiltIn WorkgroupSize 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %37 Location 37 
                                                      OpDecorate %39 Location 39 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %51 Location 51 
                                                      OpDecorate %58 Location 58 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate %65 Location 65 
                                                      OpDecorate vs_TEXCOORD1 Location 67 
                                                      OpDecorate %72 Location 72 
                                                      OpDecorate vs_TEXCOORD2 Location 74 
                                                      OpDecorate %79 Location 79 
                                                      OpDecorate vs_TEXCOORD3 Location 81 
                                                      OpDecorate %86 Location 86 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %96 ArrayStride 96 
                                                      OpMemberDecorate %97 0 Offset 97 
                                                      OpMemberDecorate %97 1 Offset 97 
                                                      OpMemberDecorate %97 2 Offset 97 
                                                      OpMemberDecorate %97 3 Offset 97 
                                                      OpDecorate %97 Block 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate %219 Patch 
                                                      OpDecorate %219 BuiltIn 219 
                                                      OpDecorate %371 Patch 
                                                      OpDecorate %371 BuiltIn 371 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %8 = OpTypeInt 32 1 
                                               %9 = OpTypePointer Function %8 
                                              %10 = OpTypeFunction %2 %9 
                                              %17 = OpTypeFloat 32 
                                              %18 = OpTypeVector %17 4 
                                              %19 = OpTypeInt 32 0 
                                          u32 %20 = OpConstant 3 
                                              %21 = OpTypeArray %18 %20 
                                              %22 = OpTypePointer Output %21 
                             Output f32_4[3]* %23 = OpVariable Output 
                                              %24 = OpTypePointer Input %8 
                                   Input i32* %25 = OpVariable Input 
                                          u32 %27 = OpConstant 32 
                                              %28 = OpTypeArray %18 %27 
                                              %29 = OpTypePointer Input %28 
                             Input f32_4[32]* %30 = OpVariable Input 
                                              %32 = OpTypePointer Input %18 
                                              %35 = OpTypePointer Output %18 
                             Output f32_4[3]* %37 = OpVariable Output 
                             Input f32_4[32]* %39 = OpVariable Input 
                                              %44 = OpTypeVector %17 3 
                                              %45 = OpTypeArray %44 %20 
                                              %46 = OpTypePointer Output %45 
                             Output f32_3[3]* %47 = OpVariable Output 
                                              %49 = OpTypeArray %44 %27 
                                              %50 = OpTypePointer Input %49 
                             Input f32_3[32]* %51 = OpVariable Input 
                                              %53 = OpTypePointer Input %44 
                                              %56 = OpTypePointer Output %44 
                             Output f32_4[3]* %58 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD0 = OpVariable Input 
                             Output f32_4[3]* %65 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD1 = OpVariable Input 
                             Output f32_4[3]* %72 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD2 = OpVariable Input 
                             Output f32_4[3]* %79 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD3 = OpVariable Input 
                             Output f32_4[3]* %86 = OpVariable Output 
                             Input f32_4[32]* %88 = OpVariable Input 
                                              %93 = OpTypePointer Private %44 
                               Private f32_3* %94 = OpVariable Private 
                                          u32 %95 = OpConstant 4 
                                              %96 = OpTypeArray %18 %95 
                                              %97 = OpTypeStruct %44 %18 %96 %17 
                                              %98 = OpTypePointer Uniform %97 
Uniform struct {f32_3; f32_4; f32_4[4]; f32;}* %99 = OpVariable Uniform 
                                         i32 %100 = OpConstant 2 
                                         i32 %101 = OpConstant 1 
                                             %102 = OpTypePointer Uniform %18 
                                         i32 %110 = OpConstant 0 
                                         i32 %129 = OpConstant 3 
                              Private f32_3* %139 = OpVariable Private 
                              Private f32_3* %174 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                             %182 = OpTypePointer Uniform %44 
                                             %187 = OpTypePointer Private %17 
                                Private f32* %188 = OpVariable Private 
                                             %195 = OpTypePointer Uniform %17 
                                Private f32* %203 = OpVariable Private 
                                         u32 %210 = OpConstant 1 
                                             %217 = OpTypeArray %17 %95 
                                             %218 = OpTypePointer Output %217 
                              Output f32[4]* %219 = OpVariable Output 
                                         f32 %221 = OpConstant 3.674022E-40 
                                             %223 = OpTypePointer Output %17 
                              Private f32_3* %259 = OpVariable Private 
                                         u32 %285 = OpConstant 0 
                              Private f32_3* %325 = OpVariable Private 
                                         u32 %368 = OpConstant 2 
                                             %369 = OpTypeArray %17 %368 
                                             %370 = OpTypePointer Output %369 
                              Output f32[2]* %371 = OpVariable Output 
                                         f32 %374 = OpConstant 3.674022E-40 
                                             %379 = OpTypeBool 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %383 = OpVariable Function 
                               Function i32* %385 = OpVariable Function 
                                        void %377 = OpFunctionCall %6 
                                                      OpControlBarrier 368 95 285 
                                         i32 %378 = OpLoad %25 
                                        bool %380 = OpIEqual %378 %110 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %380 %381 %382 
                                             %381 = OpLabel 
                                                      OpStore %383 %110 
                                        void %384 = OpFunctionCall %12 %383 
                                                      OpStore %385 %110 
                                        void %386 = OpFunctionCall %15 %385 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
                                          void %6 = OpFunction None %3 
                                               %7 = OpLabel 
                                          i32 %26 = OpLoad %25 
                                          i32 %31 = OpLoad %25 
                                 Input f32_4* %33 = OpAccessChain %30 %31 
                                        f32_4 %34 = OpLoad %33 
                                Output f32_4* %36 = OpAccessChain %23 %26 
                                                      OpStore %36 %34 
                                          i32 %38 = OpLoad %25 
                                          i32 %40 = OpLoad %25 
                                 Input f32_4* %41 = OpAccessChain %39 %40 
                                        f32_4 %42 = OpLoad %41 
                                Output f32_4* %43 = OpAccessChain %37 %38 
                                                      OpStore %43 %42 
                                          i32 %48 = OpLoad %25 
                                          i32 %52 = OpLoad %25 
                                 Input f32_3* %54 = OpAccessChain %51 %52 
                                        f32_3 %55 = OpLoad %54 
                                Output f32_3* %57 = OpAccessChain %47 %48 
                                                      OpStore %57 %55 
                                          i32 %59 = OpLoad %25 
                                          i32 %61 = OpLoad %25 
                                 Input f32_4* %62 = OpAccessChain vs_TEXCOORD0 %61 
                                        f32_4 %63 = OpLoad %62 
                                Output f32_4* %64 = OpAccessChain %58 %59 
                                                      OpStore %64 %63 
                                          i32 %66 = OpLoad %25 
                                          i32 %68 = OpLoad %25 
                                 Input f32_4* %69 = OpAccessChain vs_TEXCOORD1 %68 
                                        f32_4 %70 = OpLoad %69 
                                Output f32_4* %71 = OpAccessChain %65 %66 
                                                      OpStore %71 %70 
                                          i32 %73 = OpLoad %25 
                                          i32 %75 = OpLoad %25 
                                 Input f32_4* %76 = OpAccessChain vs_TEXCOORD2 %75 
                                        f32_4 %77 = OpLoad %76 
                                Output f32_4* %78 = OpAccessChain %72 %73 
                                                      OpStore %78 %77 
                                          i32 %80 = OpLoad %25 
                                          i32 %82 = OpLoad %25 
                                 Input f32_4* %83 = OpAccessChain vs_TEXCOORD3 %82 
                                        f32_4 %84 = OpLoad %83 
                                Output f32_4* %85 = OpAccessChain %79 %80 
                                                      OpStore %85 %84 
                                          i32 %87 = OpLoad %25 
                                          i32 %89 = OpLoad %25 
                                 Input f32_4* %90 = OpAccessChain %88 %89 
                                        f32_4 %91 = OpLoad %90 
                                Output f32_4* %92 = OpAccessChain %86 %87 
                                                      OpStore %92 %91 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %12 = OpFunction None %10 
                                Function i32* %11 = OpFunctionParameter 
                                              %13 = OpLabel 
                              Uniform f32_4* %103 = OpAccessChain %99 %100 %101 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                Input f32_4* %106 = OpAccessChain %30 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 1 1 1 
                                       f32_3 %109 = OpFMul %105 %108 
                                                      OpStore %94 %109 
                              Uniform f32_4* %111 = OpAccessChain %99 %100 %110 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                Input f32_4* %114 = OpAccessChain %30 %101 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %113 %116 
                                       f32_3 %118 = OpLoad %94 
                                       f32_3 %119 = OpFAdd %117 %118 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %99 %100 %100 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                Input f32_4* %123 = OpAccessChain %30 %101 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 2 2 2 
                                       f32_3 %126 = OpFMul %122 %125 
                                       f32_3 %127 = OpLoad %94 
                                       f32_3 %128 = OpFAdd %126 %127 
                                                      OpStore %94 %128 
                              Uniform f32_4* %130 = OpAccessChain %99 %100 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                Input f32_4* %133 = OpAccessChain %30 %101 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 3 3 3 
                                       f32_3 %136 = OpFMul %132 %135 
                                       f32_3 %137 = OpLoad %94 
                                       f32_3 %138 = OpFAdd %136 %137 
                                                      OpStore %94 %138 
                              Uniform f32_4* %140 = OpAccessChain %99 %100 %101 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                Input f32_4* %143 = OpAccessChain %30 %100 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 1 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                                      OpStore %139 %146 
                              Uniform f32_4* %147 = OpAccessChain %99 %100 %110 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                Input f32_4* %150 = OpAccessChain %30 %100 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 0 0 
                                       f32_3 %153 = OpFMul %149 %152 
                                       f32_3 %154 = OpLoad %139 
                                       f32_3 %155 = OpFAdd %153 %154 
                                                      OpStore %139 %155 
                              Uniform f32_4* %156 = OpAccessChain %99 %100 %100 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                Input f32_4* %159 = OpAccessChain %30 %100 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 2 2 2 
                                       f32_3 %162 = OpFMul %158 %161 
                                       f32_3 %163 = OpLoad %139 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %139 %164 
                              Uniform f32_4* %165 = OpAccessChain %99 %100 %129 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                Input f32_4* %168 = OpAccessChain %30 %100 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 3 3 3 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_3 %172 = OpLoad %139 
                                       f32_3 %173 = OpFAdd %171 %172 
                                                      OpStore %139 %173 
                                       f32_3 %175 = OpLoad %94 
                                       f32_3 %176 = OpLoad %139 
                                       f32_3 %177 = OpFAdd %175 %176 
                                                      OpStore %174 %177 
                                       f32_3 %178 = OpLoad %174 
                                       f32_3 %181 = OpFMul %178 %180 
                              Uniform f32_3* %183 = OpAccessChain %99 %110 
                                       f32_3 %184 = OpLoad %183 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpFAdd %181 %185 
                                                      OpStore %174 %186 
                                       f32_3 %189 = OpLoad %174 
                                       f32_3 %190 = OpLoad %174 
                                         f32 %191 = OpDot %189 %190 
                                                      OpStore %188 %191 
                                         f32 %192 = OpLoad %188 
                                         f32 %193 = OpExtInst %1 31 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                Uniform f32* %196 = OpAccessChain %99 %129 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %194 %197 
                                                      OpStore %188 %198 
                                       f32_3 %199 = OpLoad %94 
                                       f32_3 %200 = OpLoad %139 
                                       f32_3 %201 = OpFNegate %200 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore %174 %202 
                                       f32_3 %204 = OpLoad %174 
                                       f32_3 %205 = OpLoad %174 
                                         f32 %206 = OpDot %204 %205 
                                                      OpStore %203 %206 
                                         f32 %207 = OpLoad %203 
                                         f32 %208 = OpExtInst %1 31 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                Uniform f32* %211 = OpAccessChain %99 %101 %210 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %209 %212 
                                                      OpStore %203 %213 
                                         f32 %214 = OpLoad %203 
                                         f32 %215 = OpLoad %188 
                                         f32 %216 = OpFDiv %214 %215 
                                                      OpStore %188 %216 
                                         f32 %220 = OpLoad %188 
                                         f32 %222 = OpExtInst %1 40 %220 %221 
                                 Output f32* %224 = OpAccessChain %219 %110 
                                                      OpStore %224 %222 
                              Uniform f32_4* %225 = OpAccessChain %99 %100 %101 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                Input f32_4* %228 = OpAccessChain %30 %110 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 1 1 1 
                                       f32_3 %231 = OpFMul %227 %230 
                                                      OpStore %174 %231 
                              Uniform f32_4* %232 = OpAccessChain %99 %100 %110 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                Input f32_4* %235 = OpAccessChain %30 %110 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 0 0 
                                       f32_3 %238 = OpFMul %234 %237 
                                       f32_3 %239 = OpLoad %174 
                                       f32_3 %240 = OpFAdd %238 %239 
                                                      OpStore %174 %240 
                              Uniform f32_4* %241 = OpAccessChain %99 %100 %100 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                Input f32_4* %244 = OpAccessChain %30 %110 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 2 2 2 
                                       f32_3 %247 = OpFMul %243 %246 
                                       f32_3 %248 = OpLoad %174 
                                       f32_3 %249 = OpFAdd %247 %248 
                                                      OpStore %174 %249 
                              Uniform f32_4* %250 = OpAccessChain %99 %100 %129 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                Input f32_4* %253 = OpAccessChain %30 %110 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 3 3 3 
                                       f32_3 %256 = OpFMul %252 %255 
                                       f32_3 %257 = OpLoad %174 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore %174 %258 
                                       f32_3 %260 = OpLoad %139 
                                       f32_3 %261 = OpLoad %174 
                                       f32_3 %262 = OpFAdd %260 %261 
                                                      OpStore %259 %262 
                                       f32_3 %263 = OpLoad %139 
                                       f32_3 %264 = OpLoad %174 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_3 %266 = OpFAdd %263 %265 
                                                      OpStore %139 %266 
                                       f32_3 %267 = OpLoad %139 
                                       f32_3 %268 = OpLoad %139 
                                         f32 %269 = OpDot %267 %268 
                                                      OpStore %188 %269 
                                         f32 %270 = OpLoad %188 
                                         f32 %271 = OpExtInst %1 31 %270 
                                                      OpStore %188 %271 
                                         f32 %272 = OpLoad %188 
                                Uniform f32* %273 = OpAccessChain %99 %101 %210 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                                      OpStore %188 %275 
                                       f32_3 %276 = OpLoad %259 
                                       f32_3 %277 = OpFMul %276 %180 
                              Uniform f32_3* %278 = OpAccessChain %99 %110 
                                       f32_3 %279 = OpLoad %278 
                                       f32_3 %280 = OpFNegate %279 
                                       f32_3 %281 = OpFAdd %277 %280 
                                                      OpStore %139 %281 
                                       f32_3 %282 = OpLoad %139 
                                       f32_3 %283 = OpLoad %139 
                                         f32 %284 = OpDot %282 %283 
                                Private f32* %286 = OpAccessChain %139 %285 
                                                      OpStore %286 %284 
                                Private f32* %287 = OpAccessChain %139 %285 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 31 %288 
                                Private f32* %290 = OpAccessChain %139 %285 
                                                      OpStore %290 %289 
                                Private f32* %291 = OpAccessChain %139 %285 
                                         f32 %292 = OpLoad %291 
                                Uniform f32* %293 = OpAccessChain %99 %129 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFMul %292 %294 
                                Private f32* %296 = OpAccessChain %139 %285 
                                                      OpStore %296 %295 
                                         f32 %297 = OpLoad %188 
                                Private f32* %298 = OpAccessChain %139 %285 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFDiv %297 %299 
                                                      OpStore %188 %300 
                                         f32 %301 = OpLoad %188 
                                         f32 %302 = OpExtInst %1 40 %301 %221 
                                 Output f32* %303 = OpAccessChain %219 %101 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %94 
                                       f32_3 %305 = OpLoad %174 
                                       f32_3 %306 = OpFAdd %304 %305 
                                                      OpStore %139 %306 
                                       f32_3 %307 = OpLoad %94 
                                       f32_3 %308 = OpFNegate %307 
                                       f32_3 %309 = OpLoad %174 
                                       f32_3 %310 = OpFAdd %308 %309 
                                                      OpStore %94 %310 
                                       f32_3 %311 = OpLoad %94 
                                       f32_3 %312 = OpLoad %94 
                                         f32 %313 = OpDot %311 %312 
                                Private f32* %314 = OpAccessChain %94 %285 
                                                      OpStore %314 %313 
                                Private f32* %315 = OpAccessChain %94 %285 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpExtInst %1 31 %316 
                                Private f32* %318 = OpAccessChain %94 %285 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %94 %285 
                                         f32 %320 = OpLoad %319 
                                Uniform f32* %321 = OpAccessChain %99 %101 %210 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %320 %322 
                                Private f32* %324 = OpAccessChain %94 %285 
                                                      OpStore %324 %323 
                                       f32_3 %326 = OpLoad %139 
                                       f32_3 %327 = OpFMul %326 %180 
                              Uniform f32_3* %328 = OpAccessChain %99 %110 
                                       f32_3 %329 = OpLoad %328 
                                       f32_3 %330 = OpFNegate %329 
                                       f32_3 %331 = OpFAdd %327 %330 
                                                      OpStore %325 %331 
                                       f32_3 %332 = OpLoad %325 
                                       f32_3 %333 = OpLoad %325 
                                         f32 %334 = OpDot %332 %333 
                                Private f32* %335 = OpAccessChain %325 %285 
                                                      OpStore %335 %334 
                                Private f32* %336 = OpAccessChain %325 %285 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpExtInst %1 31 %337 
                                Private f32* %339 = OpAccessChain %325 %285 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %325 %285 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %99 %129 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFMul %341 %343 
                                Private f32* %345 = OpAccessChain %325 %285 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %94 %285 
                                         f32 %347 = OpLoad %346 
                                Private f32* %348 = OpAccessChain %325 %285 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFDiv %347 %349 
                                Private f32* %351 = OpAccessChain %94 %285 
                                                      OpStore %351 %350 
                                Private f32* %352 = OpAccessChain %94 %285 
                                         f32 %353 = OpLoad %352 
                                         f32 %354 = OpExtInst %1 40 %353 %221 
                                 Output f32* %355 = OpAccessChain %219 %100 
                                                      OpStore %355 %354 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %15 = OpFunction None %10 
                                Function i32* %14 = OpFunctionParameter 
                                              %16 = OpLabel 
                                 Output f32* %356 = OpAccessChain %219 %100 
                                         f32 %357 = OpLoad %356 
                                 Output f32* %358 = OpAccessChain %219 %100 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                Private f32* %361 = OpAccessChain %94 %285 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %94 %285 
                                         f32 %363 = OpLoad %362 
                                 Output f32* %364 = OpAccessChain %219 %100 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFAdd %363 %365 
                                Private f32* %367 = OpAccessChain %94 %285 
                                                      OpStore %367 %366 
                                Private f32* %372 = OpAccessChain %94 %285 
                                         f32 %373 = OpLoad %372 
                                         f32 %375 = OpFMul %373 %374 
                                 Output f32* %376 = OpAccessChain %371 %110 
                                                      OpStore %376 %375 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 349
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationEvaluation %4 "main" %12 %20 %138 %207 %235 %297 %336 %341 
                                                      OpExecutionMode %4 Triangles 
                                                      OpExecutionMode %4 SpacingFractionalOdd 
                                                      OpExecutionMode %4 VertexOrderCw 
                                                      OpDecorate %12 BuiltIn TessLevelInner 
                                                      OpDecorate %20 Location 20 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpMemberDecorate %60 0 Offset 60 
                                                      OpMemberDecorate %60 1 Offset 60 
                                                      OpMemberDecorate %60 2 Offset 60 
                                                      OpMemberDecorate %60 3 Offset 60 
                                                      OpMemberDecorate %60 4 Offset 60 
                                                      OpMemberDecorate %60 5 Offset 60 
                                                      OpMemberDecorate %60 6 Offset 60 
                                                      OpMemberDecorate %60 7 Offset 60 
                                                      OpMemberDecorate %60 8 Offset 60 
                                                      OpDecorate %60 Block 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpDecorate %96 DescriptorSet 96 
                                                      OpDecorate %96 Binding 96 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate %110 DescriptorSet 110 
                                                      OpDecorate %110 Binding 110 
                                                      OpDecorate %112 DescriptorSet 112 
                                                      OpDecorate %112 Binding 112 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %207 Location 207 
                                                      OpDecorate %235 Location 235 
                                                      OpDecorate %297 Location 297 
                                                      OpMemberDecorate %334 0 BuiltIn 334 
                                                      OpMemberDecorate %334 1 BuiltIn 334 
                                                      OpMemberDecorate %334 2 BuiltIn 334 
                                                      OpDecorate %334 Block 
                                                      OpDecorate %341 Location 341 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 32 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypePointer Input %18 
                             Input f32_4[32]* %20 = OpVariable Input 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Input %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %42 = OpConstant 2 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                              %60 = OpTypeStruct %7 %57 %58 %59 %6 %6 %7 %6 %6 
                                              %61 = OpTypePointer Uniform %60 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32; f32;}* %62 = OpVariable Uniform 
                                          i32 %63 = OpConstant 6 
                                              %64 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 4 
                                              %79 = OpTypePointer Uniform %6 
                                          i32 %82 = OpConstant 5 
                                              %92 = OpTypePointer Private %6 
                                 Private f32* %93 = OpVariable Private 
                                              %94 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %95 = OpTypePointer UniformConstant %94 
         UniformConstant read_only Texture2D* %96 = OpVariable UniformConstant 
                                              %98 = OpTypeSampler 
                                              %99 = OpTypePointer UniformConstant %98 
                    UniformConstant sampler* %100 = OpVariable UniformConstant 
                                             %102 = OpTypeSampledImage %94 
                                         f32 %106 = OpConstant 3.674022E-40 
                                         u32 %108 = OpConstant 0 
        UniformConstant read_only Texture2D* %110 = OpVariable UniformConstant 
                    UniformConstant sampler* %112 = OpVariable UniformConstant 
                              Private f32_4* %133 = OpVariable Private 
                                             %136 = OpTypeArray %10 %17 
                                             %137 = OpTypePointer Input %136 
                            Input f32_3[32]* %138 = OpVariable Input 
                              Private f32_4* %164 = OpVariable Private 
                                         u32 %178 = OpConstant 2 
                                         u32 %186 = OpConstant 1 
                                Private f32* %188 = OpVariable Private 
                                         i32 %201 = OpConstant 7 
                                             %206 = OpTypePointer Output %10 
                               Output f32_3* %207 = OpVariable Output 
                                         f32 %221 = OpConstant 3.674022E-40 
                            Input f32_4[32]* %235 = OpVariable Input 
                                         i32 %255 = OpConstant 8 
                                         i32 %293 = OpConstant 3 
                               Output f32_3* %297 = OpVariable Output 
                                             %333 = OpTypeArray %6 %186 
                                             %334 = OpTypeStruct %7 %6 %333 
                                             %335 = OpTypePointer Output %334 
        Output struct {f32_4; f32; f32[1];}* %336 = OpVariable Output 
                                             %338 = OpTypePointer Output %7 
                                             %340 = OpTypePointer Output %6 
                                 Output f32* %341 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 1 1 
                                 Input f32_4* %24 = OpAccessChain %20 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                                        f32_2 %27 = OpFMul %15 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                                 Input f32_4* %31 = OpAccessChain %20 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_3 %34 = OpLoad %12 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 0 
                                        f32_2 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                                        f32_2 %39 = OpFAdd %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                 Input f32_4* %43 = OpAccessChain %20 %42 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_3 %46 = OpLoad %12 
                                        f32_2 %47 = OpVectorShuffle %46 %46 2 2 
                                        f32_2 %48 = OpFMul %45 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                                        f32_2 %51 = OpFAdd %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               Uniform f32_4* %65 = OpAccessChain %62 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_2 %67 = OpVectorShuffle %66 %66 0 1 
                                        f32_2 %68 = OpFMul %55 %67 
                               Uniform f32_4* %69 = OpAccessChain %62 %63 
                                        f32_4 %70 = OpLoad %69 
                                        f32_2 %71 = OpVectorShuffle %70 %70 2 3 
                                        f32_2 %72 = OpFAdd %68 %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %72 4 5 2 3 
                                                      OpStore %9 %74 
                               Uniform f32_4* %75 = OpAccessChain %62 %30 
                                        f32_4 %76 = OpLoad %75 
                                        f32_2 %77 = OpVectorShuffle %76 %76 1 1 
                                 Uniform f32* %80 = OpAccessChain %62 %78 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %83 = OpAccessChain %62 %82 
                                          f32 %84 = OpLoad %83 
                                        f32_2 %85 = OpCompositeConstruct %81 %84 
                                        f32_2 %86 = OpFMul %77 %85 
                                        f32_4 %87 = OpLoad %9 
                                        f32_2 %88 = OpVectorShuffle %87 %87 0 1 
                                        f32_2 %89 = OpFAdd %86 %88 
                                        f32_4 %90 = OpLoad %9 
                                        f32_4 %91 = OpVectorShuffle %90 %89 4 5 2 3 
                                                      OpStore %9 %91 
                          read_only Texture2D %97 = OpLoad %96 
                                     sampler %101 = OpLoad %100 
                  read_only Texture2DSampled %103 = OpSampledImage %97 %101 
                                       f32_4 %104 = OpLoad %9 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_4 %107 = OpImageSampleExplicitLod %103 %105 Lod %7 
                                         f32 %109 = OpCompositeExtract %107 0 
                                                      OpStore %93 %109 
                         read_only Texture2D %111 = OpLoad %110 
                                     sampler %113 = OpLoad %112 
                  read_only Texture2DSampled %114 = OpSampledImage %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
                                       f32_4 %117 = OpImageSampleExplicitLod %114 %116 Lod %7 
                                         f32 %118 = OpCompositeExtract %117 0 
                                Private f32* %119 = OpAccessChain %9 %108 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %9 %108 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpLoad %93 
                                         f32 %123 = OpFMul %121 %122 
                                Private f32* %124 = OpAccessChain %9 %108 
                                                      OpStore %124 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 0 0 
                              Uniform f32_4* %127 = OpAccessChain %62 %42 %22 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpFMul %126 %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 6 3 
                                                      OpStore %9 %132 
                                       f32_3 %134 = OpLoad %12 
                                       f32_3 %135 = OpVectorShuffle %134 %134 1 1 1 
                                Input f32_3* %139 = OpAccessChain %138 %22 
                                       f32_3 %140 = OpLoad %139 
                                       f32_3 %141 = OpFMul %135 %140 
                                       f32_4 %142 = OpLoad %133 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %133 %143 
                                Input f32_3* %144 = OpAccessChain %138 %30 
                                       f32_3 %145 = OpLoad %144 
                                       f32_3 %146 = OpLoad %12 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 0 0 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %133 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFAdd %148 %150 
                                       f32_4 %152 = OpLoad %133 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %133 %153 
                                Input f32_3* %154 = OpAccessChain %138 %42 
                                       f32_3 %155 = OpLoad %154 
                                       f32_3 %156 = OpLoad %12 
                                       f32_3 %157 = OpVectorShuffle %156 %156 2 2 2 
                                       f32_3 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %133 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %158 %160 
                                       f32_4 %162 = OpLoad %133 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %133 %163 
                                       f32_4 %165 = OpLoad %133 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                              Uniform f32_4* %167 = OpAccessChain %62 %42 %30 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                         f32 %170 = OpDot %166 %169 
                                Private f32* %171 = OpAccessChain %164 %108 
                                                      OpStore %171 %170 
                                       f32_4 %172 = OpLoad %133 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                              Uniform f32_4* %174 = OpAccessChain %62 %42 %42 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                         f32 %177 = OpDot %173 %176 
                                Private f32* %179 = OpAccessChain %164 %178 
                                                      OpStore %179 %177 
                                       f32_4 %180 = OpLoad %133 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                              Uniform f32_4* %182 = OpAccessChain %62 %42 %22 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %181 %184 
                                Private f32* %187 = OpAccessChain %164 %186 
                                                      OpStore %187 %185 
                                       f32_4 %189 = OpLoad %164 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %164 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                         f32 %195 = OpExtInst %1 32 %194 
                                                      OpStore %188 %195 
                                Private f32* %196 = OpAccessChain %164 %186 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFNegate %197 
                                         f32 %199 = OpLoad %188 
                                         f32 %200 = OpFMul %198 %199 
                                Uniform f32* %202 = OpAccessChain %62 %201 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpFAdd %200 %203 
                                Private f32* %205 = OpAccessChain %133 %108 
                                                      OpStore %205 %204 
                                         f32 %208 = OpLoad %188 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_4 %210 = OpLoad %164 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpFMul %209 %211 
                                                      OpStore %207 %212 
                                Private f32* %213 = OpAccessChain %133 %108 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpExtInst %1 4 %214 
                                Uniform f32* %216 = OpAccessChain %62 %201 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFNegate %217 
                                         f32 %219 = OpFAdd %215 %218 
                                                      OpStore %188 %219 
                                         f32 %220 = OpLoad %188 
                                         f32 %222 = OpExtInst %1 43 %220 %106 %221 
                                                      OpStore %188 %222 
                                         f32 %223 = OpLoad %188 
                                         f32 %224 = OpFNegate %223 
                                         f32 %225 = OpFAdd %224 %221 
                                                      OpStore %188 %225 
                                       f32_4 %226 = OpLoad %9 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                         f32 %228 = OpLoad %188 
                                       f32_3 %229 = OpCompositeConstruct %228 %228 %228 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_4 %231 = OpLoad %9 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %9 %232 
                                       f32_3 %233 = OpLoad %12 
                                       f32_4 %234 = OpVectorShuffle %233 %233 1 1 1 1 
                                Input f32_4* %236 = OpAccessChain %235 %22 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpFMul %234 %237 
                                                      OpStore %133 %238 
                                Input f32_4* %239 = OpAccessChain %235 %30 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpLoad %12 
                                       f32_4 %242 = OpVectorShuffle %241 %241 0 0 0 0 
                                       f32_4 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %133 
                                       f32_4 %245 = OpFAdd %243 %244 
                                                      OpStore %133 %245 
                                Input f32_4* %246 = OpAccessChain %235 %42 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpLoad %12 
                                       f32_4 %249 = OpVectorShuffle %248 %248 2 2 2 2 
                                       f32_4 %250 = OpFMul %247 %249 
                                       f32_4 %251 = OpLoad %133 
                                       f32_4 %252 = OpFAdd %250 %251 
                                                      OpStore %133 %252 
                                       f32_4 %253 = OpLoad %9 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                Uniform f32* %256 = OpAccessChain %62 %255 
                                         f32 %257 = OpLoad %256 
                                Uniform f32* %258 = OpAccessChain %62 %255 
                                         f32 %259 = OpLoad %258 
                                Uniform f32* %260 = OpAccessChain %62 %255 
                                         f32 %261 = OpLoad %260 
                                       f32_3 %262 = OpCompositeConstruct %257 %259 %261 
                                         f32 %263 = OpCompositeExtract %262 0 
                                         f32 %264 = OpCompositeExtract %262 1 
                                         f32 %265 = OpCompositeExtract %262 2 
                                       f32_3 %266 = OpCompositeConstruct %263 %264 %265 
                                       f32_3 %267 = OpFMul %254 %266 
                                       f32_4 %268 = OpLoad %133 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFAdd %267 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_4 %274 = OpVectorShuffle %273 %273 1 1 1 1 
                              Uniform f32_4* %275 = OpAccessChain %62 %22 %22 
                                       f32_4 %276 = OpLoad %275 
                                       f32_4 %277 = OpFMul %274 %276 
                                                      OpStore %164 %277 
                              Uniform f32_4* %278 = OpAccessChain %62 %22 %30 
                                       f32_4 %279 = OpLoad %278 
                                       f32_4 %280 = OpLoad %9 
                                       f32_4 %281 = OpVectorShuffle %280 %280 0 0 0 0 
                                       f32_4 %282 = OpFMul %279 %281 
                                       f32_4 %283 = OpLoad %164 
                                       f32_4 %284 = OpFAdd %282 %283 
                                                      OpStore %164 %284 
                              Uniform f32_4* %285 = OpAccessChain %62 %22 %42 
                                       f32_4 %286 = OpLoad %285 
                                       f32_4 %287 = OpLoad %9 
                                       f32_4 %288 = OpVectorShuffle %287 %287 2 2 2 2 
                                       f32_4 %289 = OpFMul %286 %288 
                                       f32_4 %290 = OpLoad %164 
                                       f32_4 %291 = OpFAdd %289 %290 
                                                      OpStore %9 %291 
                                       f32_4 %292 = OpLoad %9 
                              Uniform f32_4* %294 = OpAccessChain %62 %22 %293 
                                       f32_4 %295 = OpLoad %294 
                                       f32_4 %296 = OpFAdd %292 %295 
                                                      OpStore %164 %296 
                              Uniform f32_4* %298 = OpAccessChain %62 %22 %293 
                                       f32_4 %299 = OpLoad %298 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_4 %301 = OpLoad %133 
                                       f32_3 %302 = OpVectorShuffle %301 %301 3 3 3 
                                       f32_3 %303 = OpFMul %300 %302 
                                       f32_4 %304 = OpLoad %9 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_3 %306 = OpFAdd %303 %305 
                                                      OpStore %297 %306 
                                       f32_4 %307 = OpLoad %164 
                                       f32_4 %308 = OpVectorShuffle %307 %307 1 1 1 1 
                              Uniform f32_4* %309 = OpAccessChain %62 %293 %22 
                                       f32_4 %310 = OpLoad %309 
                                       f32_4 %311 = OpFMul %308 %310 
                                                      OpStore %9 %311 
                              Uniform f32_4* %312 = OpAccessChain %62 %293 %30 
                                       f32_4 %313 = OpLoad %312 
                                       f32_4 %314 = OpLoad %164 
                                       f32_4 %315 = OpVectorShuffle %314 %314 0 0 0 0 
                                       f32_4 %316 = OpFMul %313 %315 
                                       f32_4 %317 = OpLoad %9 
                                       f32_4 %318 = OpFAdd %316 %317 
                                                      OpStore %9 %318 
                              Uniform f32_4* %319 = OpAccessChain %62 %293 %42 
                                       f32_4 %320 = OpLoad %319 
                                       f32_4 %321 = OpLoad %164 
                                       f32_4 %322 = OpVectorShuffle %321 %321 2 2 2 2 
                                       f32_4 %323 = OpFMul %320 %322 
                                       f32_4 %324 = OpLoad %9 
                                       f32_4 %325 = OpFAdd %323 %324 
                                                      OpStore %9 %325 
                              Uniform f32_4* %326 = OpAccessChain %62 %293 %293 
                                       f32_4 %327 = OpLoad %326 
                                       f32_4 %328 = OpLoad %164 
                                       f32_4 %329 = OpVectorShuffle %328 %328 3 3 3 3 
                                       f32_4 %330 = OpFMul %327 %329 
                                       f32_4 %331 = OpLoad %9 
                                       f32_4 %332 = OpFAdd %330 %331 
                                                      OpStore %9 %332 
                                       f32_4 %337 = OpLoad %9 
                               Output f32_4* %339 = OpAccessChain %336 %30 
                                                      OpStore %339 %337 
                                Private f32* %342 = OpAccessChain %9 %178 
                                         f32 %343 = OpLoad %342 
                                                      OpStore %341 %343 
                                 Output f32* %344 = OpAccessChain %336 %30 %186 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFNegate %345 
                                 Output f32* %347 = OpAccessChain %336 %30 %186 
                                                      OpStore %347 %346 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "SPOT" }
"#ifdef VERTEX
#version 410
#extension GL_ARB_explicit_attrib_location : require

in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
in  vec4 in_TEXCOORD3;
in  vec4 in_COLOR0;
layout(location = 0) out vec4 vs_INTERNALTESSPOS0;
layout(location = 1) out vec4 vs_TANGENT0;
layout(location = 2) out vec3 vs_NORMAL0;
layout(location = 3) out vec4 vs_TEXCOORD0;
layout(location = 4) out vec4 vs_TEXCOORD1;
layout(location = 5) out vec4 vs_TEXCOORD2;
layout(location = 6) out vec4 vs_TEXCOORD3;
layout(location = 7) out vec4 vs_COLOR0;
void main()
{
    vs_INTERNALTESSPOS0 = in_POSITION0;
    vs_TANGENT0 = in_TANGENT0;
    vs_NORMAL0.xyz = in_NORMAL0.xyz;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD3;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Y_Mask;
uniform 	float _FresnelBias;
uniform 	float _FresnelScale;
uniform 	float _FresnelPower;
uniform 	float _Alpha;
UNITY_LOCATION(0) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
layout(location = 0) in  vec3 ds_TEXCOORD0;
layout(location = 1) in  float ds_TEXCOORD3;
layout(location = 2) in  vec3 ds_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
float u_xlat6;
float u_xlat9;
float u_xlat10;
bool u_xlatb10;
void main()
{
    u_xlat0.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.xyz = (-ds_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = max(u_xlat9, 0.00100000005);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat10 = u_xlat9 * u_xlat9;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat9 = u_xlat9 * u_xlat10;
    u_xlat9 = u_xlat9 * 0.959999979 + 0.0399999991;
    u_xlat10 = dot(ds_TEXCOORD0.xyz, ds_TEXCOORD0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat2.xyz = vec3(u_xlat10) * ds_TEXCOORD0.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat3.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat6 = abs(u_xlat0.x) + u_xlat3.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = _FresnelScale * u_xlat0.x + _FresnelBias;
    u_xlat6 = u_xlat6 + 9.99999975e-06;
    u_xlat6 = 0.5 / u_xlat6;
    u_xlat6 = u_xlat6 * 0.999999881;
    u_xlat3.x = u_xlat3.x * u_xlat6;
    u_xlat1 = ds_TEXCOORD1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * ds_TEXCOORD1.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * ds_TEXCOORD1.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat6 = texture(_LightTexture0, u_xlat2.xy).w;
    u_xlatb10 = 0.0<u_xlat1.z;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = texture(_LightTextureB0, u_xlat1.xx).x;
    u_xlat4 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat6 = u_xlat6 * u_xlat4;
    u_xlat6 = u_xlat1.x * u_xlat6;
    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat1.x = ds_TEXCOORD3 * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xxx;
    u_xlat3.x = (-ds_TEXCOORD0.y) + _Y_Mask;
    u_xlat3.x = abs(u_xlat3.x) + (-_Y_Mask);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    SV_Target0.w = u_xlat0.x * _Alpha;
    return;
}

#endif
#ifdef HULL
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(vertices=3) out;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	float _EdgeLength;
layout(location = 0) in vec4 vs_INTERNALTESSPOS0[];
layout(location = 0) out vec4 hs_INTERNALTESSPOS0[];
layout(location = 1) in vec4 vs_TANGENT0[];
layout(location = 1) out vec4 hs_TANGENT0[];
layout(location = 2) in vec3 vs_NORMAL0[];
layout(location = 2) out vec3 hs_NORMAL0[];
layout(location = 3) in vec4 vs_TEXCOORD0[];
layout(location = 3) out vec4 hs_TEXCOORD0[];
layout(location = 4) in vec4 vs_TEXCOORD1[];
layout(location = 4) out vec4 hs_TEXCOORD1[];
layout(location = 5) in vec4 vs_TEXCOORD2[];
layout(location = 5) out vec4 hs_TEXCOORD2[];
layout(location = 6) in vec4 vs_TEXCOORD3[];
layout(location = 6) out vec4 hs_TEXCOORD3[];
layout(location = 7) in vec4 vs_COLOR0[];
layout(location = 7) out vec4 hs_COLOR0[];
void passthrough_ctrl_points()
{
    hs_INTERNALTESSPOS0[gl_InvocationID] = vs_INTERNALTESSPOS0[gl_InvocationID];
    hs_TANGENT0[gl_InvocationID] = vs_TANGENT0[gl_InvocationID];
    hs_NORMAL0[gl_InvocationID] = vs_NORMAL0[gl_InvocationID];
    hs_TEXCOORD0[gl_InvocationID] = vs_TEXCOORD0[gl_InvocationID];
    hs_TEXCOORD1[gl_InvocationID] = vs_TEXCOORD1[gl_InvocationID];
    hs_TEXCOORD2[gl_InvocationID] = vs_TEXCOORD2[gl_InvocationID];
    hs_TEXCOORD3[gl_InvocationID] = vs_TEXCOORD3[gl_InvocationID];
    hs_COLOR0[gl_InvocationID] = vs_COLOR0[gl_InvocationID];
}
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
float u_xlat13;
void fork_phase2(int phaseInstanceID)
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[1].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[1].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[2].www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _EdgeLength;
    u_xlat2.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _ScreenParams.y;
    u_xlat12 = u_xlat13 / u_xlat12;
    gl_TessLevelOuter[0] = max(u_xlat12, 1.0);
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * vs_INTERNALTESSPOS0[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * vs_INTERNALTESSPOS0[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * vs_INTERNALTESSPOS0[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * vs_INTERNALTESSPOS0[0].www + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * _ScreenParams.y;
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _EdgeLength;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    gl_TessLevelOuter[1] = max(u_xlat12, 1.0);
    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _ScreenParams.y;
    u_xlat4.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _EdgeLength;
    u_xlat0.x = u_xlat0.x / u_xlat4.x;
    gl_TessLevelOuter[2] = max(u_xlat0.x, 1.0);
}
void join_phase3(int phaseInstanceID)
{
    u_xlat0.x = gl_TessLevelOuter[2] + gl_TessLevelOuter[2];
    u_xlat0.x = u_xlat0.x + gl_TessLevelOuter[2];
    gl_TessLevelInner[0] = u_xlat0.x * 0.333333343;
}
void main()
{
    passthrough_ctrl_points();
    barrier();
    if (gl_InvocationID == 0)
    {
        fork_phase2(0);
        join_phase3(0);
    }
}

#endif
#ifdef DOMAIN
#version 410
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
layout(ccw) in;
layout(fractional_odd_spacing) in;
layout(triangles) in;
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _u;
uniform 	float _v;
uniform 	vec4 _Flamenoise_ST;
uniform 	float _Y_Mask;
uniform 	float _FlameHeight;
UNITY_LOCATION(2) uniform  sampler2D _FlameWave;
UNITY_LOCATION(3) uniform  sampler2D _Flamenoise;
layout(location = 0) in  vec4 hs_INTERNALTESSPOS0 [];
layout(location = 2) in  vec3 hs_NORMAL0 [];
layout(location = 3) in  vec4 hs_TEXCOORD0 [];
layout(location = 0) out vec3 ds_TEXCOORD0;
layout(location = 1) out float ds_TEXCOORD3;
layout(location = 2) out vec3 ds_TEXCOORD1;
layout(location = 3) out vec4 ds_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = gl_TessCoord.yy * hs_TEXCOORD0[1].xy;
    u_xlat0.xy = hs_TEXCOORD0[0].xy * gl_TessCoord.xx + u_xlat0.xy;
    u_xlat0.xy = hs_TEXCOORD0[2].xy * gl_TessCoord.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _Flamenoise_ST.xy + _Flamenoise_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_u, _v) + u_xlat0.xy;
    u_xlat8 = textureLod(_FlameWave, u_xlat0.xy, 0.0).x;
    u_xlat0.x = textureLod(_Flamenoise, u_xlat0.xy, 0.0).x;
    u_xlat0.x = u_xlat0.x * u_xlat8;
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat1.xyz = gl_TessCoord.yyy * hs_NORMAL0[1].xyz;
    u_xlat1.xyz = hs_NORMAL0[0].xyz * gl_TessCoord.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hs_NORMAL0[2].xyz * gl_TessCoord.zzz + u_xlat1.xyz;
    u_xlat2.x = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat2.y = dot(u_xlat1.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.x = (-u_xlat2.y) * u_xlat12 + _Y_Mask;
    ds_TEXCOORD0.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = abs(u_xlat1.x) + (-_Y_Mask);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
    u_xlat1 = gl_TessCoord.yyyy * hs_INTERNALTESSPOS0[1];
    u_xlat1 = hs_INTERNALTESSPOS0[0] * gl_TessCoord.xxxx + u_xlat1;
    u_xlat1 = hs_INTERNALTESSPOS0[2] * gl_TessCoord.zzzz + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_FlameHeight, _FlameHeight, _FlameHeight)) + u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    ds_TEXCOORD3 = u_xlat2.z;
    ds_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    ds_TEXCOORD2 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 38
; Schema: 0
                               OpCapability Shader 
                        %1 = OpExtInstImport "GLSL.std.450" 
                               OpMemoryModel Logical GLSL450 
                               OpEntryPoint Vertex %4 "main" %9 %11 %13 %14 %18 %20 %22 %23 %25 %26 %28 %29 %31 %32 %34 %35 
                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                               OpDecorate %9 Location 9 
                               OpDecorate %11 Location 11 
                               OpDecorate %13 Location 13 
                               OpDecorate %14 Location 14 
                               OpDecorate %18 Location 18 
                               OpDecorate %20 Location 20 
                               OpDecorate vs_TEXCOORD0 Location 22 
                               OpDecorate %23 Location 23 
                               OpDecorate vs_TEXCOORD1 Location 25 
                               OpDecorate %26 Location 26 
                               OpDecorate vs_TEXCOORD2 Location 28 
                               OpDecorate %29 Location 29 
                               OpDecorate vs_TEXCOORD3 Location 31 
                               OpDecorate %32 Location 32 
                               OpDecorate %34 Location 34 
                               OpDecorate %35 Location 35 
                        %2 = OpTypeVoid 
                        %3 = OpTypeFunction %2 
                        %6 = OpTypeFloat 32 
                        %7 = OpTypeVector %6 4 
                        %8 = OpTypePointer Output %7 
          Output f32_4* %9 = OpVariable Output 
                       %10 = OpTypePointer Input %7 
          Input f32_4* %11 = OpVariable Input 
         Output f32_4* %13 = OpVariable Output 
          Input f32_4* %14 = OpVariable Input 
                       %16 = OpTypeVector %6 3 
                       %17 = OpTypePointer Output %16 
         Output f32_3* %18 = OpVariable Output 
                       %19 = OpTypePointer Input %16 
          Input f32_3* %20 = OpVariable Input 
Output f32_4* vs_TEXCOORD0 = OpVariable Output 
          Input f32_4* %23 = OpVariable Input 
Output f32_4* vs_TEXCOORD1 = OpVariable Output 
          Input f32_4* %26 = OpVariable Input 
Output f32_4* vs_TEXCOORD2 = OpVariable Output 
          Input f32_4* %29 = OpVariable Input 
Output f32_4* vs_TEXCOORD3 = OpVariable Output 
          Input f32_4* %32 = OpVariable Input 
         Output f32_4* %34 = OpVariable Output 
          Input f32_4* %35 = OpVariable Input 
                   void %4 = OpFunction None %3 
                        %5 = OpLabel 
                 f32_4 %12 = OpLoad %11 
                               OpStore %9 %12 
                 f32_4 %15 = OpLoad %14 
                               OpStore %13 %15 
                 f32_3 %21 = OpLoad %20 
                               OpStore %18 %21 
                 f32_4 %24 = OpLoad %23 
                               OpStore vs_TEXCOORD0 %24 
                 f32_4 %27 = OpLoad %26 
                               OpStore vs_TEXCOORD1 %27 
                 f32_4 %30 = OpLoad %29 
                               OpStore vs_TEXCOORD2 %30 
                 f32_4 %33 = OpLoad %32 
                               OpStore vs_TEXCOORD3 %33 
                 f32_4 %36 = OpLoad %35 
                               OpStore %34 %36 
                               OpReturn
                               OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 383
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %110 %300 %336 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpMemberDecorate %18 10 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %232 DescriptorSet 232 
                                                      OpDecorate %232 Binding 232 
                                                      OpDecorate %236 DescriptorSet 236 
                                                      OpDecorate %236 Binding 236 
                                                      OpDecorate %258 DescriptorSet 258 
                                                      OpDecorate %258 Binding 258 
                                                      OpDecorate %260 DescriptorSet 260 
                                                      OpDecorate %260 Binding 260 
                                                      OpDecorate %300 Location 300 
                                                      OpDecorate %336 Location 336 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %7 %14 %14 %14 %14 %17 %6 %6 %6 %6 %6 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32; f32; f32; f32; f32;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %7 
                                              %27 = OpTypePointer Private %6 
                                 Private f32* %28 = OpVariable Private 
                                              %38 = OpTypePointer Private %14 
                               Private f32_4* %39 = OpVariable Private 
                                          i32 %42 = OpConstant 2 
                                              %43 = OpTypePointer Uniform %14 
                               Private f32_3* %57 = OpVariable Private 
                                          f32 %76 = OpConstant 3.674022E-40 
                                          f32 %89 = OpConstant 3.674022E-40 
                                          f32 %90 = OpConstant 3.674022E-40 
                                 Private f32* %95 = OpVariable Private 
                                         f32 %106 = OpConstant 3.674022E-40 
                                         f32 %108 = OpConstant 3.674022E-40 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %123 = OpConstant 0 
                              Private f32_3* %125 = OpVariable Private 
                                Private f32* %135 = OpVariable Private 
                                         i32 %153 = OpConstant 9 
                                             %154 = OpTypePointer Uniform %6 
                                         i32 %163 = OpConstant 8 
                                         i32 %169 = OpConstant 7 
                                         f32 %175 = OpConstant 3.674022E-40 
                                         f32 %177 = OpConstant 3.674022E-40 
                                         f32 %187 = OpConstant 3.674022E-40 
                                         i32 %192 = OpConstant 5 
                                         i32 %193 = OpConstant 1 
                                         i32 %212 = OpConstant 3 
                                             %216 = OpTypeVector %6 2 
                                       f32_2 %226 = OpConstantComposite %177 %177 
                                             %230 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %231 = OpTypePointer UniformConstant %230 
        UniformConstant read_only Texture2D* %232 = OpVariable UniformConstant 
                                             %234 = OpTypeSampler 
                                             %235 = OpTypePointer UniformConstant %234 
                    UniformConstant sampler* %236 = OpVariable UniformConstant 
                                             %238 = OpTypeSampledImage %230 
                                         u32 %243 = OpConstant 3 
                                             %245 = OpTypeBool 
                                             %246 = OpTypePointer Private %245 
                               Private bool* %247 = OpVariable Private 
                                         u32 %248 = OpConstant 2 
        UniformConstant read_only Texture2D* %258 = OpVariable UniformConstant 
                    UniformConstant sampler* %260 = OpVariable UniformConstant 
                                Private f32* %268 = OpVariable Private 
                                         i32 %280 = OpConstant 4 
                                             %299 = OpTypePointer Input %6 
                                  Input f32* %300 = OpVariable Input 
                                         u32 %302 = OpConstant 1 
                                             %335 = OpTypePointer Output %14 
                               Output f32_4* %336 = OpVariable Output 
                                         i32 %346 = OpConstant 6 
                                         i32 %376 = OpConstant 10 
                                             %380 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad %11 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %13 %25 
                                                      OpStore %9 %26 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpLoad %9 
                                          f32 %31 = OpDot %29 %30 
                                                      OpStore %28 %31 
                                          f32 %32 = OpLoad %28 
                                          f32 %33 = OpExtInst %1 32 %32 
                                                      OpStore %28 %33 
                                          f32 %34 = OpLoad %28 
                                        f32_3 %35 = OpCompositeConstruct %34 %34 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpFMul %35 %36 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %11 
                                        f32_3 %41 = OpFNegate %40 
                               Uniform f32_4* %44 = OpAccessChain %20 %42 
                                        f32_4 %45 = OpLoad %44 
                                        f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
                                        f32_3 %47 = OpFAdd %41 %46 
                                        f32_4 %48 = OpLoad %39 
                                        f32_4 %49 = OpVectorShuffle %48 %47 4 5 6 3 
                                                      OpStore %39 %49 
                                        f32_4 %50 = OpLoad %39 
                                        f32_3 %51 = OpVectorShuffle %50 %50 0 1 2 
                                        f32_4 %52 = OpLoad %39 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                          f32 %54 = OpDot %51 %53 
                                                      OpStore %28 %54 
                                          f32 %55 = OpLoad %28 
                                          f32 %56 = OpExtInst %1 32 %55 
                                                      OpStore %28 %56 
                                        f32_4 %58 = OpLoad %39 
                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
                                          f32 %60 = OpLoad %28 
                                        f32_3 %61 = OpCompositeConstruct %60 %60 %60 
                                        f32_3 %62 = OpFMul %59 %61 
                                        f32_3 %63 = OpLoad %9 
                                        f32_3 %64 = OpFAdd %62 %63 
                                                      OpStore %57 %64 
                                          f32 %65 = OpLoad %28 
                                        f32_3 %66 = OpCompositeConstruct %65 %65 %65 
                                        f32_4 %67 = OpLoad %39 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_3 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %39 
                                        f32_4 %71 = OpVectorShuffle %70 %69 4 5 6 3 
                                                      OpStore %39 %71 
                                        f32_3 %72 = OpLoad %57 
                                        f32_3 %73 = OpLoad %57 
                                          f32 %74 = OpDot %72 %73 
                                                      OpStore %28 %74 
                                          f32 %75 = OpLoad %28 
                                          f32 %77 = OpExtInst %1 40 %75 %76 
                                                      OpStore %28 %77 
                                          f32 %78 = OpLoad %28 
                                          f32 %79 = OpExtInst %1 32 %78 
                                                      OpStore %28 %79 
                                          f32 %80 = OpLoad %28 
                                        f32_3 %81 = OpCompositeConstruct %80 %80 %80 
                                        f32_3 %82 = OpLoad %57 
                                        f32_3 %83 = OpFMul %81 %82 
                                                      OpStore %57 %83 
                                        f32_4 %84 = OpLoad %39 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpLoad %57 
                                          f32 %87 = OpDot %85 %86 
                                                      OpStore %28 %87 
                                          f32 %88 = OpLoad %28 
                                          f32 %91 = OpExtInst %1 43 %88 %89 %90 
                                                      OpStore %28 %91 
                                          f32 %92 = OpLoad %28 
                                          f32 %93 = OpFNegate %92 
                                          f32 %94 = OpFAdd %93 %90 
                                                      OpStore %28 %94 
                                          f32 %96 = OpLoad %28 
                                          f32 %97 = OpLoad %28 
                                          f32 %98 = OpFMul %96 %97 
                                                      OpStore %95 %98 
                                          f32 %99 = OpLoad %95 
                                         f32 %100 = OpLoad %95 
                                         f32 %101 = OpFMul %99 %100 
                                                      OpStore %95 %101 
                                         f32 %102 = OpLoad %28 
                                         f32 %103 = OpLoad %95 
                                         f32 %104 = OpFMul %102 %103 
                                                      OpStore %28 %104 
                                         f32 %105 = OpLoad %28 
                                         f32 %107 = OpFMul %105 %106 
                                         f32 %109 = OpFAdd %107 %108 
                                                      OpStore %28 %109 
                                       f32_3 %111 = OpLoad %110 
                                       f32_3 %112 = OpLoad %110 
                                         f32 %113 = OpDot %111 %112 
                                                      OpStore %95 %113 
                                         f32 %114 = OpLoad %95 
                                         f32 %115 = OpExtInst %1 32 %114 
                                                      OpStore %95 %115 
                                         f32 %116 = OpLoad %95 
                                       f32_3 %117 = OpCompositeConstruct %116 %116 %116 
                                       f32_3 %118 = OpLoad %110 
                                       f32_3 %119 = OpFMul %117 %118 
                                                      OpStore %57 %119 
                                       f32_3 %120 = OpLoad %57 
                                       f32_3 %121 = OpLoad %9 
                                         f32 %122 = OpDot %120 %121 
                                Private f32* %124 = OpAccessChain %9 %123 
                                                      OpStore %124 %122 
                                       f32_3 %126 = OpLoad %57 
                                       f32_4 %127 = OpLoad %39 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %126 %128 
                                Private f32* %130 = OpAccessChain %125 %123 
                                                      OpStore %130 %129 
                                Private f32* %131 = OpAccessChain %125 %123 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpExtInst %1 43 %132 %89 %90 
                                Private f32* %134 = OpAccessChain %125 %123 
                                                      OpStore %134 %133 
                                Private f32* %136 = OpAccessChain %9 %123 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpExtInst %1 4 %137 
                                Private f32* %139 = OpAccessChain %125 %123 
                                         f32 %140 = OpLoad %139 
                                         f32 %141 = OpFAdd %138 %140 
                                                      OpStore %135 %141 
                                Private f32* %142 = OpAccessChain %9 %123 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpFNegate %143 
                                         f32 %145 = OpFAdd %144 %90 
                                Private f32* %146 = OpAccessChain %9 %123 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %9 %123 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpExtInst %1 30 %148 
                                Private f32* %150 = OpAccessChain %9 %123 
                                                      OpStore %150 %149 
                                Private f32* %151 = OpAccessChain %9 %123 
                                         f32 %152 = OpLoad %151 
                                Uniform f32* %155 = OpAccessChain %20 %153 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFMul %152 %156 
                                Private f32* %158 = OpAccessChain %9 %123 
                                                      OpStore %158 %157 
                                Private f32* %159 = OpAccessChain %9 %123 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpExtInst %1 29 %160 
                                Private f32* %162 = OpAccessChain %9 %123 
                                                      OpStore %162 %161 
                                Uniform f32* %164 = OpAccessChain %20 %163 
                                         f32 %165 = OpLoad %164 
                                Private f32* %166 = OpAccessChain %9 %123 
                                         f32 %167 = OpLoad %166 
                                         f32 %168 = OpFMul %165 %167 
                                Uniform f32* %170 = OpAccessChain %20 %169 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFAdd %168 %171 
                                Private f32* %173 = OpAccessChain %9 %123 
                                                      OpStore %173 %172 
                                         f32 %174 = OpLoad %135 
                                         f32 %176 = OpFAdd %174 %175 
                                                      OpStore %135 %176 
                                         f32 %178 = OpLoad %135 
                                         f32 %179 = OpFDiv %177 %178 
                                                      OpStore %135 %179 
                                Private f32* %180 = OpAccessChain %125 %123 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpLoad %135 
                                         f32 %183 = OpFMul %181 %182 
                                Private f32* %184 = OpAccessChain %125 %123 
                                                      OpStore %184 %183 
                                Private f32* %185 = OpAccessChain %125 %123 
                                         f32 %186 = OpLoad %185 
                                         f32 %188 = OpFMul %186 %187 
                                Private f32* %189 = OpAccessChain %125 %123 
                                                      OpStore %189 %188 
                                       f32_3 %190 = OpLoad %11 
                                       f32_4 %191 = OpVectorShuffle %190 %190 1 1 1 1 
                              Uniform f32_4* %194 = OpAccessChain %20 %192 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpFMul %191 %195 
                                                      OpStore %39 %196 
                              Uniform f32_4* %197 = OpAccessChain %20 %192 %22 
                                       f32_4 %198 = OpLoad %197 
                                       f32_3 %199 = OpLoad %11 
                                       f32_4 %200 = OpVectorShuffle %199 %199 0 0 0 0 
                                       f32_4 %201 = OpFMul %198 %200 
                                       f32_4 %202 = OpLoad %39 
                                       f32_4 %203 = OpFAdd %201 %202 
                                                      OpStore %39 %203 
                              Uniform f32_4* %204 = OpAccessChain %20 %192 %42 
                                       f32_4 %205 = OpLoad %204 
                                       f32_3 %206 = OpLoad %11 
                                       f32_4 %207 = OpVectorShuffle %206 %206 2 2 2 2 
                                       f32_4 %208 = OpFMul %205 %207 
                                       f32_4 %209 = OpLoad %39 
                                       f32_4 %210 = OpFAdd %208 %209 
                                                      OpStore %39 %210 
                                       f32_4 %211 = OpLoad %39 
                              Uniform f32_4* %213 = OpAccessChain %20 %192 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpFAdd %211 %214 
                                                      OpStore %39 %215 
                                       f32_4 %217 = OpLoad %39 
                                       f32_2 %218 = OpVectorShuffle %217 %217 0 1 
                                       f32_4 %219 = OpLoad %39 
                                       f32_2 %220 = OpVectorShuffle %219 %219 3 3 
                                       f32_2 %221 = OpFDiv %218 %220 
                                       f32_3 %222 = OpLoad %57 
                                       f32_3 %223 = OpVectorShuffle %222 %221 3 4 2 
                                                      OpStore %57 %223 
                                       f32_3 %224 = OpLoad %57 
                                       f32_2 %225 = OpVectorShuffle %224 %224 0 1 
                                       f32_2 %227 = OpFAdd %225 %226 
                                       f32_3 %228 = OpLoad %57 
                                       f32_3 %229 = OpVectorShuffle %228 %227 3 4 2 
                                                      OpStore %57 %229 
                         read_only Texture2D %233 = OpLoad %232 
                                     sampler %237 = OpLoad %236 
                  read_only Texture2DSampled %239 = OpSampledImage %233 %237 
                                       f32_3 %240 = OpLoad %57 
                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
                                       f32_4 %242 = OpImageSampleImplicitLod %239 %241 
                                         f32 %244 = OpCompositeExtract %242 3 
                                                      OpStore %135 %244 
                                Private f32* %249 = OpAccessChain %39 %248 
                                         f32 %250 = OpLoad %249 
                                        bool %251 = OpFOrdLessThan %89 %250 
                                                      OpStore %247 %251 
                                       f32_4 %252 = OpLoad %39 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                       f32_4 %254 = OpLoad %39 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                         f32 %256 = OpDot %253 %255 
                                Private f32* %257 = OpAccessChain %39 %123 
                                                      OpStore %257 %256 
                         read_only Texture2D %259 = OpLoad %258 
                                     sampler %261 = OpLoad %260 
                  read_only Texture2DSampled %262 = OpSampledImage %259 %261 
                                       f32_4 %263 = OpLoad %39 
                                       f32_2 %264 = OpVectorShuffle %263 %263 0 0 
                                       f32_4 %265 = OpImageSampleImplicitLod %262 %264 
                                         f32 %266 = OpCompositeExtract %265 0 
                                Private f32* %267 = OpAccessChain %39 %123 
                                                      OpStore %267 %266 
                                        bool %269 = OpLoad %247 
                                         f32 %270 = OpSelect %269 %90 %89 
                                                      OpStore %268 %270 
                                         f32 %271 = OpLoad %135 
                                         f32 %272 = OpLoad %268 
                                         f32 %273 = OpFMul %271 %272 
                                                      OpStore %135 %273 
                                Private f32* %274 = OpAccessChain %39 %123 
                                         f32 %275 = OpLoad %274 
                                         f32 %276 = OpLoad %135 
                                         f32 %277 = OpFMul %275 %276 
                                                      OpStore %135 %277 
                                         f32 %278 = OpLoad %135 
                                       f32_3 %279 = OpCompositeConstruct %278 %278 %278 
                              Uniform f32_4* %281 = OpAccessChain %20 %280 
                                       f32_4 %282 = OpLoad %281 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_3 %284 = OpFMul %279 %283 
                                       f32_4 %285 = OpLoad %39 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %39 %286 
                                       f32_3 %287 = OpLoad %125 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 0 0 
                                       f32_4 %289 = OpLoad %39 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                       f32_3 %291 = OpFMul %288 %290 
                                       f32_4 %292 = OpLoad %39 
                                       f32_4 %293 = OpVectorShuffle %292 %291 4 5 6 3 
                                                      OpStore %39 %293 
                                         f32 %294 = OpLoad %28 
                                       f32_3 %295 = OpCompositeConstruct %294 %294 %294 
                                       f32_4 %296 = OpLoad %39 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_3 %298 = OpFMul %295 %297 
                                                      OpStore %125 %298 
                                         f32 %301 = OpLoad %300 
                                Uniform f32* %303 = OpAccessChain %20 %193 %302 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpFDiv %301 %304 
                                Private f32* %306 = OpAccessChain %39 %123 
                                                      OpStore %306 %305 
                                Private f32* %307 = OpAccessChain %39 %123 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFNegate %308 
                                         f32 %310 = OpFAdd %309 %90 
                                Private f32* %311 = OpAccessChain %39 %123 
                                                      OpStore %311 %310 
                                Private f32* %312 = OpAccessChain %39 %123 
                                         f32 %313 = OpLoad %312 
                                Uniform f32* %314 = OpAccessChain %20 %193 %248 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFMul %313 %315 
                                Private f32* %317 = OpAccessChain %39 %123 
                                                      OpStore %317 %316 
                                Private f32* %318 = OpAccessChain %39 %123 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpExtInst %1 40 %319 %89 
                                Private f32* %321 = OpAccessChain %39 %123 
                                                      OpStore %321 %320 
                                Private f32* %322 = OpAccessChain %39 %123 
                                         f32 %323 = OpLoad %322 
                                Uniform f32* %324 = OpAccessChain %20 %212 %248 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFMul %323 %325 
                                Uniform f32* %327 = OpAccessChain %20 %212 %243 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %326 %328 
                                Private f32* %330 = OpAccessChain %39 %123 
                                                      OpStore %330 %329 
                                Private f32* %331 = OpAccessChain %39 %123 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpExtInst %1 43 %332 %89 %90 
                                Private f32* %334 = OpAccessChain %39 %123 
                                                      OpStore %334 %333 
                                       f32_3 %337 = OpLoad %125 
                                       f32_4 %338 = OpLoad %39 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 0 0 
                                       f32_3 %340 = OpFMul %337 %339 
                                       f32_4 %341 = OpLoad %336 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 6 3 
                                                      OpStore %336 %342 
                                  Input f32* %343 = OpAccessChain %110 %302 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpFNegate %344 
                                Uniform f32* %347 = OpAccessChain %20 %346 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFAdd %345 %348 
                                Private f32* %350 = OpAccessChain %125 %123 
                                                      OpStore %350 %349 
                                Private f32* %351 = OpAccessChain %125 %123 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpExtInst %1 4 %352 
                                Uniform f32* %354 = OpAccessChain %20 %346 
                                         f32 %355 = OpLoad %354 
                                         f32 %356 = OpFNegate %355 
                                         f32 %357 = OpFAdd %353 %356 
                                Private f32* %358 = OpAccessChain %125 %123 
                                                      OpStore %358 %357 
                                Private f32* %359 = OpAccessChain %125 %123 
                                         f32 %360 = OpLoad %359 
                                         f32 %361 = OpExtInst %1 43 %360 %89 %90 
                                Private f32* %362 = OpAccessChain %125 %123 
                                                      OpStore %362 %361 
                                Private f32* %363 = OpAccessChain %125 %123 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFNegate %364 
                                         f32 %366 = OpFAdd %365 %90 
                                Private f32* %367 = OpAccessChain %125 %123 
                                                      OpStore %367 %366 
                                Private f32* %368 = OpAccessChain %125 %123 
                                         f32 %369 = OpLoad %368 
                                Private f32* %370 = OpAccessChain %9 %123 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                Private f32* %373 = OpAccessChain %9 %123 
                                                      OpStore %373 %372 
                                Private f32* %374 = OpAccessChain %9 %123 
                                         f32 %375 = OpLoad %374 
                                Uniform f32* %377 = OpAccessChain %20 %376 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpFMul %375 %378 
                                 Output f32* %381 = OpAccessChain %336 %243 
                                                      OpStore %381 %379 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 387
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationControl %4 "main" %23 %25 %30 %37 %39 %47 %51 %58 %60 %65 %67 %72 %74 %79 %81 %86 %88 %219 %371 
                                                      OpExecutionMode %4 OutputVertices 4 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %23 Location 23 
                                                      OpDecorate %25 BuiltIn WorkgroupSize 
                                                      OpDecorate %30 Location 30 
                                                      OpDecorate %37 Location 37 
                                                      OpDecorate %39 Location 39 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %51 Location 51 
                                                      OpDecorate %58 Location 58 
                                                      OpDecorate vs_TEXCOORD0 Location 60 
                                                      OpDecorate %65 Location 65 
                                                      OpDecorate vs_TEXCOORD1 Location 67 
                                                      OpDecorate %72 Location 72 
                                                      OpDecorate vs_TEXCOORD2 Location 74 
                                                      OpDecorate %79 Location 79 
                                                      OpDecorate vs_TEXCOORD3 Location 81 
                                                      OpDecorate %86 Location 86 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %96 ArrayStride 96 
                                                      OpMemberDecorate %97 0 Offset 97 
                                                      OpMemberDecorate %97 1 Offset 97 
                                                      OpMemberDecorate %97 2 Offset 97 
                                                      OpMemberDecorate %97 3 Offset 97 
                                                      OpDecorate %97 Block 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate %219 Patch 
                                                      OpDecorate %219 BuiltIn 219 
                                                      OpDecorate %371 Patch 
                                                      OpDecorate %371 BuiltIn 371 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %8 = OpTypeInt 32 1 
                                               %9 = OpTypePointer Function %8 
                                              %10 = OpTypeFunction %2 %9 
                                              %17 = OpTypeFloat 32 
                                              %18 = OpTypeVector %17 4 
                                              %19 = OpTypeInt 32 0 
                                          u32 %20 = OpConstant 3 
                                              %21 = OpTypeArray %18 %20 
                                              %22 = OpTypePointer Output %21 
                             Output f32_4[3]* %23 = OpVariable Output 
                                              %24 = OpTypePointer Input %8 
                                   Input i32* %25 = OpVariable Input 
                                          u32 %27 = OpConstant 32 
                                              %28 = OpTypeArray %18 %27 
                                              %29 = OpTypePointer Input %28 
                             Input f32_4[32]* %30 = OpVariable Input 
                                              %32 = OpTypePointer Input %18 
                                              %35 = OpTypePointer Output %18 
                             Output f32_4[3]* %37 = OpVariable Output 
                             Input f32_4[32]* %39 = OpVariable Input 
                                              %44 = OpTypeVector %17 3 
                                              %45 = OpTypeArray %44 %20 
                                              %46 = OpTypePointer Output %45 
                             Output f32_3[3]* %47 = OpVariable Output 
                                              %49 = OpTypeArray %44 %27 
                                              %50 = OpTypePointer Input %49 
                             Input f32_3[32]* %51 = OpVariable Input 
                                              %53 = OpTypePointer Input %44 
                                              %56 = OpTypePointer Output %44 
                             Output f32_4[3]* %58 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD0 = OpVariable Input 
                             Output f32_4[3]* %65 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD1 = OpVariable Input 
                             Output f32_4[3]* %72 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD2 = OpVariable Input 
                             Output f32_4[3]* %79 = OpVariable Output 
                    Input f32_4[32]* vs_TEXCOORD3 = OpVariable Input 
                             Output f32_4[3]* %86 = OpVariable Output 
                             Input f32_4[32]* %88 = OpVariable Input 
                                              %93 = OpTypePointer Private %44 
                               Private f32_3* %94 = OpVariable Private 
                                          u32 %95 = OpConstant 4 
                                              %96 = OpTypeArray %18 %95 
                                              %97 = OpTypeStruct %44 %18 %96 %17 
                                              %98 = OpTypePointer Uniform %97 
Uniform struct {f32_3; f32_4; f32_4[4]; f32;}* %99 = OpVariable Uniform 
                                         i32 %100 = OpConstant 2 
                                         i32 %101 = OpConstant 1 
                                             %102 = OpTypePointer Uniform %18 
                                         i32 %110 = OpConstant 0 
                                         i32 %129 = OpConstant 3 
                              Private f32_3* %139 = OpVariable Private 
                              Private f32_3* %174 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                             %182 = OpTypePointer Uniform %44 
                                             %187 = OpTypePointer Private %17 
                                Private f32* %188 = OpVariable Private 
                                             %195 = OpTypePointer Uniform %17 
                                Private f32* %203 = OpVariable Private 
                                         u32 %210 = OpConstant 1 
                                             %217 = OpTypeArray %17 %95 
                                             %218 = OpTypePointer Output %217 
                              Output f32[4]* %219 = OpVariable Output 
                                         f32 %221 = OpConstant 3.674022E-40 
                                             %223 = OpTypePointer Output %17 
                              Private f32_3* %259 = OpVariable Private 
                                         u32 %285 = OpConstant 0 
                              Private f32_3* %325 = OpVariable Private 
                                         u32 %368 = OpConstant 2 
                                             %369 = OpTypeArray %17 %368 
                                             %370 = OpTypePointer Output %369 
                              Output f32[2]* %371 = OpVariable Output 
                                         f32 %374 = OpConstant 3.674022E-40 
                                             %379 = OpTypeBool 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %383 = OpVariable Function 
                               Function i32* %385 = OpVariable Function 
                                        void %377 = OpFunctionCall %6 
                                                      OpControlBarrier 368 95 285 
                                         i32 %378 = OpLoad %25 
                                        bool %380 = OpIEqual %378 %110 
                                                      OpSelectionMerge %382 None 
                                                      OpBranchConditional %380 %381 %382 
                                             %381 = OpLabel 
                                                      OpStore %383 %110 
                                        void %384 = OpFunctionCall %12 %383 
                                                      OpStore %385 %110 
                                        void %386 = OpFunctionCall %15 %385 
                                                      OpBranch %382 
                                             %382 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
                                          void %6 = OpFunction None %3 
                                               %7 = OpLabel 
                                          i32 %26 = OpLoad %25 
                                          i32 %31 = OpLoad %25 
                                 Input f32_4* %33 = OpAccessChain %30 %31 
                                        f32_4 %34 = OpLoad %33 
                                Output f32_4* %36 = OpAccessChain %23 %26 
                                                      OpStore %36 %34 
                                          i32 %38 = OpLoad %25 
                                          i32 %40 = OpLoad %25 
                                 Input f32_4* %41 = OpAccessChain %39 %40 
                                        f32_4 %42 = OpLoad %41 
                                Output f32_4* %43 = OpAccessChain %37 %38 
                                                      OpStore %43 %42 
                                          i32 %48 = OpLoad %25 
                                          i32 %52 = OpLoad %25 
                                 Input f32_3* %54 = OpAccessChain %51 %52 
                                        f32_3 %55 = OpLoad %54 
                                Output f32_3* %57 = OpAccessChain %47 %48 
                                                      OpStore %57 %55 
                                          i32 %59 = OpLoad %25 
                                          i32 %61 = OpLoad %25 
                                 Input f32_4* %62 = OpAccessChain vs_TEXCOORD0 %61 
                                        f32_4 %63 = OpLoad %62 
                                Output f32_4* %64 = OpAccessChain %58 %59 
                                                      OpStore %64 %63 
                                          i32 %66 = OpLoad %25 
                                          i32 %68 = OpLoad %25 
                                 Input f32_4* %69 = OpAccessChain vs_TEXCOORD1 %68 
                                        f32_4 %70 = OpLoad %69 
                                Output f32_4* %71 = OpAccessChain %65 %66 
                                                      OpStore %71 %70 
                                          i32 %73 = OpLoad %25 
                                          i32 %75 = OpLoad %25 
                                 Input f32_4* %76 = OpAccessChain vs_TEXCOORD2 %75 
                                        f32_4 %77 = OpLoad %76 
                                Output f32_4* %78 = OpAccessChain %72 %73 
                                                      OpStore %78 %77 
                                          i32 %80 = OpLoad %25 
                                          i32 %82 = OpLoad %25 
                                 Input f32_4* %83 = OpAccessChain vs_TEXCOORD3 %82 
                                        f32_4 %84 = OpLoad %83 
                                Output f32_4* %85 = OpAccessChain %79 %80 
                                                      OpStore %85 %84 
                                          i32 %87 = OpLoad %25 
                                          i32 %89 = OpLoad %25 
                                 Input f32_4* %90 = OpAccessChain %88 %89 
                                        f32_4 %91 = OpLoad %90 
                                Output f32_4* %92 = OpAccessChain %86 %87 
                                                      OpStore %92 %91 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %12 = OpFunction None %10 
                                Function i32* %11 = OpFunctionParameter 
                                              %13 = OpLabel 
                              Uniform f32_4* %103 = OpAccessChain %99 %100 %101 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                Input f32_4* %106 = OpAccessChain %30 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 1 1 1 
                                       f32_3 %109 = OpFMul %105 %108 
                                                      OpStore %94 %109 
                              Uniform f32_4* %111 = OpAccessChain %99 %100 %110 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                Input f32_4* %114 = OpAccessChain %30 %101 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %113 %116 
                                       f32_3 %118 = OpLoad %94 
                                       f32_3 %119 = OpFAdd %117 %118 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %99 %100 %100 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                Input f32_4* %123 = OpAccessChain %30 %101 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 2 2 2 
                                       f32_3 %126 = OpFMul %122 %125 
                                       f32_3 %127 = OpLoad %94 
                                       f32_3 %128 = OpFAdd %126 %127 
                                                      OpStore %94 %128 
                              Uniform f32_4* %130 = OpAccessChain %99 %100 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                Input f32_4* %133 = OpAccessChain %30 %101 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 3 3 3 
                                       f32_3 %136 = OpFMul %132 %135 
                                       f32_3 %137 = OpLoad %94 
                                       f32_3 %138 = OpFAdd %136 %137 
                                                      OpStore %94 %138 
                              Uniform f32_4* %140 = OpAccessChain %99 %100 %101 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                Input f32_4* %143 = OpAccessChain %30 %100 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 1 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                                      OpStore %139 %146 
                              Uniform f32_4* %147 = OpAccessChain %99 %100 %110 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                Input f32_4* %150 = OpAccessChain %30 %100 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 0 0 
                                       f32_3 %153 = OpFMul %149 %152 
                                       f32_3 %154 = OpLoad %139 
                                       f32_3 %155 = OpFAdd %153 %154 
                                                      OpStore %139 %155 
                              Uniform f32_4* %156 = OpAccessChain %99 %100 %100 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                Input f32_4* %159 = OpAccessChain %30 %100 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 2 2 2 
                                       f32_3 %162 = OpFMul %158 %161 
                                       f32_3 %163 = OpLoad %139 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %139 %164 
                              Uniform f32_4* %165 = OpAccessChain %99 %100 %129 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                Input f32_4* %168 = OpAccessChain %30 %100 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 3 3 3 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_3 %172 = OpLoad %139 
                                       f32_3 %173 = OpFAdd %171 %172 
                                                      OpStore %139 %173 
                                       f32_3 %175 = OpLoad %94 
                                       f32_3 %176 = OpLoad %139 
                                       f32_3 %177 = OpFAdd %175 %176 
                                                      OpStore %174 %177 
                                       f32_3 %178 = OpLoad %174 
                                       f32_3 %181 = OpFMul %178 %180 
                              Uniform f32_3* %183 = OpAccessChain %99 %110 
                                       f32_3 %184 = OpLoad %183 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpFAdd %181 %185 
                                                      OpStore %174 %186 
                                       f32_3 %189 = OpLoad %174 
                                       f32_3 %190 = OpLoad %174 
                                         f32 %191 = OpDot %189 %190 
                                                      OpStore %188 %191 
                                         f32 %192 = OpLoad %188 
                                         f32 %193 = OpExtInst %1 31 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                Uniform f32* %196 = OpAccessChain %99 %129 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %194 %197 
                                                      OpStore %188 %198 
                                       f32_3 %199 = OpLoad %94 
                                       f32_3 %200 = OpLoad %139 
                                       f32_3 %201 = OpFNegate %200 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore %174 %202 
                                       f32_3 %204 = OpLoad %174 
                                       f32_3 %205 = OpLoad %174 
                                         f32 %206 = OpDot %204 %205 
                                                      OpStore %203 %206 
                                         f32 %207 = OpLoad %203 
                                         f32 %208 = OpExtInst %1 31 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                Uniform f32* %211 = OpAccessChain %99 %101 %210 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %209 %212 
                                                      OpStore %203 %213 
                                         f32 %214 = OpLoad %203 
                                         f32 %215 = OpLoad %188 
                                         f32 %216 = OpFDiv %214 %215 
                                                      OpStore %188 %216 
                                         f32 %220 = OpLoad %188 
                                         f32 %222 = OpExtInst %1 40 %220 %221 
                                 Output f32* %224 = OpAccessChain %219 %110 
                                                      OpStore %224 %222 
                              Uniform f32_4* %225 = OpAccessChain %99 %100 %101 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                Input f32_4* %228 = OpAccessChain %30 %110 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 1 1 1 
                                       f32_3 %231 = OpFMul %227 %230 
                                                      OpStore %174 %231 
                              Uniform f32_4* %232 = OpAccessChain %99 %100 %110 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                Input f32_4* %235 = OpAccessChain %30 %110 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 0 0 
                                       f32_3 %238 = OpFMul %234 %237 
                                       f32_3 %239 = OpLoad %174 
                                       f32_3 %240 = OpFAdd %238 %239 
                                                      OpStore %174 %240 
                              Uniform f32_4* %241 = OpAccessChain %99 %100 %100 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                Input f32_4* %244 = OpAccessChain %30 %110 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 2 2 2 
                                       f32_3 %247 = OpFMul %243 %246 
                                       f32_3 %248 = OpLoad %174 
                                       f32_3 %249 = OpFAdd %247 %248 
                                                      OpStore %174 %249 
                              Uniform f32_4* %250 = OpAccessChain %99 %100 %129 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                Input f32_4* %253 = OpAccessChain %30 %110 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 3 3 3 
                                       f32_3 %256 = OpFMul %252 %255 
                                       f32_3 %257 = OpLoad %174 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore %174 %258 
                                       f32_3 %260 = OpLoad %139 
                                       f32_3 %261 = OpLoad %174 
                                       f32_3 %262 = OpFAdd %260 %261 
                                                      OpStore %259 %262 
                                       f32_3 %263 = OpLoad %139 
                                       f32_3 %264 = OpLoad %174 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_3 %266 = OpFAdd %263 %265 
                                                      OpStore %139 %266 
                                       f32_3 %267 = OpLoad %139 
                                       f32_3 %268 = OpLoad %139 
                                         f32 %269 = OpDot %267 %268 
                                                      OpStore %188 %269 
                                         f32 %270 = OpLoad %188 
                                         f32 %271 = OpExtInst %1 31 %270 
                                                      OpStore %188 %271 
                                         f32 %272 = OpLoad %188 
                                Uniform f32* %273 = OpAccessChain %99 %101 %210 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                                      OpStore %188 %275 
                                       f32_3 %276 = OpLoad %259 
                                       f32_3 %277 = OpFMul %276 %180 
                              Uniform f32_3* %278 = OpAccessChain %99 %110 
                                       f32_3 %279 = OpLoad %278 
                                       f32_3 %280 = OpFNegate %279 
                                       f32_3 %281 = OpFAdd %277 %280 
                                                      OpStore %139 %281 
                                       f32_3 %282 = OpLoad %139 
                                       f32_3 %283 = OpLoad %139 
                                         f32 %284 = OpDot %282 %283 
                                Private f32* %286 = OpAccessChain %139 %285 
                                                      OpStore %286 %284 
                                Private f32* %287 = OpAccessChain %139 %285 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 31 %288 
                                Private f32* %290 = OpAccessChain %139 %285 
                                                      OpStore %290 %289 
                                Private f32* %291 = OpAccessChain %139 %285 
                                         f32 %292 = OpLoad %291 
                                Uniform f32* %293 = OpAccessChain %99 %129 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFMul %292 %294 
                                Private f32* %296 = OpAccessChain %139 %285 
                                                      OpStore %296 %295 
                                         f32 %297 = OpLoad %188 
                                Private f32* %298 = OpAccessChain %139 %285 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFDiv %297 %299 
                                                      OpStore %188 %300 
                                         f32 %301 = OpLoad %188 
                                         f32 %302 = OpExtInst %1 40 %301 %221 
                                 Output f32* %303 = OpAccessChain %219 %101 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %94 
                                       f32_3 %305 = OpLoad %174 
                                       f32_3 %306 = OpFAdd %304 %305 
                                                      OpStore %139 %306 
                                       f32_3 %307 = OpLoad %94 
                                       f32_3 %308 = OpFNegate %307 
                                       f32_3 %309 = OpLoad %174 
                                       f32_3 %310 = OpFAdd %308 %309 
                                                      OpStore %94 %310 
                                       f32_3 %311 = OpLoad %94 
                                       f32_3 %312 = OpLoad %94 
                                         f32 %313 = OpDot %311 %312 
                                Private f32* %314 = OpAccessChain %94 %285 
                                                      OpStore %314 %313 
                                Private f32* %315 = OpAccessChain %94 %285 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpExtInst %1 31 %316 
                                Private f32* %318 = OpAccessChain %94 %285 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %94 %285 
                                         f32 %320 = OpLoad %319 
                                Uniform f32* %321 = OpAccessChain %99 %101 %210 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %320 %322 
                                Private f32* %324 = OpAccessChain %94 %285 
                                                      OpStore %324 %323 
                                       f32_3 %326 = OpLoad %139 
                                       f32_3 %327 = OpFMul %326 %180 
                              Uniform f32_3* %328 = OpAccessChain %99 %110 
                                       f32_3 %329 = OpLoad %328 
                                       f32_3 %330 = OpFNegate %329 
                                       f32_3 %331 = OpFAdd %327 %330 
                                                      OpStore %325 %331 
                                       f32_3 %332 = OpLoad %325 
                                       f32_3 %333 = OpLoad %325 
                                         f32 %334 = OpDot %332 %333 
                                Private f32* %335 = OpAccessChain %325 %285 
                                                      OpStore %335 %334 
                                Private f32* %336 = OpAccessChain %325 %285 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpExtInst %1 31 %337 
                                Private f32* %339 = OpAccessChain %325 %285 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %325 %285 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %99 %129 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFMul %341 %343 
                                Private f32* %345 = OpAccessChain %325 %285 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %94 %285 
                                         f32 %347 = OpLoad %346 
                                Private f32* %348 = OpAccessChain %325 %285 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFDiv %347 %349 
                                Private f32* %351 = OpAccessChain %94 %285 
                                                      OpStore %351 %350 
                                Private f32* %352 = OpAccessChain %94 %285 
                                         f32 %353 = OpLoad %352 
                                         f32 %354 = OpExtInst %1 40 %353 %221 
                                 Output f32* %355 = OpAccessChain %219 %100 
                                                      OpStore %355 %354 
                                                      OpReturn
                                                      OpFunctionEnd
                                         void %15 = OpFunction None %10 
                                Function i32* %14 = OpFunctionParameter 
                                              %16 = OpLabel 
                                 Output f32* %356 = OpAccessChain %219 %100 
                                         f32 %357 = OpLoad %356 
                                 Output f32* %358 = OpAccessChain %219 %100 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                Private f32* %361 = OpAccessChain %94 %285 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %94 %285 
                                         f32 %363 = OpLoad %362 
                                 Output f32* %364 = OpAccessChain %219 %100 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFAdd %363 %365 
                                Private f32* %367 = OpAccessChain %94 %285 
                                                      OpStore %367 %366 
                                Private f32* %372 = OpAccessChain %94 %285 
                                         f32 %373 = OpLoad %372 
                                         f32 %375 = OpFMul %373 %374 
                                 Output f32* %376 = OpAccessChain %371 %110 
                                                      OpStore %376 %375 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 386
; Schema: 0
                                                      OpCapability Tessellation 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint TessellationEvaluation %4 "main" %12 %20 %139 %208 %236 %328 %333 %336 %373 
                                                      OpExecutionMode %4 Triangles 
                                                      OpExecutionMode %4 SpacingFractionalOdd 
                                                      OpExecutionMode %4 VertexOrderCw 
                                                      OpDecorate %12 BuiltIn TessLevelInner 
                                                      OpDecorate %20 Location 20 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpMemberDecorate %61 5 Offset 61 
                                                      OpMemberDecorate %61 6 Offset 61 
                                                      OpMemberDecorate %61 7 Offset 61 
                                                      OpMemberDecorate %61 8 Offset 61 
                                                      OpMemberDecorate %61 9 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %97 DescriptorSet 97 
                                                      OpDecorate %97 Binding 97 
                                                      OpDecorate %101 DescriptorSet 101 
                                                      OpDecorate %101 Binding 101 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %113 DescriptorSet 113 
                                                      OpDecorate %113 Binding 113 
                                                      OpDecorate %139 Location 139 
                                                      OpDecorate %208 Location 208 
                                                      OpDecorate %236 Location 236 
                                                      OpMemberDecorate %326 0 BuiltIn 326 
                                                      OpMemberDecorate %326 1 BuiltIn 326 
                                                      OpMemberDecorate %326 2 BuiltIn 326 
                                                      OpDecorate %326 Block 
                                                      OpDecorate %333 Location 333 
                                                      OpDecorate %336 Location 336 
                                                      OpDecorate %373 Location 373 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 32 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypePointer Input %18 
                             Input f32_4[32]* %20 = OpVariable Input 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Input %7 
                                          i32 %30 = OpConstant 0 
                                          i32 %42 = OpConstant 2 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                              %60 = OpTypeArray %7 %56 
                                              %61 = OpTypeStruct %7 %57 %58 %59 %60 %6 %6 %7 %6 %6 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32; f32;}* %63 = OpVariable Uniform 
                                          i32 %64 = OpConstant 7 
                                              %65 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 5 
                                              %80 = OpTypePointer Uniform %6 
                                          i32 %83 = OpConstant 6 
                                              %93 = OpTypePointer Private %6 
                                 Private f32* %94 = OpVariable Private 
                                              %95 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %96 = OpTypePointer UniformConstant %95 
         UniformConstant read_only Texture2D* %97 = OpVariable UniformConstant 
                                              %99 = OpTypeSampler 
                                             %100 = OpTypePointer UniformConstant %99 
                    UniformConstant sampler* %101 = OpVariable UniformConstant 
                                             %103 = OpTypeSampledImage %95 
                                         f32 %107 = OpConstant 3.674022E-40 
                                         u32 %109 = OpConstant 0 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                    UniformConstant sampler* %113 = OpVariable UniformConstant 
                              Private f32_4* %134 = OpVariable Private 
                                             %137 = OpTypeArray %10 %17 
                                             %138 = OpTypePointer Input %137 
                            Input f32_3[32]* %139 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                                         u32 %179 = OpConstant 2 
                                         u32 %187 = OpConstant 1 
                                Private f32* %189 = OpVariable Private 
                                         i32 %202 = OpConstant 8 
                                             %207 = OpTypePointer Output %10 
                               Output f32_3* %208 = OpVariable Output 
                                         f32 %222 = OpConstant 3.674022E-40 
                            Input f32_4[32]* %236 = OpVariable Input 
                                         i32 %256 = OpConstant 9 
                                         i32 %294 = OpConstant 3 
                              Private f32_4* %298 = OpVariable Private 
                                             %325 = OpTypeArray %6 %187 
                                             %326 = OpTypeStruct %7 %6 %325 
                                             %327 = OpTypePointer Output %326 
        Output struct {f32_4; f32; f32[1];}* %328 = OpVariable Output 
                                             %330 = OpTypePointer Output %7 
                                             %332 = OpTypePointer Output %6 
                                 Output f32* %333 = OpVariable Output 
                               Output f32_3* %336 = OpVariable Output 
                                         i32 %355 = OpConstant 4 
                               Output f32_4* %373 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 1 1 
                                 Input f32_4* %24 = OpAccessChain %20 %22 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 0 1 
                                        f32_2 %27 = OpFMul %15 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                                 Input f32_4* %31 = OpAccessChain %20 %30 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_3 %34 = OpLoad %12 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 0 
                                        f32_2 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                                        f32_2 %39 = OpFAdd %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                 Input f32_4* %43 = OpAccessChain %20 %42 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_3 %46 = OpLoad %12 
                                        f32_2 %47 = OpVectorShuffle %46 %46 2 2 
                                        f32_2 %48 = OpFMul %45 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                                        f32_2 %51 = OpFAdd %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                                        f32_4 %54 = OpLoad %9 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                               Uniform f32_4* %66 = OpAccessChain %63 %64 
                                        f32_4 %67 = OpLoad %66 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                        f32_2 %69 = OpFMul %55 %68 
                               Uniform f32_4* %70 = OpAccessChain %63 %64 
                                        f32_4 %71 = OpLoad %70 
                                        f32_2 %72 = OpVectorShuffle %71 %71 2 3 
                                        f32_2 %73 = OpFAdd %69 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %73 4 5 2 3 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %63 %30 
                                        f32_4 %77 = OpLoad %76 
                                        f32_2 %78 = OpVectorShuffle %77 %77 1 1 
                                 Uniform f32* %81 = OpAccessChain %63 %79 
                                          f32 %82 = OpLoad %81 
                                 Uniform f32* %84 = OpAccessChain %63 %83 
                                          f32 %85 = OpLoad %84 
                                        f32_2 %86 = OpCompositeConstruct %82 %85 
                                        f32_2 %87 = OpFMul %78 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_2 %90 = OpFAdd %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 2 3 
                                                      OpStore %9 %92 
                          read_only Texture2D %98 = OpLoad %97 
                                     sampler %102 = OpLoad %101 
                  read_only Texture2DSampled %104 = OpSampledImage %98 %102 
                                       f32_4 %105 = OpLoad %9 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_4 %108 = OpImageSampleExplicitLod %104 %106 Lod %7 
                                         f32 %110 = OpCompositeExtract %108 0 
                                                      OpStore %94 %110 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %114 = OpLoad %113 
                  read_only Texture2DSampled %115 = OpSampledImage %112 %114 
                                       f32_4 %116 = OpLoad %9 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_4 %118 = OpImageSampleExplicitLod %115 %117 Lod %7 
                                         f32 %119 = OpCompositeExtract %118 0 
                                Private f32* %120 = OpAccessChain %9 %109 
                                                      OpStore %120 %119 
                                Private f32* %121 = OpAccessChain %9 %109 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpLoad %94 
                                         f32 %124 = OpFMul %122 %123 
                                Private f32* %125 = OpAccessChain %9 %109 
                                                      OpStore %125 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                              Uniform f32_4* %128 = OpAccessChain %63 %42 %22 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %127 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %9 %133 
                                       f32_3 %135 = OpLoad %12 
                                       f32_3 %136 = OpVectorShuffle %135 %135 1 1 1 
                                Input f32_3* %140 = OpAccessChain %139 %22 
                                       f32_3 %141 = OpLoad %140 
                                       f32_3 %142 = OpFMul %136 %141 
                                       f32_4 %143 = OpLoad %134 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %134 %144 
                                Input f32_3* %145 = OpAccessChain %139 %30 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpLoad %12 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 0 0 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %134 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %149 %151 
                                       f32_4 %153 = OpLoad %134 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %134 %154 
                                Input f32_3* %155 = OpAccessChain %139 %42 
                                       f32_3 %156 = OpLoad %155 
                                       f32_3 %157 = OpLoad %12 
                                       f32_3 %158 = OpVectorShuffle %157 %157 2 2 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %134 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %134 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %134 %164 
                                       f32_4 %166 = OpLoad %134 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                              Uniform f32_4* %168 = OpAccessChain %63 %42 %30 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %167 %170 
                                Private f32* %172 = OpAccessChain %165 %109 
                                                      OpStore %172 %171 
                                       f32_4 %173 = OpLoad %134 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                              Uniform f32_4* %175 = OpAccessChain %63 %42 %42 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %165 %179 
                                                      OpStore %180 %178 
                                       f32_4 %181 = OpLoad %134 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                              Uniform f32_4* %183 = OpAccessChain %63 %42 %22 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %182 %185 
                                Private f32* %188 = OpAccessChain %165 %187 
                                                      OpStore %188 %186 
                                       f32_4 %190 = OpLoad %165 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %165 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %191 %193 
                                                      OpStore %189 %194 
                                         f32 %195 = OpLoad %189 
                                         f32 %196 = OpExtInst %1 32 %195 
                                                      OpStore %189 %196 
                                Private f32* %197 = OpAccessChain %165 %187 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFNegate %198 
                                         f32 %200 = OpLoad %189 
                                         f32 %201 = OpFMul %199 %200 
                                Uniform f32* %203 = OpAccessChain %63 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFAdd %201 %204 
                                Private f32* %206 = OpAccessChain %134 %109 
                                                      OpStore %206 %205 
                                         f32 %209 = OpLoad %189 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_4 %211 = OpLoad %165 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFMul %210 %212 
                                                      OpStore %208 %213 
                                Private f32* %214 = OpAccessChain %134 %109 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpExtInst %1 4 %215 
                                Uniform f32* %217 = OpAccessChain %63 %202 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                         f32 %220 = OpFAdd %216 %219 
                                                      OpStore %189 %220 
                                         f32 %221 = OpLoad %189 
                                         f32 %223 = OpExtInst %1 43 %221 %107 %222 
                                                      OpStore %189 %223 
                                         f32 %224 = OpLoad %189 
                                         f32 %225 = OpFNegate %224 
                                         f32 %226 = OpFAdd %225 %222 
                                                      OpStore %189 %226 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                         f32 %229 = OpLoad %189 
                                       f32_3 %230 = OpCompositeConstruct %229 %229 %229 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_3 %234 = OpLoad %12 
                                       f32_4 %235 = OpVectorShuffle %234 %234 1 1 1 1 
                                Input f32_4* %237 = OpAccessChain %236 %22 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpFMul %235 %238 
                                                      OpStore %134 %239 
                                Input f32_4* %240 = OpAccessChain %236 %30 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpLoad %12 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpFMul %241 %243 
                                       f32_4 %245 = OpLoad %134 
                                       f32_4 %246 = OpFAdd %244 %245 
                                                      OpStore %134 %246 
                                Input f32_4* %247 = OpAccessChain %236 %42 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpLoad %12 
                                       f32_4 %250 = OpVectorShuffle %249 %249 2 2 2 2 
                                       f32_4 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %134 
                                       f32_4 %253 = OpFAdd %251 %252 
                                                      OpStore %134 %253 
                                       f32_4 %254 = OpLoad %9 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                Uniform f32* %257 = OpAccessChain %63 %256 
                                         f32 %258 = OpLoad %257 
                                Uniform f32* %259 = OpAccessChain %63 %256 
                                         f32 %260 = OpLoad %259 
                                Uniform f32* %261 = OpAccessChain %63 %256 
                                         f32 %262 = OpLoad %261 
                                       f32_3 %263 = OpCompositeConstruct %258 %260 %262 
                                         f32 %264 = OpCompositeExtract %263 0 
                                         f32 %265 = OpCompositeExtract %263 1 
                                         f32 %266 = OpCompositeExtract %263 2 
                                       f32_3 %267 = OpCompositeConstruct %264 %265 %266 
                                       f32_3 %268 = OpFMul %255 %267 
                                       f32_4 %269 = OpLoad %134 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %9 %273 
                                       f32_4 %274 = OpLoad %9 
                                       f32_4 %275 = OpVectorShuffle %274 %274 1 1 1 1 
                              Uniform f32_4* %276 = OpAccessChain %63 %22 %22 
                                       f32_4 %277 = OpLoad %276 
                                       f32_4 %278 = OpFMul %275 %277 
                                                      OpStore %165 %278 
                              Uniform f32_4* %279 = OpAccessChain %63 %22 %30 
                                       f32_4 %280 = OpLoad %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %281 0 0 0 0 
                                       f32_4 %283 = OpFMul %280 %282 
                                       f32_4 %284 = OpLoad %165 
                                       f32_4 %285 = OpFAdd %283 %284 
                                                      OpStore %165 %285 
                              Uniform f32_4* %286 = OpAccessChain %63 %22 %42 
                                       f32_4 %287 = OpLoad %286 
                                       f32_4 %288 = OpLoad %9 
                                       f32_4 %289 = OpVectorShuffle %288 %288 2 2 2 2 
                                       f32_4 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %165 
                                       f32_4 %292 = OpFAdd %290 %291 
                                                      OpStore %9 %292 
                                       f32_4 %293 = OpLoad %9 
                              Uniform f32_4* %295 = OpAccessChain %63 %22 %294 
                                       f32_4 %296 = OpLoad %295 
                                       f32_4 %297 = OpFAdd %293 %296 
                                                      OpStore %165 %297 
                                       f32_4 %299 = OpLoad %165 
                                       f32_4 %300 = OpVectorShuffle %299 %299 1 1 1 1 
                              Uniform f32_4* %301 = OpAccessChain %63 %294 %22 
                                       f32_4 %302 = OpLoad %301 
                                       f32_4 %303 = OpFMul %300 %302 
                                                      OpStore %298 %303 
                              Uniform f32_4* %304 = OpAccessChain %63 %294 %30 
                                       f32_4 %305 = OpLoad %304 
                                       f32_4 %306 = OpLoad %165 
                                       f32_4 %307 = OpVectorShuffle %306 %306 0 0 0 0 
                                       f32_4 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %298 
                                       f32_4 %310 = OpFAdd %308 %309 
                                                      OpStore %298 %310 
                              Uniform f32_4* %311 = OpAccessChain %63 %294 %42 
                                       f32_4 %312 = OpLoad %311 
                                       f32_4 %313 = OpLoad %165 
                                       f32_4 %314 = OpVectorShuffle %313 %313 2 2 2 2 
                                       f32_4 %315 = OpFMul %312 %314 
                                       f32_4 %316 = OpLoad %298 
                                       f32_4 %317 = OpFAdd %315 %316 
                                                      OpStore %298 %317 
                              Uniform f32_4* %318 = OpAccessChain %63 %294 %294 
                                       f32_4 %319 = OpLoad %318 
                                       f32_4 %320 = OpLoad %165 
                                       f32_4 %321 = OpVectorShuffle %320 %320 3 3 3 3 
                                       f32_4 %322 = OpFMul %319 %321 
                                       f32_4 %323 = OpLoad %298 
                                       f32_4 %324 = OpFAdd %322 %323 
                                                      OpStore %165 %324 
                                       f32_4 %329 = OpLoad %165 
                               Output f32_4* %331 = OpAccessChain %328 %30 
                                                      OpStore %331 %329 
                                Private f32* %334 = OpAccessChain %165 %179 
                                         f32 %335 = OpLoad %334 
                                                      OpStore %333 %335 
                              Uniform f32_4* %337 = OpAccessChain %63 %22 %294 
                                       f32_4 %338 = OpLoad %337 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_4 %340 = OpLoad %134 
                                       f32_3 %341 = OpVectorShuffle %340 %340 3 3 3 
                                       f32_3 %342 = OpFMul %339 %341 
                                       f32_4 %343 = OpLoad %9 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFAdd %342 %344 
                                                      OpStore %336 %345 
                              Uniform f32_4* %346 = OpAccessChain %63 %22 %294 
                                       f32_4 %347 = OpLoad %346 
                                       f32_4 %348 = OpLoad %134 
                                       f32_4 %349 = OpVectorShuffle %348 %348 3 3 3 3 
                                       f32_4 %350 = OpFMul %347 %349 
                                       f32_4 %351 = OpLoad %9 
                                       f32_4 %352 = OpFAdd %350 %351 
                                                      OpStore %9 %352 
                                       f32_4 %353 = OpLoad %9 
                                       f32_4 %354 = OpVectorShuffle %353 %353 1 1 1 1 
                              Uniform f32_4* %356 = OpAccessChain %63 %355 %22 
                                       f32_4 %357 = OpLoad %356 
                                       f32_4 %358 = OpFMul %354 %357 
                                                      OpStore %134 %358 
                              Uniform f32_4* %359 = OpAccessChain %63 %355 %30 
                                       f32_4 %360 = OpLoad %359 
                                       f32_4 %361 = OpLoad %9 
                                       f32_4 %362 = OpVectorShuffle %361 %361 0 0 0 0 
                                       f32_4 %363 = OpFMul %360 %362 
                                       f32_4 %364 = OpLoad %134 
                                       f32_4 %365 = OpFAdd %363 %364 
                                                      OpStore %134 %365 
                              Uniform f32_4* %366 = OpAccessChain %63 %355 %42 
                                       f32_4 %367 = OpLoad %366 
                                       f32_4 %368 = OpLoad %9 
                                       f32_4 %369 = OpVectorShuffle %368 %368 2 2 2 2 
                                       f32_4 %370 = OpFMul %367 %369 
                                       f32_4 %371 = OpLoad %134 
                                       f32_4 %372 = OpFAdd %370 %371 
                                                      OpStore %134 %372 
                              Uniform f32_4* %374 = OpAccessChain %63 %355 %294 
                                       f32_4 %375 = OpLoad %374 
                                       f32_4 %376 = OpLoad %9 
                                       f32_4 %377 = OpVectorShuffle %376 %376 3 3 3 3 
                                       f32_4 %378 = OpFMul %375 %377 
                                       f32_4 %379 = OpLoad %134 
                                       f32_4 %380 = OpFAdd %378 %379 
                                                      OpStore %373 %380 
                                 Output f32* %381 = OpAccessChain %328 %30 %187 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpFNegate %382 
                                 Output f32* %384 = OpAccessChain %328 %30 %187 
                                                      OpStore %384 %383 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
""
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
}
Program "hp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
}
Program "dp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
}
}
}
CustomEditor "ASEMaterialInspector"
}